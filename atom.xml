<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LSW_blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-02T11:33:51.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SW Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目部署云服务_Note</title>
    <link href="http://yoursite.com/2021/04/02/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%BA%91%E6%9C%8D%E5%8A%A1_Note/"/>
    <id>http://yoursite.com/2021/04/02/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%BA%91%E6%9C%8D%E5%8A%A1_Note/</id>
    <published>2021-04-02T11:34:25.776Z</published>
    <updated>2021-04-02T11:33:51.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326144204406.png" alt="image-20210326144204406"></p><h3 id="宝塔中新建站点www-linshiwei-cn后，可以通过http-www-linshiwei-cn访问"><a href="#宝塔中新建站点www-linshiwei-cn后，可以通过http-www-linshiwei-cn访问" class="headerlink" title="宝塔中新建站点www.linshiwei.cn后，可以通过http://www.linshiwei.cn访问"></a>宝塔中新建站点<a href="http://www.linshiwei.cn后，可以通过http://www.linshiwei.cn访问" target="_blank" rel="noopener">www.linshiwei.cn后，可以通过http://www.linshiwei.cn访问</a></h3><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326145138435.png" alt="image-20210326145138435"></p><h3 id="通过http-www-linshiwei-cn-3000-sorts-也可以访问，说明域名和-IP映射没有问题。"><a href="#通过http-www-linshiwei-cn-3000-sorts-也可以访问，说明域名和-IP映射没有问题。" class="headerlink" title="通过http://www.linshiwei.cn:3000/sorts 也可以访问，说明域名和 IP映射没有问题。"></a>通过<a href="http://www.linshiwei.cn:3000/sorts" target="_blank" rel="noopener">http://www.linshiwei.cn:3000/sorts</a> 也可以访问，说明<code>域名</code>和 <code>IP</code>映射没有问题。</h3><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326152944216.png" alt="image-20210326152944216"></p><h3 id="此时https-www-linshiwei-cn-无法访问-https无法访问"><a href="#此时https-www-linshiwei-cn-无法访问-https无法访问" class="headerlink" title="此时https://www.linshiwei.cn 无法访问 https无法访问"></a>此时<a href="https://www.linshiwei.cn" target="_blank" rel="noopener">https://www.linshiwei.cn</a> 无法访问 <code>https</code>无法访问</h3><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326145247359.png" alt="image-20210326145247359"></p><h4 id="在宝塔中配置ssl证书后"><a href="#在宝塔中配置ssl证书后" class="headerlink" title="在宝塔中配置ssl证书后"></a>在宝塔中配置ssl证书后</h4><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326145352435.png" alt="image-20210326145352435"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326145415215.png" alt="image-20210326145415215"></p><h3 id="此时再访问-https-www-linshiwei-cn-可以访问成功"><a href="#此时再访问-https-www-linshiwei-cn-可以访问成功" class="headerlink" title="此时再访问 https://www.linshiwei.cn 可以访问成功"></a>此时再访问 <a href="https://www.linshiwei.cn" target="_blank" rel="noopener">https://www.linshiwei.cn</a> 可以访问成功</h3><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326145540646.png" alt="image-20210326145540646"></p><h3 id="但是通过https访问3000端口-不成功！-宝塔中和云服务器中3000端口都已放行"><a href="#但是通过https访问3000端口-不成功！-宝塔中和云服务器中3000端口都已放行" class="headerlink" title="但是通过https访问3000端口 不成功！ (宝塔中和云服务器中3000端口都已放行)"></a>但是通过<code>https</code>访问3000端口 不成功！ (宝塔中和云服务器中3000端口都已放行)</h3><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326145633147.png" alt="image-20210326145633147"></p><h1 id="！！！！！！！！！！！"><a href="#！！！！！！！！！！！" class="headerlink" title="！！！！！！！！！！！"></a>！！！！！！！！！！！</h1><h1 id="在宝塔中为-站点设置反向代理！"><a href="#在宝塔中为-站点设置反向代理！" class="headerlink" title="在宝塔中为 站点设置反向代理！"></a>在宝塔中为 站点设置反向代理！</h1><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326151722157.png" alt="image-20210326151722157"></p><h1 id="此时可以通过-https-www-linshiwei-cn-sorts-访问数据。（无需加3000端口号）"><a href="#此时可以通过-https-www-linshiwei-cn-sorts-访问数据。（无需加3000端口号）" class="headerlink" title="此时可以通过 https://www.linshiwei.cn/sorts 访问数据。（无需加3000端口号）"></a>此时可以通过 <a href="https://www.linshiwei.cn/sorts" target="_blank" rel="noopener">https://www.linshiwei.cn/sorts</a> 访问数据。（无需加3000端口号）</h1><h1 id="访问成功！！"><a href="#访问成功！！" class="headerlink" title="访问成功！！"></a>访问成功！！</h1><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326153434911.png" alt="image-20210326153434911"></p><h1 id="项目部署到云服务器上，"><a href="#项目部署到云服务器上，" class="headerlink" title="项目部署到云服务器上，"></a>项目部署到云服务器上，</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"webpack-dev-server --open --port 5000 --host 127.0.0.1"</span></span><br></pre></td></tr></table></figure><p>–host 改为云服务器内网地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack-dev-server --open --port 5000 --host 172.18.176.98&quot;</span><br></pre></td></tr></table></figure><p>可通过服务器外网地址访问！<a href="http://139.224.186.245:5000" target="_blank" rel="noopener">http://139.224.186.245:5000</a></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329111249024.png" alt="image-20210329111249024"></p><h3 id="这时用域名还无法访问，显示-Invalid-Host-header"><a href="#这时用域名还无法访问，显示-Invalid-Host-header" class="headerlink" title="这时用域名还无法访问，显示 Invalid Host header"></a>这时用域名还无法访问，显示 <code>Invalid Host header</code></h3><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329111649074.png" alt="image-20210329111649074"></p><h2 id="Invalid-Host-header-服务器域名访问出现的问题"><a href="#Invalid-Host-header-服务器域名访问出现的问题" class="headerlink" title="Invalid Host header 服务器域名访问出现的问题"></a>Invalid Host header 服务器域名访问出现的问题</h2><p>用nginx做代理服务器，访问时显示：Invalid Host header</p><p>经查是因为新版的webpack-dev-server出于安全考虑，默认检查hostname，如果hostname不是配置内的就不能访问。<br>————————————————<br>版权声明：本文为CSDN博主「Cookysurongbin」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Cookysurongbin/article/details/86077241/" target="_blank" rel="noopener">https://blog.csdn.net/Cookysurongbin/article/details/86077241/</a></p><h2 id="在package-json文件修改scripts命令-webpack-dev-server-disableHostCheck-true"><a href="#在package-json文件修改scripts命令-webpack-dev-server-disableHostCheck-true" class="headerlink" title="在package.json文件修改scripts命令:webpack-dev-server --disableHostCheck=true"></a>在package.json文件修改scripts命令:<code>webpack-dev-server --disableHostCheck=true</code></h2><h2 id="用vue-cli-设置vue-config-js"><a href="#用vue-cli-设置vue-config-js" class="headerlink" title="用vue-cli 设置vue.config.js"></a>用vue-cli 设置vue.config.js</h2><p>module.exports = {<br>  devServer: {<br>        disableHostCheck: true<br>    }<br>}</p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329114108587.png" alt="image-20210329114108587"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329113909145.png" alt="image-20210329113909145"></p><p>此时只是通过<code>http</code>访问,而且要加端口号。可以为网站设置反向代理</p><p>目标url 为云服务器内网地址或者外网地址都可以</p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329114753186.png" alt="image-20210329114753186"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329115234356.png" alt="image-20210329115234356"></p><h2 id="通过pm2-使得项目自动运行"><a href="#通过pm2-使得项目自动运行" class="headerlink" title="通过pm2 使得项目自动运行"></a>通过pm2 使得项目自动运行</h2><h4 id="到网站目录下-运行-pm2-start-npm-name-foods-run-start"><a href="#到网站目录下-运行-pm2-start-npm-name-foods-run-start" class="headerlink" title="到网站目录下 运行  pm2 start npm --name foods -- run start"></a>到网站目录下 运行  <code>pm2 start npm --name foods -- run start</code></h4><h4 id="start-为package-json中要运行的脚本名-foods-为进程名"><a href="#start-为package-json中要运行的脚本名-foods-为进程名" class="headerlink" title="start 为package.json中要运行的脚本名   foods 为进程名"></a>start 为package.json中要运行的脚本名   foods 为进程名</h4><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329125206339.png" alt="image-20210329125206339"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start npm -- run start</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210329124832889.png" alt="image-20210329124832889"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210326144204406.png&quot; alt=&quot;image-20210326144204406&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nodejs连接mysql——createPool&amp;createConnection区别</title>
    <link href="http://yoursite.com/2021/03/06/nodejs%E8%BF%9E%E6%8E%A5mysql%E2%80%94%E2%80%94createPool&amp;createConnection%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2021/03/06/nodejs%E8%BF%9E%E6%8E%A5mysql%E2%80%94%E2%80%94createPool&amp;createConnection%E5%8C%BA%E5%88%AB/</id>
    <published>2021-03-06T07:28:15.129Z</published>
    <updated>2021-03-06T07:28:15.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs连接mysql——createPool-amp-createConnection区别"><a href="#nodejs连接mysql——createPool-amp-createConnection区别" class="headerlink" title="nodejs连接mysql——createPool&amp;createConnection区别"></a><a href="https://www.cnblogs.com/xsilence/p/12444228.html" target="_blank" rel="noopener">nodejs连接mysql——createPool&amp;createConnection区别</a></h1><h2 id="createConnection-建立连接-amp-关闭连接"><a href="#createConnection-建立连接-amp-关闭连接" class="headerlink" title="createConnection 建立连接&amp;关闭连接"></a>createConnection 建立连接&amp;关闭连接</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>（1）createConnection方法创建连接对象（正式的说法：使用createConnection方法创建一个表示与mysql数据库服务器之间连接的connection对象）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(options);</span><br></pre></td></tr></table></figure><p><strong>（2）用对象的connect方法建立连接。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; *** &#125;);</span><br></pre></td></tr></table></figure><p><strong>（3）关闭连接：connection对象的end方法和destory方法。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; *** &#125;); </span><br><span class="line">connection.destroy();</span><br></pre></td></tr></table></figure><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    database: <span class="string">'test'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line">connection.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[query] - :'</span> + err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[connection connect]  succeed!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">connection.end(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[connection end] succeed!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="createPool-创建连接池"><a href="#createPool-创建连接池" class="headerlink" title="createPool 创建连接池"></a>createPool 创建连接池</h2><ul><li><p>在开发web应用程序时，连接池是一个很重要的概念。建立一个数据库连接所消耗的性能成本是很高的。在服务器应用程序中，如果为每一个接收到的客户端请求都建立一个或多个数据库连接，将严重降低应用程序性能。</p></li><li><p>因此在服务器应用程序中通常需要为多个数据库连接创建并维护一个连接池，当连接不再需要时，这些连接可以缓存在连接池中，当接收到下一个客户端请求时，从连接池中取出连接并重新利用，而不需要再重新建立连接。</p></li></ul><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p><strong>（1）创建连接池 createPool方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pool = mysql.createPool(optioins);</span><br></pre></td></tr></table></figure><p>options参数包含createConnection方法中可以使用的各种属性，除此之外还有以下属性：createConnection，waitForConnections，connectionLimit，queueLimit。</p><p><strong>（2）从连接池中取出连接。getConnection方法。如无连接可用则隐式的建立一个数据库连接。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,connection</span>))</span></span><br></pre></td></tr></table></figure><p>回调函数中的err为错误对象，connection为获取到的连接对象。</p><p><strong>（3）当连接不再使用时，用connection对象的release方法将其归还到连接池中。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.release();</span><br></pre></td></tr></table></figure><p><strong>（4）当一个连接不再需要使用且需要从连接池中移除时，用connection对象的destroy方法。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.destroy();</span><br></pre></td></tr></table></figure><p>连接移除后，连接池中的连接数减一。</p><p><strong>（5）当一个连接池不再需要使用时，用连接池对象的end方法关闭连接池。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool.end();</span><br></pre></td></tr></table></figure><h3 id="完整示例-1"><a href="#完整示例-1" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pool = mysql.createPool(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    database: <span class="string">'test'</span></span><br><span class="line">&#125;);</span><br><span class="line">pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"建立连接失败"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"建立连接成功"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(pool._allConnections.length); <span class="comment">//  1</span></span><br><span class="line">        connection.query(<span class="string">'select * from user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, rows</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(rows);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// connection.destory();</span></span><br><span class="line">            <span class="built_in">console</span>.log(pool._allConnections.length);  <span class="comment">// 0</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    pool.end();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nodejs连接mysql——createPool-amp-createConnection区别&quot;&gt;&lt;a href=&quot;#nodejs连接mysql——createPool-amp-createConnection区别&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node.js_MySQL接口_部署到阿里云服务器</title>
    <link href="http://yoursite.com/2021/03/05/Node.js_MySQL%E6%8E%A5%E5%8F%A3_%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2021/03/05/Node.js_MySQL%E6%8E%A5%E5%8F%A3_%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-03-05T13:51:18.927Z</published>
    <updated>2021-04-02T11:38:48.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-js-MySQL接口-部署到阿里云服务器"><a href="#Node-js-MySQL接口-部署到阿里云服务器" class="headerlink" title="Node.js + MySQL接口 部署到阿里云服务器"></a>Node.js + MySQL接口 部署到阿里云服务器</h3><h3 id="通过微信小程序访问该接口"><a href="#通过微信小程序访问该接口" class="headerlink" title="通过微信小程序访问该接口"></a>通过微信小程序访问该接口</h3><ul><li>准备一个阿里云服务器；</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305203028349.png" alt="image-20210305203028349"></p><ul><li>远程连接，立即登录</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305203233171.png" alt="image-20210305203233171"></p><ul><li>第一次不知道密码，可以重置一下</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305204140577.png" alt="image-20210305204140577"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305203257368.png" alt="image-20210305203257368"></p><ul><li>切换到根目录下载宝塔面板</li></ul><blockquote><p><a href="https://www.bt.cn/download" target="_blank" rel="noopener">https://www.bt.cn/download</a></p></blockquote><ul><li>根据自己阿里云服务器的操作系统选择相应版本的宝塔面板（我的是CentOS 8.2 64位）。</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305203641440.png" alt="image-20210305203641440"></p><ul><li>下载完，根目录下会多出一个www目录。</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305204707682.png" alt="image-20210305204707682"></p><ul><li>配置云服务器的端口</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305205131420.png" alt="image-20210305205131420"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305205245945.png" alt="image-20210305205245945"></p><ul><li>手动添加 宝塔面板使用的8888端口，也把一些node中要用的端口也添加如3000端口</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305205348788.png" alt="image-20210305205348788"></p><ul><li>然后登录 宝塔面板      公网IP：8888</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305210106151.png" alt="image-20210305210106151"></p><ul><li>软件商店下载 PM2管理器、MySQL 、Nginx </li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305210013515.png" alt="image-20210305210013515"></p><ul><li>添加站点，没有域名，就用公网 +:端口号（端口号自定义，不要是已被分配使用的）把这个端口号在云服务器中和宝塔面板中也开放一下</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305210934279.png" alt="image-20210305210934279"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305222021712.png" alt="image-20210305222021712"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305211041175.png" alt="image-20210305211041175"></p><ul><li>然后打开网址  公网号：88</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305211313906.png" alt="image-20210305211313906"></p><ul><li><p>在www/wwwroot/设置的站点/ 下导入node 文件 </p></li><li><p>打包node文件，可以不用打包node_modules文件 </p></li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305212258638.png" alt="image-20210305212258638"></p><ul><li>添加数据库，导入sql文件</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305213558075.png" alt="image-20210305213558075"></p><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305213620154.png" alt="image-20210305213620154"></p><ul><li>到服务器终端，切到www/wwwroot/站点 目录下，可以ls看一下当前目录，如果之前没有上传node_modules，先npm install一下，然后运行node app.js</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305214735853.png" alt="image-20210305214735853"></p><ul><li>这样手动运行，关闭后就无法访问，所以在宝塔面板中用PM2管理器管理应用。</li><li>输入项目所在目录，和启动文件的名称。</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305214455947.png" alt="image-20210305214455947"></p><ul><li>在微信小程序中访问接口</li></ul><p><img src="C:%5CUsers%5CLSW%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210305214859411.png" alt="image-20210305214859411"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Node-js-MySQL接口-部署到阿里云服务器&quot;&gt;&lt;a href=&quot;#Node-js-MySQL接口-部署到阿里云服务器&quot; class=&quot;headerlink&quot; title=&quot;Node.js + MySQL接口 部署到阿里云服务器&quot;&gt;&lt;/a&gt;Node.js +</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AJAX-note</title>
    <link href="http://yoursite.com/2021/01/13/AJAX-note/"/>
    <id>http://yoursite.com/2021/01/13/AJAX-note/</id>
    <published>2021-01-13T02:38:52.000Z</published>
    <updated>2021-01-13T13:14:46.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生-AJAX"><a href="#原生-AJAX" class="headerlink" title="原生 AJAX"></a>原生 AJAX</h1><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。 AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p><a id="more"></a><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h2><p>XML 可扩展标记语言。</p><p>XML 被设计用来传输和存储数据。</p><p>XML 和 HTML 类 似， 不同 的是 HTML 中 都是 预定义 标签 ，而 XML 中 没有 预定 义标 签， 全都是自定义标签，用来表示一些数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//比如说我有一个学生数据：</span><br><span class="line">name = "孙悟空" ; age = 18 ; gender = "男" ; 用 XML 表示：</span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在已经被JSON取代了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用 JSON 表示：</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"孙悟空"</span>,<span class="attr">"age"</span>:<span class="number">18</span>,<span class="attr">"gender"</span>:<span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h3><ul><li>AJAX优点<ul><li>可以无需刷新页面而与服务器端进行通信。</li><li>允许你根据用户事件来更新部分页面内容。</li></ul></li></ul><ul><li>AJAX缺点<ul><li>没有浏览历史，不能回退。</li><li>存在跨域问题(同源)。</li><li>SEO 不友好。</li></ul></li></ul><h3 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h3><ul><li><p>核心对象</p></li><li><p>XMLHttpRequest ，AJAX 的所有操作都是通过该对象进行的。</p></li><li><p>使用步骤</p><ol><li><p>创建 XMLHttpRequest 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>设置请求信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置请求方法和 url</span></span><br><span class="line">xhr.open(method, url);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选：</span></span><br><span class="line"><span class="comment">//设置响应体数据的类型</span></span><br><span class="line">xhr.responseType = <span class="string">'json'</span>;</span><br><span class="line"><span class="comment">//可以设置请求头，一般不设置</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"> <span class="comment">//超时设置 2s 设置</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line">   <span class="comment">//超时回调</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"网络异常, 请稍后重试!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//网络异常回调</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"你的网络似乎出了一些问题!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(body) <span class="comment">//get 请求不传 body 参数，只有 post 请求使用</span></span><br></pre></td></tr></table></figure></li><li><p>接收响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xhr.responseXML 接收 xml 格式的响应数据 </span></span><br><span class="line"><span class="comment">//xhr.responseText 接收文本格式的响应数据 </span></span><br><span class="line"><span class="comment">//onreadystatechange</span></span><br><span class="line"><span class="comment">// on  when 当....时候</span></span><br><span class="line">        <span class="comment">// readystate 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">        <span class="comment">// change  改变</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//判断响应状态码 200  404  403 401 500</span></span><br><span class="line">    <span class="comment">// 2xx 成功</span></span><br><span class="line">    <span class="comment">//判断 (服务端返回了所有的结果)</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//判断响应状态码 200  404  403 401 500</span></span><br><span class="line">    <span class="comment">// 2xx 成功</span></span><br><span class="line">     <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">//处理结果  行 头 空行 体</span></span><br><span class="line">        <span class="comment">//响应 </span></span><br><span class="line">        <span class="comment">// console.log(xhr.status);//状态码</span></span><br><span class="line">        <span class="comment">// console.log(xhr.statusText);//状态字符串</span></span><br><span class="line">        <span class="comment">// console.log(xhr.getAllResponseHeaders());//所有响应头</span></span><br><span class="line">        <span class="comment">// console.log(xhr.response);//响应体</span></span><br><span class="line">        <span class="comment">//设置 result 的文本</span></span><br><span class="line">        result.innerHTML = xhr.response;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="解决-IE-缓存问题"><a href="#解决-IE-缓存问题" class="headerlink" title="解决 IE 缓存问题"></a>解决 IE 缓存问题</h3><p>​    问题：在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩 </p><p>余多次请求不会在发送给浏览器而是直接加载缓存中的数据。 </p><p>​    解决方式：浏览器的缓存是根据 url 地址来记录的，所以我们只需要修改 url 地址 </p><p>即可避免缓存问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"/testAJAX?t="</span>+<span class="built_in">Date</span>.now());</span><br></pre></td></tr></table></figure><h3 id="AJAX-请求状态"><a href="#AJAX-请求状态" class="headerlink" title="AJAX 请求状态"></a>AJAX 请求状态</h3><ul><li>xhr.readyState 可以用来查看请求当前的状态 </li></ul><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a> </p></blockquote><p>​    0: 表示 XMLHttpRequest 实例已经生成，但是 open()方法还没有被调用。 </p><p>​    1: 表示 send()方法还没有被调用，仍然可以使用 setRequestHeader()，设定 HTTP请求的头信息。 </p><p>​    2: 表示 send()方法已经执行，并且头信息和状态码已经收到。 </p><p>​    3: 表示正在接收服务器传来的 body 部分的数据。 </p><p>​    4: 表示服务器数据已经完全接收，或者本次接收已经失败了 </p><hr><hr><hr><h1 id="jQuery-中的-AJAX"><a href="#jQuery-中的-AJAX" class="headerlink" title="jQuery 中的 AJAX"></a>jQuery 中的 AJAX</h1><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><p>$.get(url, [data], [callback], [type]) </p><p>​    url:请求的 URL 地址。 </p><p>​    data:请求携带的参数。 </p><p>​    callback:载入成功时回调函数。 </p><p>​    type:设置返回内容格式，xml, html, script, json, text, _default。 </p><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><p>​    $.post(url, [data], [callback], [type]) </p><p>​    url:请求的 URL 地址。 </p><p>​    data:请求携带的参数。 </p><p>​    callback:载入成功时回调函数。 </p><p>​    type:设置返回内容格式，xml, html, script, json, text, _default。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $.<span class="keyword">get</span>('http://127.0.0.1:8000/jquery-server', &#123;a:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;,<span class="string">'json'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">'button'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $.post(<span class="string">'http://127.0.0.1:8000/jquery-server'</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">'button'</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="comment">//url</span></span><br><span class="line">                url: <span class="string">'http://127.0.0.1:8000/jquery-server'</span>,</span><br><span class="line">                <span class="comment">//参数</span></span><br><span class="line">                data: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line">                <span class="comment">//请求类型</span></span><br><span class="line">                type: <span class="string">'GET'</span>,</span><br><span class="line">                <span class="comment">//响应体结果</span></span><br><span class="line">                dataType: <span class="string">'json'</span>,</span><br><span class="line">                <span class="comment">//成功的回调</span></span><br><span class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(data);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//超时时间</span></span><br><span class="line">                timeout: <span class="number">2000</span>,</span><br><span class="line">                <span class="comment">//失败的回调</span></span><br><span class="line">                error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'出错啦!!'</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//头信息</span></span><br><span class="line">                headers: &#123;</span><br><span class="line">                    c:<span class="number">300</span>,</span><br><span class="line">                    d:<span class="number">400</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>​    同源策略(Same-Origin Policy)最早由 Netscape 公司提出，是浏览器的一种安全策略。</li><li>同源： 协议、域名、端口号 必须完全相同。</li><li>违背同源策略就是跨域。 </li></ul><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p></blockquote><h4 id="CORS-是什么？"><a href="#CORS-是什么？" class="headerlink" title="CORS 是什么？"></a>CORS 是什么？</h4><ul><li>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案 ，它 的特点是不需要在客户端做任何特 殊的操作，完 全在 服务 器中进行处理，支持 get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些 源站通过浏览器有权限访问哪些资源。</li></ul><h4 id="CORS-怎么工作的？"><a href="#CORS-怎么工作的？" class="headerlink" title="CORS  怎么工作的？"></a>CORS  怎么工作的？</h4><ul><li>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应 以后就会对响应放行。</li></ul><h4 id="CORS-的使用"><a href="#CORS-的使用" class="headerlink" title="CORS 的使用"></a>CORS 的使用</h4><ul><li>主要是服务器端的设置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'/cors-server'</span>, (request, response)=&gt;&#123;</span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">'*'</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Method"</span>, <span class="string">'*'</span>);</span><br><span class="line">    <span class="comment">// response.setHeader("Access-Control-Allow-Origin", "http://127.0.0.1:5500");</span></span><br><span class="line">    response.send(<span class="string">'hello CORS'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><ul><li><p>JSONP 是什么？</p><ul><li><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明 </p><p>才智开发出来，只支持 get 请求。</p></li></ul></li><li><p>JSONP 怎么工作的？ </p><ul><li>在网页有一些标签天生具有跨域能力，比如：img link iframe script。 </li><li>JSONP 就是利用 script 标签的跨域能力来发送请求的。</li></ul></li><li><p>JSONP 的使用</p><ul><li><p>动态的创建一个 script 标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var script &#x3D; document.createElement(&quot;script&quot;);</span><br></pre></td></tr></table></figure></li><li><p>设置 script 的 src，设置回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script.src = <span class="string">"http://localhost:3000/jquery-jsonp-server"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(data.name); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>将 script 添加到 body 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure></li><li><p>服务器中路由的处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jsonp服务</span></span><br><span class="line">app.all(<span class="string">'/jsonp-server'</span>,(request, response) =&gt; &#123;</span><br><span class="line">    <span class="comment">// response.send('console.log("hello jsonp")');</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        name: <span class="string">'hello'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.end(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="jQuery-中的-JSONP"><a href="#jQuery-中的-JSONP" class="headerlink" title="jQuery 中的 JSONP"></a>jQuery 中的 JSONP</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="string">'button'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//url后的 ?callback=? 必须加上，固定写法</span></span><br><span class="line">            $.getJSON(<span class="string">'http://127.0.0.1:8000/jquery-jsonp-server?callback=?'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                $(<span class="string">'#result'</span>).html(<span class="string">`</span></span><br><span class="line"><span class="string">                    名称: <span class="subst">$&#123;data.name&#125;</span>&lt;br&gt;</span></span><br><span class="line"><span class="string">                    校区: <span class="subst">$&#123;data.city&#125;</span></span></span><br><span class="line"><span class="string">                `</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>服务器中路由的处理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'/jquery-jsonp-server'</span>,(request, response) =&gt; &#123;</span><br><span class="line">    <span class="comment">// response.send('console.log("hello jsonp")');</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        name:<span class="string">'一线城市'</span>,</span><br><span class="line">        city: [<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'广州'</span>,<span class="string">'深圳'</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    <span class="comment">//接收 callback 参数</span></span><br><span class="line">    <span class="keyword">let</span> cb = request.query.callback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.end(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;原生-AJAX&quot;&gt;&lt;a href=&quot;#原生-AJAX&quot; class=&quot;headerlink&quot; title=&quot;原生 AJAX&quot;&gt;&lt;/a&gt;原生 AJAX&lt;/h1&gt;&lt;h2 id=&quot;AJAX-简介&quot;&gt;&lt;a href=&quot;#AJAX-简介&quot; class=&quot;headerlink&quot; title=&quot;AJAX 简介&quot;&gt;&lt;/a&gt;AJAX 简介&lt;/h2&gt;&lt;p&gt;AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。 AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs中异步编程(promise,回调函数)</title>
    <link href="http://yoursite.com/2021/01/11/Nodejs%E4%B8%AD%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B-promise/"/>
    <id>http://yoursite.com/2021/01/11/Nodejs%E4%B8%AD%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B-promise/</id>
    <published>2021-01-11T15:19:34.000Z</published>
    <updated>2021-01-11T15:32:56.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h3 id="1-1-什么叫异步"><a href="#1-1-什么叫异步" class="headerlink" title="1.1 什么叫异步"></a>1.1 什么叫异步</h3><p><code>异步(async)</code>是相对于<code>同步(sync)</code>而言的，很好理解。</p><p><code>同步</code>就是一件事一件事的执行。只有前一个任务执行完毕，才能执行后一个任务。</p><a id="more"></a><p>而<code>异步</code>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cbFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'learnInPro'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sync things'</span>);</span><br></pre></td></tr></table></figure><p>setTimeout就是一个<code>异步任务</code>，当JS引擎顺序执行到setTimeout的时候发现他是个异步任务，则会把这个任务挂起，继续执行后面的代码。直到1000ms后，回调函数cbFn才会执行，这就是异步，在执行到setTimeout的时候，JS并不会傻呵呵的等着1000ms执行cbFn回调函数，而是继续执行了后面的代码。</p><hr><h3 id="1-2-为啥要在JS中使用异步"><a href="#1-2-为啥要在JS中使用异步" class="headerlink" title="1.2 为啥要在JS中使用异步"></a>1.2 为啥要在JS中使用异步</h3><p>由于javascript是<code>单线程</code>的，只能在JS引擎的主线程上运行的，所以js代码只能一行一行的执行，不能在同一时间执行多个js代码任务，这就导致如果有一段耗时较长的计算，或者是一个ajax请求等IO操作，如果没有异步的存在，就会出现用户长时间等待，并且由于当前任务还未完成，所以这时候所有的其他操作都会无响应。</p><hr><h3 id="1-3-那为啥JS不设计成多线程的"><a href="#1-3-那为啥JS不设计成多线程的" class="headerlink" title="1.3 那为啥JS不设计成多线程的"></a>1.3 那为啥JS不设计成多线程的</h3><p>这主要跟javascript的历史有关，js最开始只是为了处理一些表单验证和DOM操作而被创造出来的，所以主要为了语言的轻量和简单采用了<code>单线程</code>的模式。<code>多线程模型</code>相比<code>单线程</code>要复杂很多，比如多线程需要处理线程间资源的共享问题，还要解决状态同步等问题。</p><p>如果JS是多线程的话，当你要执行往div中插入一个DOM的操作的同时，另一个线程执行了删除这个div的操作，这个时候就会出现很多问题，我们还需要为此增加锁机制等。</p><p>好，那么现在我们知道了单线程的JS为了不出现长时间等待的状况，会使用异步来处理。比如当执行一个ajax操作的时候，当js发出请求后，不会傻了吧唧的在那里等着服务器数据返回，而是去继续执行后面的任务，等到服务器数据返回以后再通知js引擎去处理。</p><blockquote><p>那么常见的异步模式有哪些呢？</p><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅模式（又称观察者模式）</li><li>promise</li></ul><p>后来ES6中，引入了<code>Generator</code>函数；ES7中，<code>async/await</code>更是将异步编程带入了一个全新的阶段。</p></blockquote><p>这些异步模式我们会在后面详细来说，这里我们有个概念就好。</p><hr><h3 id="1-4-JS如何实现异步"><a href="#1-4-JS如何实现异步" class="headerlink" title="1.4 JS如何实现异步"></a>1.4 JS如何实现异步</h3><p>具体JS是如何实现异步操作的呢？</p><p>答案就是<code>JS的事件循环机制(Event Loop)</code>。</p><p> 具体来说：</p><p>当JS解析执行时，会被引擎分为两类任务，<code>同步任务（synchronous）</code> 和 <code>异步任务（asynchronous）</code>。</p><p>对于同步任务来说，会被推到执行栈按顺序去执行这些任务。<br>对于异步任务来说，当其可以被执行时，会被放到一个 <code>任务队列（task queue）</code> 里等待JS引擎去执行。</p><p>当执行栈中的所有同步任务完成后，JS引擎才会去任务队列里查看是否有任务存在，并将任务放到执行栈中去执行，执行完了又会去任务队列里查看是否有已经可以执行的任务。这种循环检查的机制，就叫做<code>事件循环(Event Loop)</code>。</p><p>对于<code>任务队列</code>，其实是有更细的分类。其被分为 <code>微任务（microtask）队列</code> &amp; <code>宏任务（macrotask）队列</code></p><blockquote><p>宏任务: setTimeout、setInterval等，会被放在宏任务（macrotask）队列。</p><p>微任务: Promise的then、Mutation Observer等，会被放在微任务（microtask）队列。</p><p>Event Loop的执行顺序是：</p><ol><li>首先执行执行栈里的任务。</li><li>执行栈清空后，检查微任务（microtask）队列，将可执行的微任务全部执行。</li><li>取宏任务（macrotask）队列中的第一项执行。</li><li>回到第二步。</li></ol><p>注意： 微任务队列每次全执行，宏任务队列每次只取一项执行。</p></blockquote><p>我们举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是第一个宏任务'</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是第一个宏任务里的第一个微任务'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是第一个宏任务里的第二个微任务'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是第二个宏任务'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是第一个微任务'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行同步任务'</span>);</span><br></pre></td></tr></table></figure><p>最后的执行结果是：</p><blockquote><ul><li>// 执行同步任务</li><li>// 我是第一个微任务</li><li>// 我是第一个宏任务</li><li>// 我是第一个宏任务里的第一个微任务</li><li>// 我是第一个宏任务里的第二个微任务</li><li>// 我是第二个宏任务</li></ul></blockquote><hr><h3 id="1-5-JS异步编程模式"><a href="#1-5-JS异步编程模式" class="headerlink" title="1.5 JS异步编程模式"></a>1.5 JS异步编程模式</h3><p>这里我们已经知道了JS中异步的运行机制，我们翻回头来详细的了解一下常见的各种异步的编程模式。</p><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅模式</li><li>Promise</li><li>Generator</li><li>async/await</li></ul><h4 id="1-5-1-回调函数"><a href="#1-5-1-回调函数" class="headerlink" title="1.5.1 回调函数"></a>1.5.1 回调函数</h4><p>回调函数是异步操作最基本的方法。</p><p>比如：我有一个异步操作(asyncFn)，和一个同步操作(normalFn)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function asyncFn() &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;asyncFn&#39;);</span><br><span class="line">    &#125;, 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function normalFn() &#123;</span><br><span class="line">    console.log(&#39;normalFn&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFn();</span><br><span class="line">normalFn();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; normalFn</span><br><span class="line">&#x2F;&#x2F; asyncFn</span><br></pre></td></tr></table></figure><p>如果按照正常的JS处理机制来说，同步操作一定发生在异步之前。如果我想要将顺序改变，最简单的方式就是使用回调的方式处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function asyncFn(callback) &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;asyncFn&#39;);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;, 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function normalFn() &#123;</span><br><span class="line">    console.log(&#39;normalFn&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFn(normalFn);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; asyncFn</span><br><span class="line">&#x2F;&#x2F; normalFn</span><br></pre></td></tr></table></figure><h4 id="1-5-2-事件监听"><a href="#1-5-2-事件监听" class="headerlink" title="1.5.2 事件监听"></a>1.5.2 事件监听</h4><p>另一种思路是采用事件驱动模式。这种思路是说异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p><p>比如一个我们注册一个按钮的点击事件或者注册一个自定义事件，然后通过点击或者trigger的方式触发这个事件。</p><h4 id="1-5-3-发布-订阅模式（又称观察者模式）"><a href="#1-5-3-发布-订阅模式（又称观察者模式）" class="headerlink" title="1.5.3 发布/订阅模式（又称观察者模式）"></a>1.5.3 发布/订阅模式（又称观察者模式）</h4><p>这个重点讲下，发布/订阅模式像是事件监听模式的升级版。</p><p>在发布/订阅模式中，你可以想象存在一个消息中心的地方，你可以在那里“注册一条消息”，那么被注册的这条消息可以被感兴趣的若干人“订阅”，一旦未来这条“消息被发布”，则所有订阅了这条消息的人都会得到提醒。</p><p>这个就是发布/订阅模式的设计思路。接下来我们一点一点实现一个简单的发布/订阅模式。</p><p>首先我们先实现一个消息中心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先实现一个消息中心的构造函数，用来创建一个消息中心</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageCenter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _messages = &#123;&#125;; <span class="comment">// 所有注册的消息都存在这里</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.regist = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 用来注册消息的方法</span></span><br><span class="line">    <span class="keyword">this</span>.subscribe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  <span class="comment">// 用来订阅消息的方法</span></span><br><span class="line">    <span class="keyword">this</span>.fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;   <span class="comment">// 用来发布消息的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一个消息中心的雏形就创建好了，接下来我们只要完善下regist，subscribe和fire这三个方法就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageCenter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _messages = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于regist方法，它只负责注册消息，就只接收一个注册消息的类型(标识)参数就好了。</span></span><br><span class="line">    <span class="keyword">this</span>.regist = <span class="function"><span class="keyword">function</span>(<span class="params">msgType</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否重复注册</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> _messages[msgType] === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">            _messages[msgType] = [];    <span class="comment">// 数组中会存放订阅者</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'这个消息已经注册过了'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于subscribe方法，需要订阅者和已经注册了的消息进行绑定</span></span><br><span class="line">    <span class="comment">// 由于订阅者得到消息后需要处理消息，所以他是一个个的函数</span></span><br><span class="line">    <span class="keyword">this</span>.subscribe = <span class="function"><span class="keyword">function</span>(<span class="params">msgType, subFn</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否有这个消息</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> _messages[msgType] !== <span class="string">'undefined'</span>)&#123;</span><br><span class="line">            _messages[msgType].push(subFn);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'这个消息还没注册过，无法订阅'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后我们实现下fire这个方法，就是去发布某条消息，并通知订阅这条消息的所有订阅者函数</span></span><br><span class="line">    <span class="keyword">this</span>.fire = <span class="function"><span class="keyword">function</span>(<span class="params">msgType, args</span>)</span>&#123;    </span><br><span class="line">        <span class="comment">// msgType是消息类型或者说是消息标识，而args可以设置这条消息的附加信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 还是发布消息时，判断下有没有这条消息</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> _messages[msgType] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'没有这条消息，无法发布'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> events = &#123;</span><br><span class="line">            type: msgType,</span><br><span class="line">            args: args || &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        _messages[msgType].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>)</span>&#123;</span><br><span class="line">            sub(events);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，一个简单的发布/订阅模式就完成了，当然这只是这种模式的其中一种简单实现，还有很多其他的实现方式。<br>就此我们就可以用他来处理一些异步操作了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msgCenter = <span class="keyword">new</span> MessageCenter();</span><br><span class="line"></span><br><span class="line">msgCenter.regist(<span class="string">'A'</span>);</span><br><span class="line">msgCenter.subscribe(<span class="string">'A'</span>, subscribeFn);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribeFn</span>(<span class="params">events</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(events.type, events.args);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    msgCenter.fire(<span class="string">'A'</span>, <span class="string">'fire msg'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// A, fire msg</span></span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>不成立的情况下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> ret = x + y;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 结果是 1 3 undefined 4</span></span><br></pre></td></tr></table></figure><p>使用回调函数解决：</p><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y,callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// callback就是回调函数</span></span><br><span class="line">    <span class="comment">// var x = 10;</span></span><br><span class="line">    <span class="comment">// var y = 20;</span></span><br><span class="line">    <span class="comment">// var callback = function(ret)&#123;console.log(ret);&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = x + y;</span><br><span class="line">        callback(ret);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：</p><p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p><p>ajax:</p><p>基于原生XMLHttpRequest封装get方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 当请求加载成功要调用指定的函数</span></span><br><span class="line">oReq.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(oReq.responseText);</span><br><span class="line">&#125;</span><br><span class="line">oReq.open(<span class="string">"GET"</span>, <span class="string">"请求路径"</span>,<span class="literal">true</span>);</span><br><span class="line">oReq.send();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">// 当请求加载成功要调用指定的函数</span></span><br><span class="line">    oReq.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//console.log(oReq.responseText);</span></span><br><span class="line">        callback(oReq.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">    oReq.open(<span class="string">"GET"</span>, url,<span class="literal">true</span>);</span><br><span class="line">    oReq.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>('data.json',function(data)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>callback  hell（回调地狱）:</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fjpg%2F2451f1b01d709d237735a2b453c7b9aa.jpg%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100&refer=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1612924941&t=18ee21e80d7bb6738daa21952e920f72" alt="回调地狱"></p><p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/a.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/b.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//无法保证文件的执行顺序</span></span><br></pre></td></tr></table></figure><p>通过回调嵌套的方式来保证顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/a.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">fs.readFile(<span class="string">'./data/b.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">fs.readFile(<span class="string">'./data/a.text'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:<code>Promise</code>。</p><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在EcmaScript 6中新增了一个API Promise</span></span><br><span class="line"><span class="comment">// Promise 是一个构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 1 创建Promise容器resolve:解决   reject：失败</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">fs.readFile(<span class="string">'./a.text'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="comment">// console.log(err);</span></span><br><span class="line"><span class="comment">// 把容器的Pending状态变为rejected</span></span><br><span class="line">reject(err);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// console.log(data);</span></span><br><span class="line"><span class="comment">// 把容器的Pending状态变为resolve</span></span><br><span class="line">resolve(<span class="number">1234</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当p1成功了，然后就（then）做指定的操作</span></span><br><span class="line"><span class="comment">// then方法接收的function就是容器中的resolve函数</span></span><br><span class="line">p1</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'读取文件失败了'</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>封装Promise的<code>readFile</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pReadFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">fs.readFile(filePath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">reject(err);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resolve(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">'./a.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="keyword">return</span> pReadFile(<span class="string">'./b.txt'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="keyword">return</span> pReadFile(<span class="string">'./a.txt'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>mongoose所有的API都支持Promise：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">User.find()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>注册：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123;<span class="attr">username</span>:<span class="string">'admin'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户已存在'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> User(&#123;</span><br><span class="line">             username:<span class="string">'aaa'</span>,</span><br><span class="line">             password:<span class="string">'123'</span>,</span><br><span class="line">             email:<span class="string">'fffff'</span></span><br><span class="line">        &#125;).save(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'注册成功'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123;</span><br><span class="line">    username:<span class="string">'admin'</span></span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user)&#123;</span><br><span class="line">            <span class="comment">// 用户已经存在不能注册</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'用户已存在'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 用户不存在可以注册</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(&#123;</span><br><span class="line">                username:<span class="string">'aaa'</span>,</span><br><span class="line">                password:<span class="string">'123'</span>,</span><br><span class="line">                email:<span class="string">'fffff'</span></span><br><span class="line">            &#125;).save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(funciton(ret)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'注册成功'</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>async函数</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;异步编程&quot;&gt;&lt;a href=&quot;#异步编程&quot; class=&quot;headerlink&quot; title=&quot;异步编程&quot;&gt;&lt;/a&gt;异步编程&lt;/h1&gt;&lt;h3 id=&quot;1-1-什么叫异步&quot;&gt;&lt;a href=&quot;#1-1-什么叫异步&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么叫异步&quot;&gt;&lt;/a&gt;1.1 什么叫异步&lt;/h3&gt;&lt;p&gt;&lt;code&gt;异步(async)&lt;/code&gt;是相对于&lt;code&gt;同步(sync)&lt;/code&gt;而言的，很好理解。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;同步&lt;/code&gt;就是一件事一件事的执行。只有前一个任务执行完毕，才能执行后一个任务。&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodeJS:promise" scheme="http://yoursite.com/tags/nodeJS-promise/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs中MySQL的使用</title>
    <link href="http://yoursite.com/2021/01/11/Nodejs%E4%B8%ADMySQL%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/11/Nodejs%E4%B8%ADMySQL%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-11T15:01:28.000Z</published>
    <updated>2021-01-11T15:17:06.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Node操作MySQL数据库"><a href="#使用Node操作MySQL数据库" class="headerlink" title="使用Node操作MySQL数据库"></a>使用Node操作MySQL数据库</h1><p>文档：<a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">https://www.npmjs.com/package/mysql</a></p><p>安装：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save  mysql</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mysql包</span></span><br><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,<span class="comment">//本机</span></span><br><span class="line">  user     : <span class="string">'me'</span>,<span class="comment">//账号root</span></span><br><span class="line">  password : <span class="string">'secret'</span>,<span class="comment">//密码12345</span></span><br><span class="line">  database : <span class="string">'my_db'</span><span class="comment">//数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接数据库（打开冰箱门）</span></span><br><span class="line">connection.connect();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行数据操作（把大象放到冰箱）</span></span><br><span class="line">connection.query(<span class="string">'SELECT * FROM `users` '</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;<span class="comment">//抛出异常阻止代码往下执行</span></span><br><span class="line">  <span class="comment">// 没有异常打印输出结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>,results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接（关闭冰箱门）</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;使用Node操作MySQL数据库&quot;&gt;&lt;a href=&quot;#使用Node操作MySQL数据库&quot; class=&quot;headerlink&quot; title=&quot;使用Node操作MySQL数据库&quot;&gt;&lt;/a&gt;使用Node操作MySQL数据库&lt;/h1&gt;&lt;p&gt;文档：&lt;a href=&quot;https://www.npmjs.com/package/mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/mysql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save  mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Nodejs:MySQL" scheme="http://yoursite.com/tags/Nodejs-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs中MongoDB的使用</title>
    <link href="http://yoursite.com/2021/01/11/Nodejs%E4%B8%ADMongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/11/Nodejs%E4%B8%ADMongoDB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-11T14:46:01.000Z</published>
    <updated>2021-01-11T15:16:43.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h3 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h3><h4 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h4><a id="more"></a><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h4 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h4><ul><li>非关系型数据库非常的灵活</li><li>有的非关系型数据库就是key-value对儿</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    qq:&#123;</span><br><span class="line">       user:[</span><br><span class="line">           &#123;&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载</p><ul><li>下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></li></ul></li><li><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p></li><li><p>最后输入<code>mongod --version</code>测试是否安装成功</p></li></ul><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所以在第一次执行该命令之前先自己手动新建一个 /data/db</span></span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><p>如果想要修改默认的数据存储目录，可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath = 数据存储目录路径</span><br></pre></td></tr></table></figure><p>停止：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在开启服务的控制台，直接Ctrl+C;</span><br><span class="line">或者直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 该命令默认连接本机的 MongoDB 服务</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><p>退出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在连接状态输入 exit 退出连接</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><hr><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><code>show dbs</code><ul><li>查看数据库列表(数据库中的所有数据库)</li></ul></li><li><code>db</code><ul><li>查看当前连接的数据库</li></ul></li><li><code>use 数据库名称</code><ul><li>切换到指定的数据库，（如果没有会新建）</li></ul></li><li><code>show collections</code><ul><li>查看当前目录下的所有数据表</li></ul></li><li><code>db.表名.find()</code><ul><li>查看表中的详细信息</li></ul></li></ul><hr><h2 id="在Node中如何操作MongoDB数据库"><a href="#在Node中如何操作MongoDB数据库" class="headerlink" title="在Node中如何操作MongoDB数据库"></a>在Node中如何操作MongoDB数据库</h2><h3 id="使用官方的MongoDB包来操作"><a href="#使用官方的MongoDB包来操作" class="headerlink" title="使用官方的MongoDB包来操作"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote><p>​    <a href="http://mongodb.github.io/node-mongodb-native/" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native/</a></p></blockquote><h3 id="使用第三方包mongoose来操作MongoDB数据库"><a href="#使用第三方包mongoose来操作MongoDB数据库" class="headerlink" title="使用第三方包mongoose来操作MongoDB数据库"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p><blockquote><p>​    <a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a></p></blockquote><h2 id="学习指南（步骤）"><a href="#学习指南（步骤）" class="headerlink" title="学习指南（步骤）"></a>学习指南（步骤）</h2><blockquote><p>官方学习文档：<a href="https://mongoosejs.com/docs/index.html" target="_blank" rel="noopener">https://mongoosejs.com/docs/index.html</a></p></blockquote><h3 id="设计Scheme-发布Model-创建表"><a href="#设计Scheme-发布Model-创建表" class="headerlink" title="设计Scheme 发布Model (创建表)"></a>设计Scheme 发布Model (创建表)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引包</span></span><br><span class="line"><span class="comment">// 注意：按照后才能require使用</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到schema图表</span></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.连接数据库</span></span><br><span class="line"><span class="comment">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设计集合结构（表结构）</span></span><br><span class="line"><span class="comment">// 用户表</span></span><br><span class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">username: &#123; <span class="comment">//姓名</span></span><br><span class="line">type: <span class="built_in">String</span>,</span><br><span class="line"><span class="built_in">require</span>: <span class="literal">true</span> <span class="comment">//添加约束，保证数据的完整性，让数据按规矩统一</span></span><br><span class="line">&#125;,</span><br><span class="line">password: &#123;</span><br><span class="line">type: <span class="built_in">String</span>,</span><br><span class="line"><span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">email: &#123;</span><br><span class="line">type: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.将文档结构发布为模型</span></span><br><span class="line"><span class="comment">// mongoose.model方法就是用来将一个架构发布为 model</span></span><br><span class="line"><span class="comment">// 第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span></span><br><span class="line"><span class="comment">// mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span></span><br><span class="line"><span class="comment">// 例如 这里会变成users集合名称</span></span><br><span class="line"><span class="comment">// 第二个参数：架构</span></span><br><span class="line"><span class="comment">// 返回值：模型构造函数</span></span><br><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>, userSchema);</span><br></pre></td></tr></table></figure><h3 id="添加数据（增）"><a href="#添加数据（增）" class="headerlink" title="添加数据（增）"></a>添加数据（增）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.通过模型构造函数对User中的数据进行操作</span></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">username: <span class="string">'admin'</span>,</span><br><span class="line">password: <span class="string">'123456'</span>,</span><br><span class="line">email: <span class="string">'xiaochen@qq.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'保存失败'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'保存成功'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除（删）"><a href="#删除（删）" class="headerlink" title="删除（删）"></a>删除（删）</h3><p>根据条件删除所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User.remove(&#123;</span><br><span class="line">username: <span class="string">'xiaoxiao'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除失败'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除成功'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>根据条件删除一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.findOneAndRemove(conditions,[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据id删除一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.findByIdAndRemove(id,[options],[callback]);</span><br></pre></td></tr></table></figure><h3 id="更新（改）"><a href="#更新（改）" class="headerlink" title="更新（改）"></a>更新（改）</h3><p>更新所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.remove(conditions,doc,[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据指定条件更新一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.FindOneAndUpdate([conditions],[update],[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据id更新一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新根据id来修改表数据</span></span><br><span class="line">User.findByIdAndUpdate(<span class="string">'5e6c5264fada77438c45dfcd'</span>, &#123;</span><br><span class="line">username: <span class="string">'junjun'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'更新失败'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'更新成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="查询（查）"><a href="#查询（查）" class="headerlink" title="查询（查）"></a>查询（查）</h3><p>查询所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">User.find(<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>条件查询所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据条件查询</span></span><br><span class="line">User.find(&#123; <span class="attr">username</span>:<span class="string">'xiaoxiao'</span> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>条件查询单个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照条件查询单个，查询出来的数据是一个对象（&#123;&#125;）</span></span><br><span class="line"><span class="comment">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span></span><br><span class="line">User.findOne(&#123;</span><br><span class="line">username: <span class="string">'xiaoxiao'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h1&gt;&lt;h3 id=&quot;关系型和非关系型数据库&quot;&gt;&lt;a href=&quot;#关系型和非关系型数据库&quot; class=&quot;headerlink&quot; title=&quot;关系型和非关系型数据库&quot;&gt;&lt;/a&gt;关系型和非关系型数据库&lt;/h3&gt;&lt;h4 id=&quot;关系型数据库（表就是关系，或者说表与表之间存在关系）。&quot;&gt;&lt;a href=&quot;#关系型数据库（表就是关系，或者说表与表之间存在关系）。&quot; class=&quot;headerlink&quot; title=&quot;关系型数据库（表就是关系，或者说表与表之间存在关系）。&quot;&gt;&lt;/a&gt;关系型数据库（表就是关系，或者说表与表之间存在关系）。&lt;/h4&gt;</summary>
    
    
    
    
    <category term="Nodejs:MongoDB" scheme="http://yoursite.com/tags/Nodejs-MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs中Express框架的使用</title>
    <link href="http://yoursite.com/2021/01/11/Nodejs%E4%B8%ADExpress%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/11/Nodejs%E4%B8%ADExpress%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-11T14:36:34.000Z</published>
    <updated>2021-01-11T15:32:13.103Z</updated>
    
    <content type="html"><![CDATA[<p>​    原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p><a id="more"></a><ul><li><code>http://expressjs.com/</code>,其中主要封装的是http。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 安装</span></span><br><span class="line"><span class="comment">// 2 引包</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 3 创建服务器应用程序</span></span><br><span class="line"><span class="comment">//      也就是原来的http.createServer();</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开指定目录</span></span><br><span class="line"><span class="comment">// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源</span></span><br><span class="line"><span class="comment">// 在Express中开放资源就是一个API的事</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'/public/'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板引擎在Express中开放模板也是一个API的事</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当服务器收到get请求 / 的时候，执行回调处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello express'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于server.listen</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app is runing at port 3000'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="学习Express"><a href="#学习Express" class="headerlink" title="学习Express"></a>学习Express</h3><h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><p>安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建app</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2. </span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// res.write('Hello');</span></span><br><span class="line">    <span class="comment">// res.write('World');</span></span><br><span class="line">    <span class="comment">// res.end()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// res.end('hello world');</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    res.send(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'express app is runing...'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h5><p>路由：</p><ul><li><p>请求方法</p></li><li><p>请求路径</p></li><li><p>请求处理函数</p></li></ul><p>get:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当你以get方法请求/的时候，执行对应的处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当你以post方法请求/的时候，执行对应的处理函数</span></span><br><span class="line">app.post(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Express静态服务API"><a href="#Express静态服务API" class="headerlink" title="Express静态服务API"></a>Express静态服务API</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'files'</span>));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/stataic'</span>,express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放静态资源</span></span><br><span class="line"><span class="comment">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span></span><br><span class="line"><span class="comment">// 访问：http://127.0.0.1:3000/public/login.html</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'./public/'</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span></span><br><span class="line"><span class="comment">// 访问：http://127.0.0.1:3000/login.html</span></span><br><span class="line"><span class="comment">// app.use(express.static('./public/'));   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.访问：http://127.0.0.1:3000/a/login.html</span></span><br><span class="line"><span class="comment">// a相当于public的别名</span></span><br><span class="line"><span class="comment">// app.use('/a/',express.static('./public/')); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'express app is runing...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h5 id="在Express中配置使用art-templete模板引擎"><a href="#在Express中配置使用art-templete模板引擎" class="headerlink" title="在Express中配置使用art-templete模板引擎"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul><li><a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">art-template官方文档</a></li><li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul><li>还有ejs，jade（pug），handlebars，nunjucks</li></ul></li></ul><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br><span class="line"></span><br><span class="line">//两个一起安装</span><br><span class="line">npm i --save art-template express-art-template</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//  express 默认会去views目录找index.html</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">           title:<span class="string">'hello world'</span>     </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数views千万不要写错</span></span><br><span class="line">app.set(<span class="string">'views'</span>,目录路径);</span><br></pre></td></tr></table></figure><h5 id="在Express中获取表单请求数据"><a href="#在Express中获取表单请求数据" class="headerlink" title="在Express中获取表单请求数据"></a>在Express中获取表单请求数据</h5><h6 id="获取get请求数据："><a href="#获取get请求数据：" class="headerlink" title="获取get请求数据："></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过requery方法获取用户输入的数据</span></span><br><span class="line"><span class="comment">// req.query只能拿到get请求的数据</span></span><br><span class="line"> <span class="keyword">var</span> comment = req.query;</span><br></pre></td></tr></table></figure><h6 id="获取post请求数据："><a href="#获取post请求数据：" class="headerlink" title="获取post请求数据："></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p><p>安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save body-parser;</span><br></pre></td></tr></table></figure><p>配置：</p><p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置body-parser</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span></span><br><span class="line"><span class="comment">// 也就是说可以直接通过req.body来获取表单post请求数据</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)</span><br><span class="line">  res.write(<span class="string">'you posted:\n'</span>)</span><br><span class="line">  <span class="comment">// 可以通过req.body来获取表单请求数据</span></span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(req.body, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="在Express中配置使用express-session插件操作"><a href="#在Express中配置使用express-session插件操作" class="headerlink" title="在Express中配置使用express-session插件操作"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote><p>参考文档：<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span></span><br><span class="line"><span class="comment">//这是最简单的配置方式</span></span><br><span class="line"><span class="comment">//Session是基于Cookie实现的</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  <span class="comment">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span></span><br><span class="line">  <span class="comment">//目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,<span class="comment">//无论是否适用Session，都默认直接分配一把钥匙</span></span><br><span class="line">  cookie: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读</span></span><br><span class="line"><span class="comment">//添加Session数据</span></span><br><span class="line"><span class="comment">//session就是一个对象</span></span><br><span class="line">req.session.foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="comment">//获取session数据</span></span><br><span class="line">req.session.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">req.session.foo = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">delete</span> req.session.foo</span><br></pre></td></tr></table></figure><p>提示：</p><p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p><hr><h3 id="利用Express实现ADUS项目"><a href="#利用Express实现ADUS项目" class="headerlink" title="利用Express实现ADUS项目"></a>利用Express实现ADUS项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p><ul><li>模块职责要单一</li></ul><p>javascript模块化：</p><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD    require.js</li><li>CMD     sea.js</li></ul></li><li>es6中增加了官方支持</li></ul><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><ul><li>初始化</li><li>模板处理</li></ul><h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table><thead><tr><th>请求方法</th><th align="left">请求路径</th><th align="left">get参数</th><th>post参数</th><th align="left">备注</th></tr></thead><tbody><tr><td>GET</td><td align="left">/students</td><td align="left"></td><td></td><td align="left">渲染首页</td></tr><tr><td>GET</td><td align="left">/students/new</td><td align="left"></td><td></td><td align="left">渲染添加学生页面</td></tr><tr><td>POST</td><td align="left">/students/new</td><td align="left"></td><td>name,age,gender,hobbies</td><td align="left">处理添加学生请求</td></tr><tr><td>GET</td><td align="left">/students/edit</td><td align="left">id</td><td></td><td align="left">渲染编辑页面</td></tr><tr><td>POST</td><td align="left">/students/edit</td><td align="left"></td><td>id,name,age,gender,hobbies</td><td align="left">处理编辑请求</td></tr><tr><td>GET</td><td align="left">/students/delete</td><td align="left">id</td><td></td><td align="left">处理删除请求</td></tr></tbody></table><h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * router.js路由模块</span></span><br><span class="line"><span class="comment"> * 职责：</span></span><br><span class="line"><span class="comment"> *      处理路由</span></span><br><span class="line"><span class="comment"> *      根据不同的请求方法+请求路径设置具体的请求函数</span></span><br><span class="line"><span class="comment"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express专门提供了一种更好的方式</span></span><br><span class="line"><span class="comment">// 专门用来提供路由的</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 1 创建一个路由容器</span></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="comment">// 2 把路由都挂载到路由容器中</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res.send('hello world');</span></span><br><span class="line">    <span class="comment">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span></span><br><span class="line">    <span class="comment">// 除了这样来转换，也可以通过data.toString（）来转换</span></span><br><span class="line">    fs.readFile(<span class="string">'./db.json'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取到的文件数据是string类型的数据</span></span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="comment">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span></span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students;</span><br><span class="line">        res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">            <span class="comment">// 读取文件数据</span></span><br><span class="line">            students:students</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students/new'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'new.html'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/students/edit'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students/delete'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 把router导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>app.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router(app);</span></span><br><span class="line"><span class="comment">// 把路由容器挂载到app服务中</span></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.use(router);</span><br></pre></td></tr></table></figure><h4 id="设计操作数据的API文件模块"><a href="#设计操作数据的API文件模块" class="headerlink" title="设计操作数据的API文件模块"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p><p>find接受一个方法作为参数，方法内部返回一个条件</p><p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p><p>符合该条件的元素会作为find方法的返回值</p><p>如果遍历结束还没有符合该条件的元素，则返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * student.js</span></span><br><span class="line"><span class="comment"> * 数据操作文件模块</span></span><br><span class="line"><span class="comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取所有学生列表</span></span><br><span class="line"><span class="comment">  * return []</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">exports.find = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取添加保存学生</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">exports.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.delete = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p><p>模板页：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">&lt;title&gt;模板页&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;link rel="stylesheet" href="/</span>node_modules/bootstrap/dist/css/bootstrap.css<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">&#123;&#123; block 'head' &#125;&#125;&#123;&#123; /block &#125;&#125;</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;include './header.html'&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- 留一个位置 让别的内容去填充 --&gt;</span></span><br><span class="line"><span class="string">&#123;&#123; block  'content' &#125;&#125;</span></span><br><span class="line"><span class="string">&lt;h1&gt;默认内容&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&#123;&#123; /block &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- 通过include导入公共部分 --&gt;</span></span><br><span class="line"><span class="string">&#123;&#123;include './footer.html'&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- 公共样式 --&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>/node_modules/jquery/dist/jquery.js<span class="string">" &gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>/node_modules/bootstrap/dist/js/bootstrap.js<span class="string">" &gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#123;&#123; block 'script' &#125;&#125;&#123;&#123; /block &#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>模板的继承：</p><p>​    header页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">""</span>&gt;</span><br><span class="line">&lt;h1&gt;公共的头部&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>​    footer页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">""</span>&gt;</span><br><span class="line">&lt;h1&gt;公共的底部&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>模板页的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 继承(extend:延伸，扩展)模板页layout.html --&gt;</span><br><span class="line">&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;</span><br><span class="line">&#123;&#123;extend <span class="string">'./layout.html'</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 向模板页面填充新的数据 --&gt;</span><br><span class="line">&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;</span><br><span class="line">&lt;!-- style样式方面的内容 --&gt;</span><br><span class="line">&#123;&#123; block <span class="string">'head'</span> &#125;&#125;</span><br><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">body&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123; /</span>block &#125;&#125;</span><br><span class="line">&#123;&#123; block <span class="string">'content'</span> &#125;&#125;</span><br><span class="line">&lt;div id=<span class="string">""</span>&gt;</span><br><span class="line">&lt;h1&gt;Index页面的内容&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br><span class="line">&lt;!-- js部分的内容 --&gt;</span><br><span class="line">&#123;&#123; block <span class="string">'script'</span> &#125;&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123; /</span>block &#125;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h1><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/guide/using-middleware.html</a></p></blockquote><p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p><p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p><p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cookie = <span class="built_in">require</span>(<span class="string">'./expressPtoject/cookie'</span>);</span><br><span class="line"><span class="keyword">var</span> query = <span class="built_in">require</span>(<span class="string">'./expressPtoject/query'</span>);</span><br><span class="line"><span class="keyword">var</span> postBody = <span class="built_in">require</span>(<span class="string">'./expressPtoject/post-body'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 解析请求地址中的get参数</span></span><br><span class="line"><span class="comment">// var obj = url.parse(req.url,true);</span></span><br><span class="line"><span class="comment">// req.query = obj.query;</span></span><br><span class="line">query(req,res);<span class="comment">//中间件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析请求地址中的post参数</span></span><br><span class="line">req.body = &#123;</span><br><span class="line">foo:<span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(req.url === <span class="string">'xxx'</span>)&#123;</span><br><span class="line"><span class="comment">// 处理请求</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3000 runing...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/abc'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 同一个请求的req和res是一样的，</span></span><br><span class="line"><span class="comment">// 可以前面存储下面调用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'/abc'</span>);</span><br><span class="line"><span class="comment">// req.foo = 'bar';</span></span><br><span class="line">req.body = &#123;</span><br><span class="line">name:<span class="string">'xiaoxiao'</span>,</span><br><span class="line">age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/abc'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(req.foo);</span></span><br><span class="line"><span class="built_in">console</span>.log(req.body);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'/abc'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'app is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="应用程序级别的中间件"><a href="#应用程序级别的中间件" class="headerlink" title="应用程序级别的中间件"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time'</span>,<span class="built_in">Date</span>.now());</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关心请求路径和请求方法的中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time'</span>,<span class="built_in">Date</span>.now());</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p><p>get:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'get'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>post：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'post'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>put:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.put(<span class="string">'/user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'put'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>delete:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.delete(<span class="string">'/delete'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'delete'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="总体："><a href="#总体：" class="headerlink" title="总体："></a>总体：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：处理请求，本质就是个函数</span></span><br><span class="line"><span class="comment">// 在express中，对中间件有几种分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 不关心任何请求路径和请求方法的中间件</span></span><br><span class="line"><span class="comment">// 也就是说任何请求都会进入这个中间件</span></span><br><span class="line"><span class="comment">// 中间件本身是一个方法，该方法接收三个参数</span></span><br><span class="line"><span class="comment">// Request 请求对象</span></span><br><span class="line"><span class="comment">// Response 响应对象</span></span><br><span class="line"><span class="comment">// next 下一个中间件</span></span><br><span class="line"><span class="comment">// // 全局匹配中间件</span></span><br><span class="line"><span class="comment">// app.use(function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">// console.log('1');</span></span><br><span class="line"><span class="comment">// // 当一个请求进入中间件后</span></span><br><span class="line"><span class="comment">// // 如果需要请求另外一个方法则需要使用next（）方法</span></span><br><span class="line"><span class="comment">// next();</span></span><br><span class="line"><span class="comment">// // next是一个方法，用来调用下一个中间件</span></span><br><span class="line"><span class="comment">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// app.use(function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">// console.log('2');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 2 关心请求路径的中间件</span></span><br><span class="line"><span class="comment">// // 以/xxx开头的中间件</span></span><br><span class="line"><span class="comment">// app.use('/a',function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">// console.log(req.url);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 严格匹配请求方法和请求路径的中间件</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'/'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'/a'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'app is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err,stack);</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">'Something broke'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置使用404中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'404.html'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置全局错误处理中间件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">fs.readFile(<span class="string">'.a/bc'</span>, funtion() &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span></span><br><span class="line">        <span class="comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span></span><br><span class="line">        <span class="comment">// 然后被全局错误处理中间件匹配到并进行处理</span></span><br><span class="line">next(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;</span><br><span class="line">    res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">        err_code:<span class="number">500</span>,</span><br><span class="line">        message:err.message</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express" target="_blank" rel="noopener">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li></ul></li></ul><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><ul><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Nodejs:Express" scheme="http://yoursite.com/tags/Nodejs-Express/"/>
    
  </entry>
  
  <entry>
    <title>path路径操作模块和__dirname, __filename</title>
    <link href="http://yoursite.com/2021/01/11/path%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2021/01/11/path%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9D%97/</id>
    <published>2021-01-11T14:33:42.000Z</published>
    <updated>2021-01-11T15:42:30.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><blockquote><p>参考文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html" target="_blank" rel="noopener">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p></blockquote><a id="more"></a><ul><li>path.basename：获取路径的文件名，默认包含扩展名</li><li>path.dirname：获取路径中的目录部分</li><li>path.extname：获取一个路径中的扩展名部分</li><li>path.parse：把路径转换为对象,包含一下以下：<ul><li>root：根路径</li><li>dir：目录</li><li>base：包含后缀名的文件名</li><li>ext：后缀名</li><li>name：不包含后缀名的文件名</li></ul></li><li>path.join：拼接路径</li><li>path.isAbsolute：判断一个路径是否为绝对路径</li></ul><h1 id="Node中的其它成员"><a href="#Node中的其它成员" class="headerlink" title="Node中的其它成员"></a>Node中的其它成员</h1><h3 id="dirname-filename"><a href="#dirname-filename" class="headerlink" title="(__dirname, __filename)"></a>(__dirname, __filename)</h3><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p><ul><li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p></li><li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p></li><li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p></li></ul><p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p><p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p><p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p><p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(__dirname + 'a.txt');</span></span><br><span class="line"><span class="comment">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span></span><br><span class="line">fs.readFile(path.join(__dirname + <span class="string">'/a.txt'</span>),<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="keyword">throw</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p></blockquote><blockquote><p><strong>注意：</strong></p><p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p><p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;path路径操作模块&quot;&gt;&lt;a href=&quot;#path路径操作模块&quot; class=&quot;headerlink&quot; title=&quot;path路径操作模块&quot;&gt;&lt;/a&gt;path路径操作模块&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;https://nodejs.org/docs/latest-v13.x/api/path.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/docs/latest-v13.x/api/path.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>npm的基本使用</title>
    <link href="http://yoursite.com/2021/01/11/npm%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/11/npm%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-11T14:27:27.000Z</published>
    <updated>2021-01-11T15:17:17.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li><p>node package manage(node包管理器)</p></li><li><p>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</p><a id="more"></a></li></ul><h3 id="npm网站"><a href="#npm网站" class="headerlink" title="npm网站"></a>npm网站</h3><blockquote><p>​    npmjs.com    网站   是用来搜索npm包的</p></blockquote><h3 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p><p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p><p>升级npm(自己升级自己)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>npm init(生成package.json说明书文件)<ul><li>npm init -y(可以跳过向导，快速生成)</li></ul></li><li>npm install<ul><li>一次性把dependencies选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li>npm install 包名<ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（package.json文件中的dependencies选项）</li><li>简写（npm i  包名）</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li>npm help<ul><li>查看使用帮助</li></ul></li><li>npm 命令 –help<ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h3 id="解决npm被墙问题"><a href="#解决npm被墙问题" class="headerlink" title="解决npm被墙问题"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><p>安装淘宝的cnpm：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在任意目录执行都可以</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--global表示安装到全局，而非当前目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--global不能省略，否则不管用</span></span><br><span class="line">npm install --global cnpm</span><br></pre></td></tr></table></figure><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">走国外的npm服务器下载jQuery包，速度比较慢</span></span><br><span class="line">npm install jQuery;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用cnpm就会通过淘宝的服务器来下载jQuery</span></span><br><span class="line">cnpm install jQuery;</span><br></pre></td></tr></table></figure><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --registry=https://npm.taobao.org;</span><br></pre></td></tr></table></figure><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://npm.taobao.org;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看npm配置信息</span></span><br><span class="line">npm config list;</span><br></pre></td></tr></table></figure><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">D:\code\node中的模块系统&gt;npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See <span class="string">`npm help json`</span> <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use <span class="string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and</span><br><span class="line">save it <span class="keyword">as</span> a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (node中的模块系统)</span><br><span class="line">Sorry, name can only contain URL-friendly characters.</span><br><span class="line">package name: (node中的模块系统) cls</span><br><span class="line">version: (<span class="number">1.0</span><span class="number">.0</span>)</span><br><span class="line">description: 这是一个测试项目</span><br><span class="line">entry point: (main.js)</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author: xiaochen</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to D:\code\node中的模块系统\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"cls"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"这是一个测试项目"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"xiaochen"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is <span class="keyword">this</span> OK? (yes) yes</span><br></pre></td></tr></table></figure><p>这个文件也可以通过<code>npm init -y</code>快速初始化默认<code>package.json</code>文件</p><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm 5 以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5 以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li><li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul><li>这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li>从文件来看，有一个<code>lock</code>称之为锁<ul><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li><li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;node package manage(node包管理器)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodeJS:npm" scheme="http://yoursite.com/tags/nodeJS-npm/"/>
    
  </entry>
  
  <entry>
    <title>Node中require加载规则</title>
    <link href="http://yoursite.com/2021/01/11/Node%E4%B8%ADrequire%E5%8A%A0%E8%BD%BD%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2021/01/11/Node%E4%B8%ADrequire%E5%8A%A0%E8%BD%BD%E8%A7%84%E5%88%99/</id>
    <published>2021-01-11T14:25:20.000Z</published>
    <updated>2021-01-11T15:35:02.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="require的加载规则"><a href="#require的加载规则" class="headerlink" title="require的加载规则"></a>require的加载规则</h1><ul><li><p>核心模块</p><ul><li>模块名</li></ul><a id="more"></a></li><li><p>第三方模块</p><ul><li>模块名</li></ul></li><li><p>用户自己写的</p><ul><li>路径</li></ul></li></ul><h2 id="require的加载规则："><a href="#require的加载规则：" class="headerlink" title="require的加载规则："></a>require的加载规则：</h2><ul><li><p>优先从缓存加载</p></li><li><p>判断模块标识符</p><ul><li>核心模块</li><li>自己写的模块（路径形式的模块）</li><li>第三方模块（node_modules）<ul><li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li><li>npm<ul><li>开发人员可以把写好的框架库发布到npm上</li><li>使用者通过npm命令来下载</li></ul></li><li>使用方式：<code>var 名称 = require(&#39;npm install【下载包】 的包名&#39;)</code><ul><li>node_modules/express/package.json 下的  main 属性</li><li>如果package.json或者main不成立，则查找备选择项：index.js</li><li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li></ul></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果非路径形式的标识</span></span><br><span class="line"><span class="comment">// 路径形式的标识：</span></span><br><span class="line">    <span class="comment">// ./  当前目录 不可省略</span></span><br><span class="line">    <span class="comment">// ../  上一级目录  不可省略</span></span><br><span class="line">    <span class="comment">//  /xxx也就是D:/xxx</span></span><br><span class="line">    <span class="comment">// 带有绝对路径几乎不用（D:/a/foo.js）</span></span><br><span class="line"><span class="comment">// 首位表示的是当前文件模块所属磁盘根目录</span></span><br><span class="line"><span class="comment">// require('./a'); </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心模块</span></span><br><span class="line"><span class="comment">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'fs'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方模块</span></span><br><span class="line"><span class="comment">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用</span></span><br><span class="line"><span class="comment">// 第三方包的名字不可能和核心模块的名字是一样的</span></span><br><span class="line"><span class="comment">// 既不是核心模块，也不是路径形式的模块</span></span><br><span class="line"><span class="comment">//      先找到当前文所述目录的node_modules</span></span><br><span class="line"><span class="comment">//      然后找node_modules/art-template目录</span></span><br><span class="line"><span class="comment">//      node_modules/art-template/package.json</span></span><br><span class="line"><span class="comment">//      node_modules/art-template/package.json中的main属性</span></span><br><span class="line"><span class="comment">//      main属性记录了art-template的入口模块</span></span><br><span class="line"><span class="comment">//      然后加载使用这个第三方包</span></span><br><span class="line"><span class="comment">//      实际上最终加载的还是文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      如果package.json不存在或者mian指定的入口模块不存在</span></span><br><span class="line"><span class="comment">//      则node会自动找该目录下的index.js</span></span><br><span class="line"><span class="comment">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span></span><br><span class="line"><span class="comment">//      </span></span><br><span class="line">        <span class="comment">// 如果条件都不满足则会进入上一级目录进行查找</span></span><br><span class="line"><span class="comment">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br></pre></td></tr></table></figure><h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 咱们所使用的所有文件操作的API都是异步的</span></span><br><span class="line"><span class="comment">// 就像ajax请求一样</span></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="comment">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span></span><br><span class="line"><span class="comment">// ./index.txt    相对于当前目录</span></span><br><span class="line"><span class="comment">// /index.txt    相对于当前目录</span></span><br><span class="line"><span class="comment">// /index.txt   绝对路径,当前文件模块所处根目录</span></span><br><span class="line"><span class="comment">// d:express/index.txt   绝对路径</span></span><br><span class="line">fs.readFile(<span class="string">'./index.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>模块操作路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在模块加载中，相对路径中的./不能省略</span></span><br><span class="line"><span class="comment">// 这里省略了.也是磁盘根目录</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;require的加载规则&quot;&gt;&lt;a href=&quot;#require的加载规则&quot; class=&quot;headerlink&quot; title=&quot;require的加载规则&quot;&gt;&lt;/a&gt;require的加载规则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;核心模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块名&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Node中的模块系统</title>
    <link href="http://yoursite.com/2021/01/11/Node%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2021/01/11/Node%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-01-11T14:22:57.000Z</published>
    <updated>2021-01-13T07:26:58.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node中的模块系统"><a href="#Node中的模块系统" class="headerlink" title="Node中的模块系统"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p><ul><li><p>EcmaScript语言</p><ul><li><p>和浏览器一样，在Node中没有Bom和Dom</p><a id="more"></a></li></ul></li><li><p>核心模块</p><ul><li>文件操作的fs</li><li>http服务操作的http</li><li>url路径操作模块</li><li>path路径处理模块</li><li>os操作系统信息</li></ul></li><li><p>第三方模块</p><ul><li>art-template</li><li>必须通过npm来下载才可以使用</li></ul></li><li><p>自己写的模块</p><ul><li>自己创建的文件</li></ul></li></ul><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li><p>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</p></li><li><p>通信规则</p><p>加载 require</p><p>导出 exports</p></li></ul><h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p><ul><li><p>模块作用域</p></li><li><p>使用require方法来加载模块</p></li><li><p>使用exports接口对象来导出模板中的成员</p><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 自定义变量名 = require(<span class="string">'模块'</span>)</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul><li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p></li><li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p><p>导出多个成员（必须在对象中）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exports.a = <span class="number">123</span>;</span><br><span class="line">exports.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bbb'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">exports.c = &#123;</span><br><span class="line">    foo:<span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line">exports.d = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>导出单个成员（拿到的就是函数，字符串）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure>以下情况会覆盖：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">//后者会覆盖前者</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>也可以通过以下方法来导出多个成员：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    foo = <span class="string">'hello'</span>,</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre><h2 id="模块原理"><a href="#模块原理" class="headerlink" title="模块原理"></a>模块原理</h2><p>在Node中，每个模块内部都有一个自己的<code>module</code>对象</p><p>该<code>module</code> 对象中，有一个成员：<code>exports</code> 也是一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    exports: &#123;</span><br><span class="line">        foo: <span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exports</code> 是 <code>module.exports</code>的一个引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(exports === <span class="built_in">module</span>.exports);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">exports.foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="built_in">module</span>.exports.foo = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure><p><code>当给exports重新赋值后，exports！= module.exports.</code></p><p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">真正去使用的时候：</span><br><span class="line">导出单个成员：exports.xxx = xxx;</span><br><span class="line">导出多个成员：<span class="built_in">module</span>.exports 或者 modeule.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用服务</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 引用模板</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 公共路径</span></span><br><span class="line"><span class="keyword">var</span> wwwDir = <span class="string">'D:/app/www'</span>;</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.url;</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    fs.readFile(<span class="string">'./template-apche.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fs.readdir(wwwDir, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.end(<span class="string">'Can not find www Dir.'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用模板引擎解析替换data中的模板字符串</span></span><br><span class="line">            <span class="comment">// 去xmpTempleteList.html中编写模板语法</span></span><br><span class="line">            <span class="keyword">var</span> htmlStr = template.render(data.toString(), &#123; </span><br><span class="line">                title: <span class="string">'D:/app/www/ 的索引'</span>,</span><br><span class="line">                files:files </span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 发送响应数据</span></span><br><span class="line">            res.end(htmlStr);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running....'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Node中的模块系统&quot;&gt;&lt;a href=&quot;#Node中的模块系统&quot; class=&quot;headerlink&quot; title=&quot;Node中的模块系统&quot;&gt;&lt;/a&gt;Node中的模块系统&lt;/h1&gt;&lt;p&gt;使用Node编写应用程序主要就是在使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;EcmaScript语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;和浏览器一样，在Node中没有Bom和Dom&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS介绍</title>
    <link href="http://yoursite.com/2021/01/08/nodeJS%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2021/01/08/nodeJS%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-11T15:34:28.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li><p>企业岗位需求</p><ul><li><p>front-end</p></li><li><p>back-end</p><a id="more"></a></li><li><p>全栈开发工程师</p></li><li><p>具有服务端开发经验更改</p></li><li><p>基本的网站开发能力</p><ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li></ul></li></ul><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么?"></a>Node.js是什么?</h2><ul><li>Node.js是JavaScript 运行时环境</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li><strong>没有Bom，Dom</strong></li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven    事件驱动</li><li>non-blocking I/O mode   非阻塞I/O模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>如：npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么?"></a>Node能做什么?</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm (node)</li><li>git (c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>npm</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Node介绍&quot;&gt;&lt;a href=&quot;#Node介绍&quot; class=&quot;headerlink&quot; title=&quot;Node介绍&quot;&gt;&lt;/a&gt;Node介绍&lt;/h1&gt;&lt;h2 id=&quot;为什么要学习Node-js&quot;&gt;&lt;a href=&quot;#为什么要学习Node-js&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习Node.js&quot;&gt;&lt;/a&gt;为什么要学习Node.js&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;企业岗位需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;front-end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;back-end&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS起步</title>
    <link href="http://yoursite.com/2021/01/08/nodeJs%E8%B5%B7%E6%AD%A5/"/>
    <id>http://yoursite.com/2021/01/08/nodeJs%E8%B5%B7%E6%AD%A5/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-11T15:33:36.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><ul><li><p>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><a id="more"></a></li><li><p>安装：</p><ul><li><p>傻瓜式安装，一路<code>next</code></p></li><li><p>安装过再次安装会升级</p></li></ul></li><li><p>确认Node环境是否安装成功</p><ul><li>查看node的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li><p>配置环境变量</p></li></ul><h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ol><li>创建编写JavaScript脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node  文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浏览器中的JavaScript是没有文件操作能力的</span></span><br><span class="line"><span class="comment">//但是Node中的JavaScript具有文件操作能力</span></span><br><span class="line"><span class="comment">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class="line"><span class="comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span></span><br><span class="line"><span class="comment">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span></span><br><span class="line"><span class="comment">//例如 fs.readFile就是用来读取文件的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取文件</span></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件读取失败'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将数据写入文件</span></span><br><span class="line">fs.writeFile(<span class="string">'./data/a.txt'</span>,<span class="string">'我是文件写入的信息'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件写入失败'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.加载http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.服务器要做的事儿</span></span><br><span class="line"><span class="comment">// 提供服务：对数据服务</span></span><br><span class="line"><span class="comment">// 发请求</span></span><br><span class="line"><span class="comment">//接收请求</span></span><br><span class="line"><span class="comment">//处理请求</span></span><br><span class="line"><span class="comment">//反馈（发送响应）</span></span><br><span class="line"><span class="comment">//当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  request请求事件处理函数，需要接收俩个参数：</span></span><br><span class="line"><span class="comment">//request 请求对象</span></span><br><span class="line"><span class="comment">//请求对象可以获取客户端的一些请求消息，例如请求路径</span></span><br><span class="line"><span class="comment">//response 相应对象</span></span><br><span class="line"><span class="comment">//响应对象可以用来给客户端发送响应消息</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到客户的请求了'</span> + request.url)</span><br><span class="line">    <span class="comment">//response对象有一个write可以用来给客户端发送响应数据</span></span><br><span class="line">    <span class="comment">//write可以写多次，但是一定要使用 end 来结束响应，否则客户端会一直等待</span></span><br><span class="line">    <span class="comment">// response.write('hello')</span></span><br><span class="line">    <span class="comment">// response.write(' nodeJS')</span></span><br><span class="line">    <span class="comment">// response.end()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置响应头，告知浏览器使用的编码集和发送的数据是什么类型，否则可能会乱码</span></span><br><span class="line">    <span class="comment">//text/plain 普通文本</span></span><br><span class="line">    <span class="comment">//text/html </span></span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line">    <span class="comment">//上面方式比较麻烦，可以直接 end 同时发送数据</span></span><br><span class="line">    response.end(<span class="string">'hello nodeJS 中国'</span>)</span><br><span class="line">    <span class="comment">//response.end('&lt;p&gt; hello &lt;a href='#'&gt; &lt;p&gt;')</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开启服务的简写方式：</span></span><br><span class="line"><span class="comment">http</span></span><br><span class="line"><span class="comment">.createServer(function ( req, res) &#123;</span></span><br><span class="line"><span class="comment">res.end('hello')</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">.listen(3000, function () &#123;</span></span><br><span class="line"><span class="comment">console.log('running...')</span></span><br><span class="line"><span class="comment">&#125;) </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h1&gt;&lt;h2 id=&quot;安装Node环境&quot;&gt;&lt;a href=&quot;#安装Node环境&quot; class=&quot;headerlink&quot; title=&quot;安装Node环境&quot;&gt;&lt;/a&gt;安装Node环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载：&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 教程</title>
    <link href="http://yoursite.com/2021/01/06/MarkDown-Note/"/>
    <id>http://yoursite.com/2021/01/06/MarkDown-Note/</id>
    <published>2021-01-05T16:00:00.000Z</published>
    <updated>2021-01-11T02:45:51.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-教程"><a href="#Markdown-教程" class="headerlink" title="Markdown 教程"></a>Markdown 教程</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><ul><li><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p><a id="more"></a></li></ul><h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>Markdown 标题有两种格式。</p><h3 id="1、使用-和-标记一级和二级标题"><a href="#1、使用-和-标记一级和二级标题" class="headerlink" title="1、使用 = 和 - 标记一级和二级标题"></a>1、使用 = 和 - 标记一级和二级标题</h3><p>= 和 - 标记语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><p>显示效果如下图：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h3><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>显示效果如下图：</p><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><hr><hr><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。   </p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GOOGLE.COM</span><br><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><p>显示效果如下所示：<br>GOOGLE.COM<br><del>BAIDU.COM</del></p><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <strong><u></strong> 标签来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线的文本&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><u>带下划线的文本</u></p><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line"></span><br><span class="line">[^RUNOOB]: 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>创建脚注格式类似这样 <a href="学的不仅是技术，更是梦想！！！">^RUNOOB</a>。</p><hr><hr><hr><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<strong>***)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">- 第二项</span><br><span class="line">+ 第三项</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ul><li>第一项</li></ul><ul><li>第二项</li></ul><ul><li>第三项</li></ul><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><hr><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li></ol><hr><hr><hr><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; 学的不仅是技术更是梦想</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><blockquote><p>区块引用<br>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><hr><hr><hr><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;printf()&#96; 函数</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><code>printf()</code> 函数</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#39;hello world&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">显示结果如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#39;hello world&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [百度](https:&#x2F;&#x2F;www.Baidu.com)</span><br><span class="line">&lt;https:&#x2F;&#x2F;www.Baidu.com&gt;</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p>这是一个链接 <a href="https://www.Baidu.com" target="_blank" rel="noopener">百度</a></p><p><a href="https://www.Baidu.com" target="_blank" rel="noopener">https://www.Baidu.com</a></p><hr><hr><hr><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>使用实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![luffy picture](https:&#x2F;&#x2F;bkimg.cdn.bcebos.com&#x2F;pic&#x2F;a8014c086e061d95f662155f76f40ad162d9cab5?x-bce-process&#x3D;image&#x2F;watermark,image_d2F0ZXIvYmFpa2U5Mg&#x3D;&#x3D;,g_7,xp_5,yp_5)</span><br><span class="line"></span><br><span class="line">![luffy avatar](https:&#x2F;&#x2F;bkimg.cdn.bcebos.com&#x2F;pic&#x2F;e7cd7b899e510fb396c90661d033c895d0430c77?x-bce-process&#x3D;image&#x2F;watermark,image_d2F0ZXIvYmFpa2U4MA&#x3D;&#x3D;,g_7,xp_5,yp_5 &quot;luffy&quot;)</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://bkimg.cdn.bcebos.com/pic/a8014c086e061d95f662155f76f40ad162d9cab5?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5" alt="RUNOOB 图标"></p><p><img src="https://bkimg.cdn.bcebos.com/pic/e7cd7b899e510fb396c90661d033c895d0430c77?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5" alt="luffy avatar" title="luffy"></p><hr><hr><hr><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>以上代码显示结果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>对齐方式</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>以上代码显示结果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><hr><hr><hr><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 </p><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Markdown-教程&quot;&gt;&lt;a href=&quot;#Markdown-教程&quot; class=&quot;headerlink&quot; title=&quot;Markdown 教程&quot;&gt;&lt;/a&gt;Markdown 教程&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 &lt;strong&gt;.md&lt;/strong&gt;, &lt;strong&gt;.markdown&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note</title>
    <link href="http://yoursite.com/2020/09/27/Webpack-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/09/27/Webpack-%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-27T14:38:17.000Z</published>
    <updated>2021-01-08T05:15:06.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Webpack-简介"><a href="#一、Webpack-简介" class="headerlink" title="一、Webpack 简介"></a>一、Webpack 简介</h3><p>–1.1 webpack 是什么？<br>webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。<br>在webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。<br>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p><a id="more"></a><p>–1.2 webpack 五个核心概念<br>–1.2.1 Entry<br>入口(Entry)：指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。<br>–1.2.2 Output<br>输出(Output)：指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。<br>–1.2.3 Loader<br>选项    描述    特点<br>development    会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。    能让代码本地调试运行的环境<br>production    会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。    能让代码优化上线运行的环境<br> Loader：让 webpack 能够去处理那些非 JS 的文件，比如样式文件、图片文件(webpack 自身只理解<br>JS)<br>–1.2.4 Plugins<br>插件(Plugins)：可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。<br>–1.2.5 Mode<br>模式(Mode)：指示 webpack 使用相应模式的配置。</p><h3 id="二、Webpack-初体验"><a href="#二、Webpack-初体验" class="headerlink" title="二、Webpack 初体验"></a>二、Webpack 初体验</h3><p>2.1 初始化配置</p><ol><li>初始化 package.json：npm init</li><li>下载安装webpack：(webpack4以上的版本需要全局/本地都安装webpack-cli)<br>全局安装：cnpm i webpack webpack-cli -g<br>本地安装：cnpm i webpack webpack-cli -D</li><li>2 编译打包应用<br>创建 src 下的 js 等文件后，不需要配置 webpack.config.js 文件，在命令行就可以编译打包。<br>指令：<br>•    开发环境：webpack ./src/index.js -o ./build/built.js –mode=development<br>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是开发环境<br>•    生产环境：webpack ./src/index.js -o ./build/built.js –mode=production<br>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是生产环境<br>结论：</li><li>webpack 本身能处理 js/json 资源，不能处理 css/img 等其他资源</li><li>生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化，但是不能处理 ES6 的基本语法转化为 ES5（需要借助 loader）</li><li>生产环境比开发环境多一个压缩 js 代码</li></ol><h3 id="三、Webpack-开发环境的基本配置"><a href="#三、Webpack-开发环境的基本配置" class="headerlink" title="三、Webpack 开发环境的基本配置"></a>三、Webpack 开发环境的基本配置</h3><p>webpack.config.js 是 webpack 的配置文件。<br>作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）<br>所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。<br>开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：<br>•    打包样式资源<br>•    打包 html 资源<br>•    打包图片资源<br>•    打包其他资源<br>•    devServer<br>下面是一个简单的开发环境webpack.confg.js配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 引用plugin</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// webpack配置</span></span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>, <span class="comment">// 入口起点</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="comment">// 输出文件名</span></span><br><span class="line">        filename: <span class="string">'js/build.js'</span>,</span><br><span class="line">        <span class="comment">// __dirname是nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>), <span class="comment">// 输出路径，所有资源打包都会输出到这个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// loader配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// 详细的loader配置</span></span><br><span class="line">            <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配哪些文件</span></span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// use数组中loader执行顺序：从右到左，从下到上，依次执行(先执行css-loader)</span></span><br><span class="line">                    <span class="comment">// style-loader：创建style标签，将js中的样式资源插入进去，添加到head中生效</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="comment">// css-loader：将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                    <span class="comment">// less-loader：将less文件编译成css文件，需要下载less-loader和less</span></span><br><span class="line">                    <span class="string">'less-loader'</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// url-loader：处理图片资源，问题：默认处理不了html中的img图片</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                <span class="comment">// 需要下载 url-loader file-loader</span></span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 图片大小小于8kb，就会被base64处理，优点：减少请求数量（减轻服务器压力），缺点：图片体积会更大（文件请求速度更慢）</span></span><br><span class="line">                    <span class="comment">// base64在客户端本地解码所以会减少服务器压力，如果图片过大还采用base64编码会导致cpu调用率上升，网页加载时变卡</span></span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    <span class="comment">// 给图片重命名，[hash:10]：取图片的hash的前10位，[ext]：取文件原来扩展名</span></span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是conmonjs，解析时会出问题：[object Module]</span></span><br><span class="line">                    <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">                    esModule: <span class="literal">false</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 排除html|js|css|less|jpg|png|gif文件</span></span><br><span class="line">                exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">                <span class="comment">// file-loader：处理其他文件</span></span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugin的配置</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// html-webpack-plugin：默认会创建一个空的html文件，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">        <span class="comment">// 需要有结构的HTML文件可以加一个template</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 复制这个./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    mode: <span class="string">'development'</span>, <span class="comment">// 开发模式</span></span><br><span class="line">    <span class="comment">// 开发服务器 devServer：用来自动化，不用每次修改后都重新输入webpack打包一遍（自动编译，自动打开浏览器，自动刷新浏览器）</span></span><br><span class="line">    <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出（不会像之前那样在外面看到打包输出的build包，而是在内存中，关闭后会自动删除）</span></span><br><span class="line">    <span class="comment">// 启动devServer指令为：npx webpack-dev-server</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 项目构建后路径</span></span><br><span class="line">        contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        <span class="comment">// 启动gzip压缩</span></span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，大部分配置都在注释中给出解释。<br>•    运行项目的两个指令：<br>webpack 会将打包结果输出出去（build文件夹）<br>npx webpack-dev-server 只会在内存中编译打包，没有输出<br>•    loader 和 plugin 的不同：（plugin 一定要先引入才能使用）<br> loader：1. 下载 2. 使用（配置 loader）<br> plugins：1.下载 2. 引入 3. 使用</p><h3 id="四、Webpack-生产环境的基本配置"><a href="#四、Webpack-生产环境的基本配置" class="headerlink" title="四、Webpack 生产环境的基本配置"></a>四、Webpack 生产环境的基本配置</h3><p>而生产环境的配置需要考虑以下几个方面：<br>•    提取 css 成单独文件<br>•    css 兼容性处理<br>•    压缩 css<br>•    js 语法检查<br>•    js 兼容性处理<br>•    js 压缩<br>•    html 压缩<br>下面是一个基本的生产环境下的webpack.config.js配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractorPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> OptimiziCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimizi-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义node.js的环境变量，决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader的写法</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">    <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件然后通过link加载</span></span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="comment">// css-loader：将css文件整合到js文件中</span></span><br><span class="line">    <span class="comment">// 经过css-loader处理后，样式文件是在js文件中的</span></span><br><span class="line">    <span class="comment">// 问题：1.js文件体积会很大2.需要先加载js再动态创建style标签，样式渲染速度就慢，会出现闪屏现象</span></span><br><span class="line">    <span class="comment">// 解决：用MiniCssExtractPlugin.loader替代style-loader</span></span><br><span class="line">    <span class="string">'css-loader'</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      postcss-loader：css兼容性处理：postcss --&gt; 需要安装：postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment">      postcss需要通过package.json中browserslist里面的配置加载指定的css兼容性样式</span></span><br><span class="line"><span class="comment">      在package.json中定义browserslist：</span></span><br><span class="line"><span class="comment">      "browserslist": &#123;</span></span><br><span class="line"><span class="comment">        // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span></span><br><span class="line"><span class="comment">        "development": [ // 只需要可以运行即可</span></span><br><span class="line"><span class="comment">          "last 1 chrome version",</span></span><br><span class="line"><span class="comment">          "last 1 firefox version",</span></span><br><span class="line"><span class="comment">          "last 1 safari version"</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        // 生产环境。默认是生产环境</span></span><br><span class="line"><span class="comment">        "production": [ // 需要满足绝大多数浏览器的兼容</span></span><br><span class="line"><span class="comment">          "&gt;0.2%",</span></span><br><span class="line"><span class="comment">          "not dead",</span></span><br><span class="line"><span class="comment">          "not op_mini all"</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            ident: <span class="string">'postcss'</span>, <span class="comment">// 基本写法</span></span><br><span class="line">            plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                <span class="comment">// postcss的插件</span></span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)(),</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [...commonCssLoader],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [...commonCssLoader, <span class="string">'less-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              正常来讲，一个文件只能被一个loader处理</span></span><br><span class="line"><span class="comment">              当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序</span></span><br><span class="line"><span class="comment">              先执行eslint再执行babel（用enforce）</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  js的语法检查： 需要下载 eslint-loader eslint</span></span><br><span class="line"><span class="comment">                  注意：只检查自己写的源代码，第三方的库是不用检查的</span></span><br><span class="line"><span class="comment">                  airbnb(一个流行的js风格) --&gt; 需要下载 eslint-config-airbnb-base eslint-plugin-import</span></span><br><span class="line"><span class="comment">                  设置检查规则：</span></span><br><span class="line"><span class="comment">                    package.json中eslintConfig中设置</span></span><br><span class="line"><span class="comment">                      "eslintConfig": &#123;</span></span><br><span class="line"><span class="comment">                        "extends": "airbnb-base"， // 继承airbnb的风格规范</span></span><br><span class="line"><span class="comment">                        "env": &#123;</span></span><br><span class="line"><span class="comment">                          "browser": true // 可以使用浏览器中的全局变量(使用window不会报错)</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                      &#125;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, <span class="comment">// 忽略node_modules</span></span><br><span class="line">                enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">                loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 自动修复</span></span><br><span class="line">                    fix: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              js兼容性处理：需要下载 babel-loader @babel/core</span></span><br><span class="line"><span class="comment">                1. 基本js兼容性处理 --&gt; @babel/preset-env</span></span><br><span class="line"><span class="comment">                  问题：只能转换基本语法，如promise高级语法不能转换</span></span><br><span class="line"><span class="comment">                2. 全部js兼容性处理 --&gt; @babel/polyfill</span></span><br><span class="line"><span class="comment">                  问题：只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">                3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 第三种方式：按需加载</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 预设：指示babel做怎样的兼容性处理</span></span><br><span class="line">                    presets: [</span><br><span class="line">                        <span class="string">'@babel/preset-env'</span>, <span class="comment">// 基本预设</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            useBuiltIns: <span class="string">'usage'</span>, <span class="comment">//按需加载</span></span><br><span class="line">                            corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;, <span class="comment">// 指定core-js版本</span></span><br><span class="line">                            targets: &#123; <span class="comment">// 指定兼容到什么版本的浏览器</span></span><br><span class="line">                                chrome: <span class="string">'60'</span>,</span><br><span class="line">                                firefox: <span class="string">'50'</span>,</span><br><span class="line">                                ie: <span class="string">'9'</span>,</span><br><span class="line">                                safari: <span class="string">'10'</span>,</span><br><span class="line">                                edge: <span class="string">'17'</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 图片处理</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                    esModule: <span class="literal">false</span>, <span class="comment">// 关闭url-loader默认使用的es6模块化解析</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// html中的图片处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理其他文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">            filename: <span class="string">'css/built.css'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 压缩css</span></span><br><span class="line">        <span class="keyword">new</span> OptimiziCssAssetsWebpackPlugin(),</span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin：html文件的打包和压缩处理</span></span><br><span class="line">        <span class="comment">// 通过这个插件会自动将单独打包的样式文件通过link标签引入</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            <span class="comment">// 压缩html代码</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                <span class="comment">// 移除空格</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 移除注释</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h3 id="五、Webpack-优化配置"><a href="#五、Webpack-优化配置" class="headerlink" title="五、Webpack 优化配置"></a>五、Webpack 优化配置</h3><p>5.1 开发环境性能优化<br>5.1.1 HMR（模块热替换）<br>HMR: hot module replacement 热模块替换 / 模块热替换<br>作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度<br>代码：只需要在 devServer 中设置 hot 为 true，就会自动开启HMR功能（只能在开发模式下使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">  open: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  <span class="comment">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span></span><br><span class="line">  hot: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种文件实现热模块替换的情况：<br>•    样式文件：可以使用HMR功能，因为开发环境下使用的 style-loader 内部默认实现了热模块替换功能<br>•    js 文件：默认不能使用HMR功能（修改一个 js 模块所有 js 模块都会刷新）<br>–&gt; 实现 HMR 需要修改 js 代码（添加支持 HMR 功能的代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 方法会监听 print.js 文件的变化，一旦发生变化，只有这个模块会重新打包构建，其他模块不会。</span></span><br><span class="line">    <span class="comment">// 会执行后面的回调函数</span></span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。<br>•    html 文件: 默认不能使用 HMR 功能（html 不用做 HMR 功能，因为只有一个 html 文件，不需要再优化）<br>使用 HMR 会导致问题：html 文件不能热更新了（不会自动打包构建）<br>解决：修改 entry 入口，将 html 文件引入（这样 html 修改整体刷新）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>]</span><br></pre></td></tr></table></figure><p>5.1.2 source-map<br>source-map：一种提供源代码到构建后代码的映射的技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）<br>参数：[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map<br>在webpack.config.js中加入代码：<br>devtool: ‘eval-source-map’<br>可选方案：[生成source-map的位置|给出的错误代码信息]<br>•    source-map：外部，错误代码准确信息 和 源代码的错误位置<br>•    inline-source-map：内联，只生成一个内联 source-map，错误代码准确信息 和 源代码的错误位置<br>•    hidden-source-map：外部，错误代码错误原因，但是没有错误位置（为了隐藏源代码），不能追踪源代码错误，只能提示到构建后代码的错误位置<br>•    eval-source-map：内联，每一个文件都生成对应的 source-map，都在 eval 中，错误代码准确信息 和 源代码的错误位<br>•    nosources-source-map：外部，错误代码准确信息，但是没有任何源代码信息（为了隐藏源代码）<br>•    cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置，只能把错误精确到整行，忽略列<br>•    cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module 会加入 loader 的 source-map<br>内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快<br>开发/生产环境可做的选择：<br>开发环境：需要考虑速度快，调试更友好<br>•    速度快( eval &gt; inline &gt; cheap &gt;… )<br>i.    eval-cheap-souce-map<br>ii.    eval-source-map<br>•    调试更友好<br>i.    souce-map<br>ii.    cheap-module-souce-map<br>iii.    cheap-souce-map<br>最终得出最好的两种方案 –&gt; eval-source-map（完整度高，内联速度快） / eval-cheap-module-souce-map（错误提示忽略列但是包含其他信息，内联速度快）<br>生产环境：需要考虑源代码要不要隐藏，调试要不要更友好<br>•    内联会让代码体积变大，所以在生产环境不用内联<br>•    隐藏源代码<br>i.    nosources-source-map 全部隐藏<br>ii.    hidden-source-map 只隐藏源代码，会提示构建后代码错误信息<br>最终得出最好的两种方案 –&gt; source-map（最完整） / cheap-module-souce-map（错误提示一整行忽略列）</p><p>5.2 生产环境性能优化<br>5.2.1 优化打包构建速度<br>5.2.1.1 oneOf<br>oneOf：匹配到 loader 后就不再向后进行匹配，优化生产环境的打包构建速度<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// js 语法检查</span></span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// 优先执行</span></span><br><span class="line">      enforce: <span class="string">'pre'</span>,</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        fix: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// oneOf 优化生产环境的打包构建速度</span></span><br><span class="line">      <span class="comment">// 以下loader只会匹配一个（匹配到了后就不会再往下匹配了）</span></span><br><span class="line">      <span class="comment">// 注意：不能有两个配置处理同一种类型文件（所以把eslint-loader提取出去放外面）</span></span><br><span class="line">      oneOf: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: [...commonCssLoader]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// js 兼容性处理</span></span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [</span><br><span class="line">              [</span><br><span class="line">                <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                  corejs: &#123;<span class="attr">version</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                  targets: &#123;</span><br><span class="line">                    chrome: <span class="string">'60'</span>,</span><br><span class="line">                    firefox: <span class="string">'50'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">            name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">            outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">            esModule: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">          loader: <span class="string">'html-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            outputPath: <span class="string">'media'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.2 babel 缓存<br>babel 缓存：类似 HMR，将 babel 处理后的资源缓存起来（哪里的 js 改变就更新哪里，其他 js 还是用之前缓存的资源），让第二次打包构建速度更快。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">          corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">'60'</span>,</span><br><span class="line">            firefox: <span class="string">'50'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开启babel缓存</span></span><br><span class="line">    <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>文件资源缓存<br>文件名不变，就不会重新请求，而是再次用之前缓存的资源<br>1.hash: 每次 wepack 打包时会生成一个唯一的 hash 值。<br> 问题：重新打包，所有文件的 hsah 值都改变，会导致所有缓存失效。（可能只改动了一个文件）<br>2.chunkhash：根据 chunk 生成的 hash 值。来源于同一个 chunk的 hash 值一样<br> 问题：js 和 css 来自同一个chunk，hash 值是一样的（因为 css-loader 会将 css 文件加载到 js 中，所以同属于一个chunk）<br>3.contenthash: 根据文件的内容生成 hash 值。不同文件 hash 值一定不一样(文件内容修改，文件名里的 hash 才会改变)<br>修改 css 文件内容，打包后的 css 文件名 hash 值就改变，而 js 文件没有改变 hash 值就不变，这样 css 和 js 缓存就会分开判断要不要重新请求资源 –&gt; 让代码上线运行缓存更好使用<br>5.2.1.3 多进程打包<br>多进程打包：某个任务消耗时间较长会卡顿，多进程可以同一时间干多件事，效率更高。<br>优点是提升打包速度，缺点是每个进程的开启和交流都会有开销（babel-loader消耗时间最久，所以使用thread-loader针对其进行优化）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">      thread-loader会对其后面的loader（这里是babel-loader）开启多进程打包。 </span></span><br><span class="line"><span class="comment">      进程启动大概为600ms，进程通信也有开销。(启动的开销比较昂贵，不要滥用)</span></span><br><span class="line"><span class="comment">      只有工作消耗时间比较长，才需要多进程打包</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'thread-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        workers: <span class="number">2</span> <span class="comment">// 进程2个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        presets: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">              corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">              targets: &#123;</span><br><span class="line">                chrome: <span class="string">'60'</span>,</span><br><span class="line">                firefox: <span class="string">'50'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 开启babel缓存</span></span><br><span class="line">        <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">        cacheDirectory: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.4 externals<br>externals：让某些库不打包，通过 cdn 引入<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="comment">// 拒绝jQuery被打包进来(通过cdn引入，速度会快一些)</span></span><br><span class="line">  <span class="comment">// 忽略的库名 -- npm包名</span></span><br><span class="line">  jquery: <span class="string">'jQuery'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在 index.html 中通过 cdn 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.2.1.5 dll<br>dll：让某些库单独打包，后直接引入到 build 中。可以在 code split 分割出 node_modules 后再用 dll 更细的分割，优化代码运行的性能。<br>webpack.dll.js 配置如下：(将 jquery 单独打包)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  node_modules的库会打包到一起，但是很多库的时候打包输出的js文件就太大了</span></span><br><span class="line"><span class="comment">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span></span><br><span class="line"><span class="comment">  当运行webpack时，默认查找webpack.config.js配置文件</span></span><br><span class="line"><span class="comment">  需求：需要运行webpack.dll.js文件</span></span><br><span class="line"><span class="comment">    --&gt; webpack --config webpack.dll.js（配置后先运行这个指令表示以这个配置文件打包）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name] --&gt; jquery</span></span><br><span class="line">    <span class="comment">// ['jquery] --&gt; 要打包的库是jquery</span></span><br><span class="line">    jquery: [<span class="string">'jquery'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出出口指定</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// name就是jquery</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'dll'</span>), <span class="comment">// 打包到dll目录下</span></span><br><span class="line">    library: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个manifest.json --&gt; 提供jquery的映射关系（告诉webpack：jquery之后不需要再打包和暴露内容的名称）</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">'dll/manifest.json'</span>) <span class="comment">// 输出文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br><span class="line">webpack.config.js 配置：(告诉 webpack 不需要再打包 jquery，并将之前打包好的 jquery 跟其他打包好的资源一同输出到 build 目录下)</span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中配置：</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'./src/index.html'</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: resolve(__dirname, <span class="string">'dll/manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 将某个文件打包输出到build目录下，并在html中自动引入该资源</span></span><br><span class="line">  <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">    filepath: resolve(__dirname, <span class="string">'dll/jquery.js'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>5.2.2 优化代码运行的性能<br>5.2.2.1 缓存<br>5.2.2.2 tree shaking（树摇）<br>tree shaking：去除无用代码<br>前提：1. 必须使用 ES6 模块化 2. 开启 production 环境 （这样就自动会把无用代码去掉）<br>作用：减少代码体积<br>在 package.json 中配置：<br>“sideEffects”: false 表示所有代码都没有副作用（都可以进行 tree shaking）<br>这样会导致的问题：可能会把 css / @babel/polyfill 文件干掉（副作用）<br>所以可以配置：”sideEffects”: [“<em>.css”, “</em>.less”] 不会对css/less文件tree shaking处理<br>5.2.2.3 code split（代码分割）<br>代码分割。将打包输出的一个大的 bundle.js 文件拆分成多个小文件，这样可以并行加载多个文件，比加载一个文件更快。<br>1.多入口拆分（几个入口就拆分几个文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    <span class="comment">// 多入口：有一个入口，最终输出就有一个bundle</span></span><br><span class="line">    index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    test: <span class="string">'./src/js/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// [name]：取文件名</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">2.</span>optimization：（多入口，单入口都可搭配使用）</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>•    将 node_modules 中的代码单独打包（大小超过30kb）（如果有多个node_modules的库会打包到一起，可以用dll再细分）<br>•    自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk(比如两个模块中都引入了jquery会被打包成单独的文件)（大小超过30kb）<br>3.import 动态导入语法：<br>/*<br>  通过js代码，让某个文件被单独打包成一个chunk<br>  import动态导入语法：能将某个文件单独打包(test文件不会和index打包在同一个文件而是单独打包)<br>  webpackChunkName:指定test单独打包后文件的名字<br>在index.js中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test' */</span><span class="string">'./test'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; mul, count &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 文件加载成功~</span></span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件加载失败~'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>5.2.2.4 lazy loading（懒加载/预加载）<br>1.懒加载：当文件需要使用时才加载（需要代码分割）。但是如果资源较大，加载时间就会较长，有延迟。<br>2.正常加载：可以认为是并行加载（同一时间加载多个文件）没有先后顺序，先加载了不需要的资源就会浪费时间。<br>3.预加载 prefetch（兼容性很差）：会在使用之前，提前加载。等其他资源加载完毕，浏览器空闲了，再偷偷加载这个资源。这样在使用时已经加载好了，速度很快。所以在懒加载的基础上加上预加载会更好。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将import的内容放在异步回调函数中使用，点击按钮，test.js才会被加载(不会重复加载)</span></span><br><span class="line">  <span class="comment">// webpackPrefetch: true表示开启预加载</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test', webpackPrefetch: true */</span><span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.2.2.5 pwa（离线可访问技术）<br>pwa：离线可访问技术（渐进式网络开发应用程序），使用 serviceworker 和 workbox 技术。优点是离线也能访问，缺点是兼容性差。<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>); <span class="comment">// 引入插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中加入：</span></span><br><span class="line"><span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">    2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    生成一个 serviceworker 配置文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  clientsClaim: <span class="literal">true</span>,</span><br><span class="line">  skipWaiting: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">index.js 中还需要写一段代码来激活它的使用：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. eslint不认识 window、navigator全局变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    解决：需要修改package.json中eslintConfig配置</span></span><br><span class="line"><span class="comment">    "env": &#123;</span></span><br><span class="line"><span class="comment">      "browser": true // 支持浏览器端全局变量</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2. sw代码必须运行在服务器上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt; nodejs</span></span><br><span class="line"><span class="comment">    或--&gt;</span></span><br><span class="line"><span class="comment">      npm i serve -g</span></span><br><span class="line"><span class="comment">      serve -s build 启动服务器，将打包输出的build目录下所有资源作为静态资源暴露出去</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123; <span class="comment">// 处理兼容性问题</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/service-worker.js'</span>) <span class="comment">// 注册serviceWorker</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册成功了~'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册失败了~'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、Webpack-配置详情"><a href="#六、Webpack-配置详情" class="headerlink" title="六、Webpack 配置详情"></a>六、Webpack 配置详情</h3><p>6.1 entry<br>entry: 入口起点</p><ol><li><p>string –&gt; ‘./src/index.js’，单入口<br>打包形成一个 chunk。 输出一个 bundle 文件。此时 chunk 的名称默认是 main</p></li><li><p>array –&gt; [‘./src/index.js’, ‘./src/add.js’]，多入口<br>所有入口文件最终只会形成一个 chunk，输出出去只有一个 bundle 文件。<br>（一般只用在 HMR 功能中让 html 热更新生效）</p></li><li><p>object，多入口<br>有几个入口文件就形成几个 chunk，输出几个 bundle 文件，此时 chunk 的名称是 key 值</p></li></ol><p>–&gt; 特殊用法：</p><ol start="4"><li><p>entry</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"><span class="comment">// 最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line">index: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/count.js'</span>], </span><br><span class="line"><span class="comment">// 形成一个chunk，输出一个bundle文件。</span></span><br><span class="line">add: <span class="string">'./src/add.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   6.2 output</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">     filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">        <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">     path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">       <span class="comment">// 所有资源引入公共路径前缀 --&gt; 'imgs/a.jpg' --&gt; '/imgs/a.jpg'</span></span><br><span class="line">     publicPath: <span class="string">'/'</span>,</span><br><span class="line">     chunkFilename: <span class="string">'js/[name]_chunk.js'</span>, <span class="comment">// 指定非入口chunk的名称</span></span><br><span class="line">     library: <span class="string">'[name]'</span>, <span class="comment">// 打包整个库后向外暴露的变量名</span></span><br><span class="line">     libraryTarget: <span class="string">'window'</span> <span class="comment">// 变量名添加到哪个上 browser：window</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'global' // node：global</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'commonjs' // conmmonjs模块 exports</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.3 module</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        <span class="comment">// loader的配置</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// 多个loader用use</span></span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            <span class="comment">// 只检查src下的js文件</span></span><br><span class="line">            include: resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">            enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">            <span class="comment">// enforce: 'post', // 延后执行</span></span><br><span class="line">            <span class="comment">// 单个loader用loader</span></span><br><span class="line">            loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">            options: &#123;&#125; <span class="comment">// 指定配置选项</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">            oneOf: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.4 resolve</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析模块的规则</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">// 配置解析模块路径别名: 优点：当目录层级很复杂时，简写路径；缺点：路径不会提示</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">        $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名（引入时就可以不写文件后缀名了）</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">        <span class="comment">// 告诉 webpack 解析模块应该去找哪个目录</span></span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这样配置后，引入文件就可以这样简写：import ‘$css/index’;<br>   6.5 dev server</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="comment">// 运行代码所在的目录</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 监视contentBase目录下的所有文件，一旦文件变化就会reload</span></span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 忽略文件</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">5000</span>,</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启HMR功能</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    <span class="comment">// 除了一些基本信息外，其他内容都不要显示</span></span><br><span class="line">    quiet: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果出错了，不要全屏提示</span></span><br><span class="line">    overlay: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 服务器代理，--&gt; 解决开发环境跨域问题</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">    <span class="comment">// 一旦devServer(5000)服务器接收到/api/xxx的请求，就会把请求转发到另外一个服务器3000</span></span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">      <span class="comment">// 发送请求时，请求路径重写：将/api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>   其中，跨域问题：同源策略中不同的协议、端口号、域名就会产生跨域。<br>   正常的浏览器和服务器之间有跨域，但是服务器之间没有跨域。代码通过代理服务器运行，所以浏览器和代理服务器之间没有跨域，浏览器把请求发送到代理服务器上，代理服务器替你转发到另外一个服务器上，服务器之间没有跨域，所以请求成功。代理服务器再把接收到的响应响应给浏览器。这样就解决开发环境下的跨域问题。<br>   6.6 optimization<br>   contenthash 缓存会导致一个问题：修改 a 文件导致 b 文件 contenthash 变化。<br>   因为在 index.js 中引入 a.js，打包后 index.js 中记录了 a.js 的 hash 值，而 a.js 改变，其重新打包后的 hash 改变，导致 index.js 文件内容中记录的 a.js 的 hash 也改变，从而重新打包后 index.js 的 hash 值也会变，这样就会使缓存失效。（改变的是a.js文件但是 index.js 文件的 hash 值也改变了）<br>   解决办法：runtimeChunk –&gt; 将当前模块记录其他模块的 hash 单独打包为一个文件 runtime，这样 a.js 的 hash 改变只会影响 runtime 文件，不会影响到 index.js 文件</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">            chunkFilename: <span class="string">'js/[name].[contenthash:10]_chunk.js'</span> <span class="comment">// 指定非入口文件的其他chunk的名字加_chunk</span></span><br><span class="line">&#125;,</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">/* 以下都是splitChunks默认配置，可以不写</span></span><br><span class="line"><span class="comment">    miniSize: 30 * 1024, // 分割的chunk最小为30kb（大于30kb的才分割）</span></span><br><span class="line"><span class="comment">    maxSize: 0, // 最大没有限制</span></span><br><span class="line"><span class="comment">    minChunks: 1, // 要提取的chunk最少被引用1次</span></span><br><span class="line"><span class="comment">    maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量为5</span></span><br><span class="line"><span class="comment">    maxInitialRequests: 3, // 入口js文件最大并行请求数量</span></span><br><span class="line"><span class="comment">    automaticNameDelimiter: '~', // 名称连接符</span></span><br><span class="line"><span class="comment">    name: true, // 可以使用命名规则</span></span><br><span class="line"><span class="comment">    cacheGroups: &#123; // 分割chunk的组</span></span><br><span class="line"><span class="comment">      vendors: &#123;</span></span><br><span class="line"><span class="comment">        // node_modules中的文件会被打包到vendors组的chunk中，--&gt; vendors~xxx.js</span></span><br><span class="line"><span class="comment">        // 满足上面的公共规则，大小超过30kb、至少被引用一次</span></span><br><span class="line"><span class="comment">        test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -10</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      default: &#123;</span></span><br><span class="line"><span class="comment">        // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">        minChunks: 2,</span></span><br><span class="line"><span class="comment">        prority: -20,</span></span><br><span class="line"><span class="comment">        // 如果当前要打包的模块和之前已经被提取的模块是同一个，就会复用，而不是重新打包</span></span><br><span class="line"><span class="comment">        reuseExistingChunk: true</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将index.js记录的a.js的hash值单独打包到runtime文件中</span></span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [</span><br><span class="line">        <span class="comment">// 配置生产环境的压缩方案：js/css</span></span><br><span class="line">        <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 开启缓存</span></span><br><span class="line">            cache: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 开启多进程打包</span></span><br><span class="line">            parallel: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 启用sourceMap(否则会被压缩掉)</span></span><br><span class="line">            sourceMap: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、Webpack5-介绍和使用"><a href="#七、Webpack5-介绍和使用" class="headerlink" title="七、Webpack5 介绍和使用"></a>七、Webpack5 介绍和使用</h3><p>   此版本重点关注以下内容:<br>   •    通过持久缓存提高构建性能.<br>   •    使用更好的算法和默认值来改善长期缓存.<br>   •    通过更好的树摇和代码生成来改善捆绑包大小.<br>   •    清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.<br>   •    通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</p><p>   下载<br>   npm i webpack@next webpack-cli -D<br>   自动删除 Node.js Polyfills<br>   早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。<br>   尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。<br>   webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。<br>   迁移：<br>   •    尽可能尝试使用与前端兼容的模块。<br>   •    可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。<br>   Chunk 和模块 ID<br>   添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。<br>   chunkIds: “deterministic”, moduleIds: “deterministic”<br>   Chunk ID<br>   你可以不用使用 import(/* webpackChunkName: “name” */ “module”) 在开发环境来为 chunk 命名，生产环境还是有必要的<br>   webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了<br>   Tree Shaking</p><ol start="5"><li><p>webpack 现在能够处理对嵌套模块的 tree shaking</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">'./inner'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure></li></ol><p>   在生产环境中, inner 模块暴露的 b 会被删除</p><ol start="2"><li><p>webpack 现在能够多个模块之前的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'./something'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   当设置了”sideEffects”: false时，一旦发现test方法没有使用，不但删除test，还会删除”./something”</p><ol start="3"><li><p>webpack 现在能处理对 Commonjs 的 tree shaking<br>Output<br>webpack 4 默认只能输出 ES5 代码<br>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.<br>如：output.ecmaVersion: 2015<br>SplitChunk</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br><span class="line"><span class="comment">// webpack5</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">    javascript: <span class="number">30000</span>,</span><br><span class="line">    style: <span class="number">50000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    Caching</span><br><span class="line">    <span class="comment">// 配置缓存</span></span><br><span class="line">    cache: &#123;</span><br><span class="line">    <span class="comment">// 磁盘存储</span></span><br><span class="line">    type: <span class="string">"filesystem"</span>,</span><br><span class="line">    buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存将存储到 node_modules/.cache/webpack<br>监视输出文件<br>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。<br>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。<br>默认值<br>•    entry: “./src/index.js<br>•    output.path: path.resolve(__dirname, “dist”)<br>•    output.filename: “[name].js”</p></li></ol><h3 id="npm-install-S-D-g-有什么区别"><a href="#npm-install-S-D-g-有什么区别" class="headerlink" title="npm install -S -D -g 有什么区别"></a>npm install -S -D -g 有什么区别</h3><p>npm install module_name -S    即    npm install module_name –save    写入dependencies</p><p>npm install module_name -D    即    npm install module_name –save-dev 写入devDependencies</p><p>npm install module_name -g 全局安装(命令行使用)</p><p>npm install module_name 本地安装(将安装包放在 ./node_modules 下)</p><h3 id="dependencies与devDependencies有什么区别呢？"><a href="#dependencies与devDependencies有什么区别呢？" class="headerlink" title="dependencies与devDependencies有什么区别呢？"></a>dependencies与devDependencies有什么区别呢？</h3><ul><li><p>devDependencies 里面的插件只用于开发环境，不用于生产环境</p></li><li><p>dependencies 是需要发布到生产环境的</p></li></ul><p>举个例子：</p><ul><li><p>开发一个前端项目，在项目中你需要使用gulp构建你的开发和本地运行环境,这时你就要放到dependencies里。gulp是你用来压缩代码，打包等需要的工具，程序实际运行的时候并不需要，所以放到dev里就ok了。</p></li><li><p>写程序要用element-ui,生产环境运行项目时肯定要用到element-ui,这时element-ui就应该安装到dependencies中去。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、Webpack-简介&quot;&gt;&lt;a href=&quot;#一、Webpack-简介&quot; class=&quot;headerlink&quot; title=&quot;一、Webpack 简介&quot;&gt;&lt;/a&gt;一、Webpack 简介&lt;/h3&gt;&lt;p&gt;–1.1 webpack 是什么？&lt;br&gt;webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。&lt;br&gt;在webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。&lt;br&gt;它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-配置详情</title>
    <link href="http://yoursite.com/2020/09/22/Webpack_Note-%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/22/Webpack_Note-%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2021-01-08T04:22:09.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-配置详情"><a href="#Webpack-配置详情" class="headerlink" title="Webpack 配置详情"></a>Webpack 配置详情</h3><p>6.1 entry<br>entry: 入口起点</p><ol><li><p>string –&gt; ‘./src/index.js’，单入口<br>打包形成一个 chunk。 输出一个 bundle 文件。此时 chunk 的名称默认是 main</p><a id="more"></a></li><li><p>array –&gt; [‘./src/index.js’, ‘./src/add.js’]，多入口<br>所有入口文件最终只会形成一个 chunk，输出出去只有一个 bundle 文件。<br>（一般只用在 HMR 功能中让 html 热更新生效）</p></li><li><p>object，多入口<br>有几个入口文件就形成几个 chunk，输出几个 bundle 文件，此时 chunk 的名称是 key 值<br>–&gt; 特殊用法：</p></li><li><p>entry</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"><span class="comment">// 最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line">index: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/count.js'</span>], </span><br><span class="line"><span class="comment">// 形成一个chunk，输出一个bundle文件。</span></span><br><span class="line">add: <span class="string">'./src/add.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   6.2 output</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">     filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">        <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">     path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">       <span class="comment">// 所有资源引入公共路径前缀 --&gt; 'imgs/a.jpg' --&gt; '/imgs/a.jpg'</span></span><br><span class="line">     publicPath: <span class="string">'/'</span>,</span><br><span class="line">     chunkFilename: <span class="string">'js/[name]_chunk.js'</span>, <span class="comment">// 指定非入口chunk的名称</span></span><br><span class="line">     library: <span class="string">'[name]'</span>, <span class="comment">// 打包整个库后向外暴露的变量名</span></span><br><span class="line">     libraryTarget: <span class="string">'window'</span> <span class="comment">// 变量名添加到哪个上 browser：window</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'global' // node：global</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'commonjs' // conmmonjs模块 exports</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.3 module</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        <span class="comment">// loader的配置</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// 多个loader用use</span></span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            <span class="comment">// 只检查src下的js文件</span></span><br><span class="line">            include: resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">            enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">            <span class="comment">// enforce: 'post', // 延后执行</span></span><br><span class="line">            <span class="comment">// 单个loader用loader</span></span><br><span class="line">            loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">            options: &#123;&#125; <span class="comment">// 指定配置选项</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">            oneOf: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.4 resolve</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析模块的规则</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">// 配置解析模块路径别名: 优点：当目录层级很复杂时，简写路径；缺点：路径不会提示</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">        $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名（引入时就可以不写文件后缀名了）</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">        <span class="comment">// 告诉 webpack 解析模块应该去找哪个目录</span></span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这样配置后，引入文件就可以这样简写：import ‘$css/index’;<br>   6.5 dev server</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="comment">// 运行代码所在的目录</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 监视contentBase目录下的所有文件，一旦文件变化就会reload</span></span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 忽略文件</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">5000</span>,</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启HMR功能</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    <span class="comment">// 除了一些基本信息外，其他内容都不要显示</span></span><br><span class="line">    quiet: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果出错了，不要全屏提示</span></span><br><span class="line">    overlay: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 服务器代理，--&gt; 解决开发环境跨域问题</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">    <span class="comment">// 一旦devServer(5000)服务器接收到/api/xxx的请求，就会把请求转发到另外一个服务器3000</span></span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">      <span class="comment">// 发送请求时，请求路径重写：将/api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>   其中，跨域问题：同源策略中不同的协议、端口号、域名就会产生跨域。<br>   正常的浏览器和服务器之间有跨域，但是服务器之间没有跨域。代码通过代理服务器运行，所以浏览器和代理服务器之间没有跨域，浏览器把请求发送到代理服务器上，代理服务器替你转发到另外一个服务器上，服务器之间没有跨域，所以请求成功。代理服务器再把接收到的响应响应给浏览器。这样就解决开发环境下的跨域问题。<br>   6.6 optimization<br>   contenthash 缓存会导致一个问题：修改 a 文件导致 b 文件 contenthash 变化。<br>   因为在 index.js 中引入 a.js，打包后 index.js 中记录了 a.js 的 hash 值，而 a.js 改变，其重新打包后的 hash 改变，导致 index.js 文件内容中记录的 a.js 的 hash 也改变，从而重新打包后 index.js 的 hash 值也会变，这样就会使缓存失效。（改变的是a.js文件但是 index.js 文件的 hash 值也改变了）<br>   解决办法：runtimeChunk –&gt; 将当前模块记录其他模块的 hash 单独打包为一个文件 runtime，这样 a.js 的 hash 改变只会影响 runtime 文件，不会影响到 index.js 文件</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">            chunkFilename: <span class="string">'js/[name].[contenthash:10]_chunk.js'</span> <span class="comment">// 指定非入口文件的其他chunk的名字加_chunk</span></span><br><span class="line">&#125;,</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">/* 以下都是splitChunks默认配置，可以不写</span></span><br><span class="line"><span class="comment">    miniSize: 30 * 1024, // 分割的chunk最小为30kb（大于30kb的才分割）</span></span><br><span class="line"><span class="comment">    maxSize: 0, // 最大没有限制</span></span><br><span class="line"><span class="comment">    minChunks: 1, // 要提取的chunk最少被引用1次</span></span><br><span class="line"><span class="comment">    maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量为5</span></span><br><span class="line"><span class="comment">    maxInitialRequests: 3, // 入口js文件最大并行请求数量</span></span><br><span class="line"><span class="comment">    automaticNameDelimiter: '~', // 名称连接符</span></span><br><span class="line"><span class="comment">    name: true, // 可以使用命名规则</span></span><br><span class="line"><span class="comment">    cacheGroups: &#123; // 分割chunk的组</span></span><br><span class="line"><span class="comment">      vendors: &#123;</span></span><br><span class="line"><span class="comment">        // node_modules中的文件会被打包到vendors组的chunk中，--&gt; vendors~xxx.js</span></span><br><span class="line"><span class="comment">        // 满足上面的公共规则，大小超过30kb、至少被引用一次</span></span><br><span class="line"><span class="comment">        test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -10</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      default: &#123;</span></span><br><span class="line"><span class="comment">        // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">        minChunks: 2,</span></span><br><span class="line"><span class="comment">        prority: -20,</span></span><br><span class="line"><span class="comment">        // 如果当前要打包的模块和之前已经被提取的模块是同一个，就会复用，而不是重新打包</span></span><br><span class="line"><span class="comment">        reuseExistingChunk: true</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将index.js记录的a.js的hash值单独打包到runtime文件中</span></span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [</span><br><span class="line">        <span class="comment">// 配置生产环境的压缩方案：js/css</span></span><br><span class="line">        <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 开启缓存</span></span><br><span class="line">            cache: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 开启多进程打包</span></span><br><span class="line">            parallel: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 启用sourceMap(否则会被压缩掉)</span></span><br><span class="line">            sourceMap: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Webpack5-介绍和使用"><a href="#Webpack5-介绍和使用" class="headerlink" title="Webpack5 介绍和使用"></a>Webpack5 介绍和使用</h3><p>   此版本重点关注以下内容:<br>   •    通过持久缓存提高构建性能.<br>   •    使用更好的算法和默认值来改善长期缓存.<br>   •    通过更好的树摇和代码生成来改善捆绑包大小.<br>   •    清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.<br>   •    通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</p><p>   下载<br>   npm i webpack@next webpack-cli -D<br>   自动删除 Node.js Polyfills<br>   早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。<br>   尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。<br>   webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。<br>   迁移：<br>   •    尽可能尝试使用与前端兼容的模块。<br>   •    可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。<br>   Chunk 和模块 ID<br>   添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。<br>   chunkIds: “deterministic”, moduleIds: “deterministic”<br>   Chunk ID<br>   你可以不用使用 import(/* webpackChunkName: “name” */ “module”) 在开发环境来为 chunk 命名，生产环境还是有必要的<br>   webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了<br>   Tree Shaking</p><ol start="5"><li><p>webpack 现在能够处理对嵌套模块的 tree shaking</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">'./inner'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure></li></ol><p>   在生产环境中, inner 模块暴露的 b 会被删除</p><ol start="2"><li><p>webpack 现在能够多个模块之前的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'./something'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   当设置了”sideEffects”: false时，一旦发现test方法没有使用，不但删除test，还会删除”./something”</p><ol start="3"><li><p>webpack 现在能处理对 Commonjs 的 tree shaking<br>Output<br>webpack 4 默认只能输出 ES5 代码<br>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.<br>如：output.ecmaVersion: 2015<br>SplitChunk</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br><span class="line"><span class="comment">// webpack5</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">    javascript: <span class="number">30000</span>,</span><br><span class="line">    style: <span class="number">50000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    Caching</span><br><span class="line">    <span class="comment">// 配置缓存</span></span><br><span class="line">    cache: &#123;</span><br><span class="line">    <span class="comment">// 磁盘存储</span></span><br><span class="line">    type: <span class="string">"filesystem"</span>,</span><br><span class="line">    buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存将存储到 node_modules/.cache/webpack<br>监视输出文件<br>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。<br>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。<br>默认值<br>•    entry: “./src/index.js<br>•    output.path: path.resolve(__dirname, “dist”)<br>•    output.filename: “[name].js”</p></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-配置详情&quot;&gt;&lt;a href=&quot;#Webpack-配置详情&quot; class=&quot;headerlink&quot; title=&quot;Webpack 配置详情&quot;&gt;&lt;/a&gt;Webpack 配置详情&lt;/h3&gt;&lt;p&gt;6.1 entry&lt;br&gt;entry: 入口起点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;string –&amp;gt; ‘./src/index.js’，单入口&lt;br&gt;打包形成一个 chunk。 输出一个 bundle 文件。此时 chunk 的名称默认是 main&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-优化配置</title>
    <link href="http://yoursite.com/2020/09/20/Webpack_Note-%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/20/Webpack_Note-%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2021-01-08T05:26:08.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-优化配置"><a href="#Webpack-优化配置" class="headerlink" title="Webpack 优化配置"></a>Webpack 优化配置</h3><p>5.1 开发环境性能优化<br>5.1.1 HMR（模块热替换）<br>HMR: hot module replacement 热模块替换 / 模块热替换<br>作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度</p><a id="more"></a><p>代码：只需要在 devServer 中设置 hot 为 true，就会自动开启HMR功能（只能在开发模式下使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">  open: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  <span class="comment">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span></span><br><span class="line">  hot: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种文件实现热模块替换的情况：<br>•    样式文件：可以使用HMR功能，因为开发环境下使用的 style-loader 内部默认实现了热模块替换功能<br>•    js 文件：默认不能使用HMR功能（修改一个 js 模块所有 js 模块都会刷新）<br>–&gt; 实现 HMR 需要修改 js 代码（添加支持 HMR 功能的代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 方法会监听 print.js 文件的变化，一旦发生变化，只有这个模块会重新打包构建，其他模块不会。</span></span><br><span class="line">    <span class="comment">// 会执行后面的回调函数</span></span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。<br>•    html 文件: 默认不能使用 HMR 功能（html 不用做 HMR 功能，因为只有一个 html 文件，不需要再优化）<br>使用 HMR 会导致问题：html 文件不能热更新了（不会自动打包构建）<br>解决：修改 entry 入口，将 html 文件引入（这样 html 修改整体刷新）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>]</span><br></pre></td></tr></table></figure><p>5.1.2 source-map<br>source-map：一种提供源代码到构建后代码的映射的技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）<br>参数：[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map<br>在webpack.config.js中加入代码：<br>devtool: ‘eval-source-map’<br>可选方案：[生成source-map的位置|给出的错误代码信息]<br>•    source-map：外部，错误代码准确信息 和 源代码的错误位置<br>•    inline-source-map：内联，只生成一个内联 source-map，错误代码准确信息 和 源代码的错误位置<br>•    hidden-source-map：外部，错误代码错误原因，但是没有错误位置（为了隐藏源代码），不能追踪源代码错误，只能提示到构建后代码的错误位置<br>•    eval-source-map：内联，每一个文件都生成对应的 source-map，都在 eval 中，错误代码准确信息 和 源代码的错误位<br>•    nosources-source-map：外部，错误代码准确信息，但是没有任何源代码信息（为了隐藏源代码）<br>•    cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置，只能把错误精确到整行，忽略列<br>•    cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module 会加入 loader 的 source-map<br>内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快<br>开发/生产环境可做的选择：<br>开发环境：需要考虑速度快，调试更友好<br>•    速度快( eval &gt; inline &gt; cheap &gt;… )<br>i.    eval-cheap-souce-map<br>ii.    eval-source-map<br>•    调试更友好<br>i.    souce-map<br>ii.    cheap-module-souce-map<br>iii.    cheap-souce-map<br>最终得出最好的两种方案 –&gt; eval-source-map（完整度高，内联速度快） / eval-cheap-module-souce-map（错误提示忽略列但是包含其他信息，内联速度快）<br>生产环境：需要考虑源代码要不要隐藏，调试要不要更友好<br>•    内联会让代码体积变大，所以在生产环境不用内联<br>•    隐藏源代码<br>i.    nosources-source-map 全部隐藏<br>ii.    hidden-source-map 只隐藏源代码，会提示构建后代码错误信息<br>最终得出最好的两种方案 –&gt; source-map（最完整） / cheap-module-souce-map（错误提示一整行忽略列）</p><p>5.2 生产环境性能优化<br>5.2.1 优化打包构建速度<br>5.2.1.1 oneOf<br>oneOf：匹配到 loader 后就不再向后进行匹配，优化生产环境的打包构建速度<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// js 语法检查</span></span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// 优先执行</span></span><br><span class="line">      enforce: <span class="string">'pre'</span>,</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        fix: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// oneOf 优化生产环境的打包构建速度</span></span><br><span class="line">      <span class="comment">// 以下loader只会匹配一个（匹配到了后就不会再往下匹配了）</span></span><br><span class="line">      <span class="comment">// 注意：不能有两个配置处理同一种类型文件（所以把eslint-loader提取出去放外面）</span></span><br><span class="line">      oneOf: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: [...commonCssLoader]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// js 兼容性处理</span></span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [</span><br><span class="line">              [</span><br><span class="line">                <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                  corejs: &#123;<span class="attr">version</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                  targets: &#123;</span><br><span class="line">                    chrome: <span class="string">'60'</span>,</span><br><span class="line">                    firefox: <span class="string">'50'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">            name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">            outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">            esModule: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">          loader: <span class="string">'html-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            outputPath: <span class="string">'media'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.2 babel 缓存<br>babel 缓存：类似 HMR，将 babel 处理后的资源缓存起来（哪里的 js 改变就更新哪里，其他 js 还是用之前缓存的资源），让第二次打包构建速度更快。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">          corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">'60'</span>,</span><br><span class="line">            firefox: <span class="string">'50'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开启babel缓存</span></span><br><span class="line">    <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>文件资源缓存<br>文件名不变，就不会重新请求，而是再次用之前缓存的资源<br>1.hash: 每次 wepack 打包时会生成一个唯一的 hash 值。<br> 问题：重新打包，所有文件的 hsah 值都改变，会导致所有缓存失效。（可能只改动了一个文件）<br>2.chunkhash：根据 chunk 生成的 hash 值。来源于同一个 chunk的 hash 值一样<br> 问题：js 和 css 来自同一个chunk，hash 值是一样的（因为 css-loader 会将 css 文件加载到 js 中，所以同属于一个chunk）<br>3.contenthash: 根据文件的内容生成 hash 值。不同文件 hash 值一定不一样(文件内容修改，文件名里的 hash 才会改变)<br>修改 css 文件内容，打包后的 css 文件名 hash 值就改变，而 js 文件没有改变 hash 值就不变，这样 css 和 js 缓存就会分开判断要不要重新请求资源 –&gt; 让代码上线运行缓存更好使用<br>5.2.1.3 多进程打包<br>多进程打包：某个任务消耗时间较长会卡顿，多进程可以同一时间干多件事，效率更高。<br>优点是提升打包速度，缺点是每个进程的开启和交流都会有开销（babel-loader消耗时间最久，所以使用thread-loader针对其进行优化）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">      thread-loader会对其后面的loader（这里是babel-loader）开启多进程打包。 </span></span><br><span class="line"><span class="comment">      进程启动大概为600ms，进程通信也有开销。(启动的开销比较昂贵，不要滥用)</span></span><br><span class="line"><span class="comment">      只有工作消耗时间比较长，才需要多进程打包</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'thread-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        workers: <span class="number">2</span> <span class="comment">// 进程2个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        presets: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">              corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">              targets: &#123;</span><br><span class="line">                chrome: <span class="string">'60'</span>,</span><br><span class="line">                firefox: <span class="string">'50'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 开启babel缓存</span></span><br><span class="line">        <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">        cacheDirectory: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.4 externals<br>externals：让某些库不打包，通过 cdn 引入<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="comment">// 拒绝jQuery被打包进来(通过cdn引入，速度会快一些)</span></span><br><span class="line">  <span class="comment">// 忽略的库名 -- npm包名</span></span><br><span class="line">  jquery: <span class="string">'jQuery'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在 index.html 中通过 cdn 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.2.1.5 dll<br>dll：让某些库单独打包，后直接引入到 build 中。可以在 code split 分割出 node_modules 后再用 dll 更细的分割，优化代码运行的性能。<br>webpack.dll.js 配置如下：(将 jquery 单独打包)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  node_modules的库会打包到一起，但是很多库的时候打包输出的js文件就太大了</span></span><br><span class="line"><span class="comment">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span></span><br><span class="line"><span class="comment">  当运行webpack时，默认查找webpack.config.js配置文件</span></span><br><span class="line"><span class="comment">  需求：需要运行webpack.dll.js文件</span></span><br><span class="line"><span class="comment">    --&gt; webpack --config webpack.dll.js（配置后先运行这个指令表示以这个配置文件打包）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name] --&gt; jquery</span></span><br><span class="line">    <span class="comment">// ['jquery] --&gt; 要打包的库是jquery</span></span><br><span class="line">    jquery: [<span class="string">'jquery'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出出口指定</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// name就是jquery</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'dll'</span>), <span class="comment">// 打包到dll目录下</span></span><br><span class="line">    library: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个manifest.json --&gt; 提供jquery的映射关系（告诉webpack：jquery之后不需要再打包和暴露内容的名称）</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">'dll/manifest.json'</span>) <span class="comment">// 输出文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br><span class="line">webpack.config.js 配置：(告诉 webpack 不需要再打包 jquery，并将之前打包好的 jquery 跟其他打包好的资源一同输出到 build 目录下)</span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中配置：</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'./src/index.html'</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: resolve(__dirname, <span class="string">'dll/manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 将某个文件打包输出到build目录下，并在html中自动引入该资源</span></span><br><span class="line">  <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">    filepath: resolve(__dirname, <span class="string">'dll/jquery.js'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>5.2.2 优化代码运行的性能<br>5.2.2.1 缓存<br>5.2.2.2 tree shaking（树摇）<br>tree shaking：去除无用代码<br>前提：1. 必须使用 ES6 模块化 2. 开启 production 环境 （这样就自动会把无用代码去掉）<br>作用：减少代码体积<br>在 package.json 中配置：<br>“sideEffects”: false 表示所有代码都没有副作用（都可以进行 tree shaking）<br>这样会导致的问题：可能会把 css / @babel/polyfill 文件干掉（副作用）<br>所以可以配置：”sideEffects”: [“<em>.css”, “</em>.less”] 不会对css/less文件tree shaking处理<br>5.2.2.3 code split（代码分割）<br>代码分割。将打包输出的一个大的 bundle.js 文件拆分成多个小文件，这样可以并行加载多个文件，比加载一个文件更快。<br>1.多入口拆分（几个入口就拆分几个文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    <span class="comment">// 多入口：有一个入口，最终输出就有一个bundle</span></span><br><span class="line">    index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    test: <span class="string">'./src/js/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// [name]：取文件名</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">2.</span>optimization：（多入口，单入口都可搭配使用）</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>•    将 node_modules 中的代码单独打包（大小超过30kb）（如果有多个node_modules的库会打包到一起，可以用dll再细分）<br>•    自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk(比如两个模块中都引入了jquery会被打包成单独的文件)（大小超过30kb）<br>3.import 动态导入语法：<br>/*<br>  通过js代码，让某个文件被单独打包成一个chunk<br>  import动态导入语法：能将某个文件单独打包(test文件不会和index打包在同一个文件而是单独打包)<br>  webpackChunkName:指定test单独打包后文件的名字<br>在index.js中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test' */</span><span class="string">'./test'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; mul, count &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 文件加载成功~</span></span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件加载失败~'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>5.2.2.4 lazy loading（懒加载/预加载）<br>1.懒加载：当文件需要使用时才加载（需要代码分割）。但是如果资源较大，加载时间就会较长，有延迟。<br>2.正常加载：可以认为是并行加载（同一时间加载多个文件）没有先后顺序，先加载了不需要的资源就会浪费时间。<br>3.预加载 prefetch（兼容性很差）：会在使用之前，提前加载。等其他资源加载完毕，浏览器空闲了，再偷偷加载这个资源。这样在使用时已经加载好了，速度很快。所以在懒加载的基础上加上预加载会更好。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将import的内容放在异步回调函数中使用，点击按钮，test.js才会被加载(不会重复加载)</span></span><br><span class="line">  <span class="comment">// webpackPrefetch: true表示开启预加载</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test', webpackPrefetch: true */</span><span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.2.2.5 pwa（离线可访问技术）<br>pwa：离线可访问技术（渐进式网络开发应用程序），使用 serviceworker 和 workbox 技术。优点是离线也能访问，缺点是兼容性差。<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>); <span class="comment">// 引入插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中加入：</span></span><br><span class="line"><span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">    2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    生成一个 serviceworker 配置文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  clientsClaim: <span class="literal">true</span>,</span><br><span class="line">  skipWaiting: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">index.js 中还需要写一段代码来激活它的使用：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. eslint不认识 window、navigator全局变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    解决：需要修改package.json中eslintConfig配置</span></span><br><span class="line"><span class="comment">    "env": &#123;</span></span><br><span class="line"><span class="comment">      "browser": true // 支持浏览器端全局变量</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2. sw代码必须运行在服务器上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt; nodejs</span></span><br><span class="line"><span class="comment">    或--&gt;</span></span><br><span class="line"><span class="comment">      npm i serve -g</span></span><br><span class="line"><span class="comment">      serve -s build 启动服务器，将打包输出的build目录下所有资源作为静态资源暴露出去</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123; <span class="comment">// 处理兼容性问题</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/service-worker.js'</span>) <span class="comment">// 注册serviceWorker</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册成功了~'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册失败了~'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-优化配置&quot;&gt;&lt;a href=&quot;#Webpack-优化配置&quot; class=&quot;headerlink&quot; title=&quot;Webpack 优化配置&quot;&gt;&lt;/a&gt;Webpack 优化配置&lt;/h3&gt;&lt;p&gt;5.1 开发环境性能优化&lt;br&gt;5.1.1 HMR（模块热替换）&lt;br&gt;HMR: hot module replacement 热模块替换 / 模块热替换&lt;br&gt;作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-生产环境基本配置</title>
    <link href="http://yoursite.com/2020/09/17/Webpack_Note-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/17/Webpack_Note-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-16T16:00:00.000Z</published>
    <updated>2021-01-08T03:37:11.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-生产环境的基本配置"><a href="#Webpack-生产环境的基本配置" class="headerlink" title="Webpack 生产环境的基本配置"></a>Webpack 生产环境的基本配置</h3><p>而生产环境的配置需要考虑以下几个方面：<br>•    提取 css 成单独文件<br>•    css 兼容性处理<br>•    压缩 css</p><a id="more"></a><p>•    js 语法检查<br>•    js 兼容性处理<br>•    js 压缩<br>•    html 压缩</p><p>下面是一个基本的生产环境下的webpack.config.js配置</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractorPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> OptimiziCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimizi-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义node.js的环境变量，决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader的写法</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">    <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件然后通过link加载</span></span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="comment">// css-loader：将css文件整合到js文件中</span></span><br><span class="line">    <span class="comment">// 经过css-loader处理后，样式文件是在js文件中的</span></span><br><span class="line">    <span class="comment">// 问题：1.js文件体积会很大2.需要先加载js再动态创建style标签，样式渲染速度就慢，会出现闪屏现象</span></span><br><span class="line">    <span class="comment">// 解决：用MiniCssExtractPlugin.loader替代style-loader</span></span><br><span class="line">    <span class="string">'css-loader'</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      postcss-loader：css兼容性处理：postcss --&gt; 需要安装：postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment">      postcss需要通过package.json中browserslist里面的配置加载指定的css兼容性样式</span></span><br><span class="line"><span class="comment">      在package.json中定义browserslist：</span></span><br><span class="line"><span class="comment">      "browserslist": &#123;</span></span><br><span class="line"><span class="comment">        // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span></span><br><span class="line"><span class="comment">        "development": [ // 只需要可以运行即可</span></span><br><span class="line"><span class="comment">          "last 1 chrome version",</span></span><br><span class="line"><span class="comment">          "last 1 firefox version",</span></span><br><span class="line"><span class="comment">          "last 1 safari version"</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        // 生产环境。默认是生产环境</span></span><br><span class="line"><span class="comment">        "production": [ // 需要满足绝大多数浏览器的兼容</span></span><br><span class="line"><span class="comment">          "&gt;0.2%",</span></span><br><span class="line"><span class="comment">          "not dead",</span></span><br><span class="line"><span class="comment">          "not op_mini all"</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            ident: <span class="string">'postcss'</span>, <span class="comment">// 基本写法</span></span><br><span class="line">            plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                <span class="comment">// postcss的插件</span></span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)(),</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [...commonCssLoader],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [...commonCssLoader, <span class="string">'less-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              正常来讲，一个文件只能被一个loader处理</span></span><br><span class="line"><span class="comment">              当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序</span></span><br><span class="line"><span class="comment">              先执行eslint再执行babel（用enforce）</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  js的语法检查： 需要下载 eslint-loader eslint</span></span><br><span class="line"><span class="comment">                  注意：只检查自己写的源代码，第三方的库是不用检查的</span></span><br><span class="line"><span class="comment">                  airbnb(一个流行的js风格) --&gt; 需要下载 eslint-config-airbnb-base eslint-plugin-import</span></span><br><span class="line"><span class="comment">                  设置检查规则：</span></span><br><span class="line"><span class="comment">                    package.json中eslintConfig中设置</span></span><br><span class="line"><span class="comment">                      "eslintConfig": &#123;</span></span><br><span class="line"><span class="comment">                        "extends": "airbnb-base"， // 继承airbnb的风格规范</span></span><br><span class="line"><span class="comment">                        "env": &#123;</span></span><br><span class="line"><span class="comment">                          "browser": true // 可以使用浏览器中的全局变量(使用window不会报错)</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                      &#125;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, <span class="comment">// 忽略node_modules</span></span><br><span class="line">                enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">                loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 自动修复</span></span><br><span class="line">                    fix: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              js兼容性处理：需要下载 babel-loader @babel/core</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">                   1. 基本js兼容性处理 --&gt; @babel/preset-env</span></span><br><span class="line"><span class="comment">                           问题：只能转换基本语法，如promise高级语法不能转换</span></span><br><span class="line"><span class="comment">                            2. 全部js兼容性处理 --&gt; @babel/polyfill</span></span><br><span class="line"><span class="comment">                                   问题：只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">                                    3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span></span><br><span class="line"><span class="comment">                                    */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 第三种方式：按需加载</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 预设：指示babel做怎样的兼容性处理</span></span><br><span class="line">                    presets: [</span><br><span class="line">                        <span class="string">'@babel/preset-env'</span>, <span class="comment">// 基本预设</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            useBuiltIns: <span class="string">'usage'</span>, <span class="comment">//按需加载</span></span><br><span class="line">                            corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;, <span class="comment">// 指定core-js版本</span></span><br><span class="line">                            targets: &#123; <span class="comment">// 指定兼容到什么版本的浏览器</span></span><br><span class="line">                                chrome: <span class="string">'60'</span>,</span><br><span class="line">                                firefox: <span class="string">'50'</span>,</span><br><span class="line">                                ie: <span class="string">'9'</span>,</span><br><span class="line">                                safari: <span class="string">'10'</span>,</span><br><span class="line">                                edge: <span class="string">'17'</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 图片处理</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                    esModule: <span class="literal">false</span>, <span class="comment">// 关闭url-loader默认使用的es6模块化解析</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// html中的图片处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理其他文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">            filename: <span class="string">'css/built.css'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 压缩css</span></span><br><span class="line">        <span class="keyword">new</span> OptimiziCssAssetsWebpackPlugin(),</span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin：html文件的打包和压缩处理</span></span><br><span class="line">        <span class="comment">// 通过这个插件会自动将单独打包的样式文件通过link标签引入</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            <span class="comment">// 压缩html代码</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                <span class="comment">// 移除空格</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 移除注释</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-生产环境的基本配置&quot;&gt;&lt;a href=&quot;#Webpack-生产环境的基本配置&quot; class=&quot;headerlink&quot; title=&quot;Webpack 生产环境的基本配置&quot;&gt;&lt;/a&gt;Webpack 生产环境的基本配置&lt;/h3&gt;&lt;p&gt;而生产环境的配置需要考虑以下几个方面：&lt;br&gt;•    提取 css 成单独文件&lt;br&gt;•    css 兼容性处理&lt;br&gt;•    压缩 css&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-开发环境基本配置</title>
    <link href="http://yoursite.com/2020/09/15/Webpack_Note-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/15/Webpack_Note-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-14T16:00:00.000Z</published>
    <updated>2021-01-08T03:38:45.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-开发环境的基本配置"><a href="#Webpack-开发环境的基本配置" class="headerlink" title="Webpack 开发环境的基本配置"></a>Webpack 开发环境的基本配置</h3><p>webpack.config.js 是 webpack 的配置文件。<br>作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）<br>所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。<br>开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：</p><a id="more"></a><p>•    打包样式资源<br>•    打包 html 资源<br>•    打包图片资源<br>•    打包其他资源<br>•    devServer</p><p>下面是一个简单的开发环境webpack.confg.js配置文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 引用plugin</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// webpack配置</span></span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>, <span class="comment">// 入口起点</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="comment">// 输出文件名</span></span><br><span class="line">        filename: <span class="string">'js/build.js'</span>,</span><br><span class="line">        <span class="comment">// __dirname是nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>), <span class="comment">// 输出路径，所有资源打包都会输出到这个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// loader配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// 详细的loader配置</span></span><br><span class="line">            <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配哪些文件</span></span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// use数组中loader执行顺序：从右到左，从下到上，依次执行(先执行css-loader)</span></span><br><span class="line">                    <span class="comment">// style-loader：创建style标签，将js中的样式资源插入进去，添加到head中生效</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="comment">// css-loader：将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                    <span class="comment">// less-loader：将less文件编译成css文件，需要下载less-loader和less</span></span><br><span class="line">                    <span class="string">'less-loader'</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// url-loader：处理图片资源，问题：默认处理不了html中的img图片</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                <span class="comment">// 需要下载 url-loader file-loader</span></span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 图片大小小于8kb，就会被base64处理，优点：减少请求数量（减轻服务器压力），缺点：图片体积会更大（文件请求速度更慢）</span></span><br><span class="line">                    <span class="comment">// base64在客户端本地解码所以会减少服务器压力，如果图片过大还采用base64编码会导致cpu调用率上升，网页加载时变卡</span></span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    <span class="comment">// 给图片重命名，[hash:10]：取图片的hash的前10位，[ext]：取文件原来扩展名</span></span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是conmonjs，解析时会出问题：[object Module]</span></span><br><span class="line">                    <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">                    esModule: <span class="literal">false</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 排除html|js|css|less|jpg|png|gif文件</span></span><br><span class="line">                exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">                <span class="comment">// file-loader：处理其他文件</span></span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugin的配置</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// html-webpack-plugin：默认会创建一个空的html文件，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">        <span class="comment">// 需要有结构的HTML文件可以加一个template</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 复制这个./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    mode: <span class="string">'development'</span>, <span class="comment">// 开发模式</span></span><br><span class="line">    <span class="comment">// 开发服务器 devServer：用来自动化，不用每次修改后都重新输入webpack打包一遍（自动编译，自动打开浏览器，自动刷新浏览器）</span></span><br><span class="line">    <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出（不会像之前那样在外面看到打包输出的build包，而是在内存中，关闭后会自动删除）</span></span><br><span class="line">    <span class="comment">// 启动devServer指令为：npx webpack-dev-server</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 项目构建后路径</span></span><br><span class="line">        contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        <span class="comment">// 启动gzip压缩</span></span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，大部分配置都在注释中给出解释。<br>•    运行项目的两个指令：<br>webpack 会将打包结果输出出去（build文件夹）<br>npx webpack-dev-server 只会在内存中编译打包，没有输出<br>•    loader 和 plugin 的不同：（plugin 一定要先引入才能使用）<br> loader：1. 下载 2. 使用（配置 loader）<br> plugins：1.下载 2. 引入 3. 使用</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-开发环境的基本配置&quot;&gt;&lt;a href=&quot;#Webpack-开发环境的基本配置&quot; class=&quot;headerlink&quot; title=&quot;Webpack 开发环境的基本配置&quot;&gt;&lt;/a&gt;Webpack 开发环境的基本配置&lt;/h3&gt;&lt;p&gt;webpack.config.js 是 webpack 的配置文件。&lt;br&gt;作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）&lt;br&gt;所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。&lt;br&gt;开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
</feed>
