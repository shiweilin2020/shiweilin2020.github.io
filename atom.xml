<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LSW_blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-08T09:48:34.110Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SW Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客(更换电脑)</title>
    <link href="http://yoursite.com/2021/01/08/Hexo%E5%8D%9A%E5%AE%A2(%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91)/"/>
    <id>http://yoursite.com/2021/01/08/Hexo%E5%8D%9A%E5%AE%A2(%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91)/</id>
    <published>2021-01-08T07:58:38.000Z</published>
    <updated>2021-01-08T09:48:34.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-拷贝原电脑相关文件"><a href="#1-拷贝原电脑相关文件" class="headerlink" title="1.拷贝原电脑相关文件"></a>1.拷贝原电脑相关文件</h3><p>建立hexo博客都会有一个独立的文件夹。电脑转移时安全的做法是将整个文件夹拷贝，这其中包括三个<strong>必备的文件</strong>：config.yml（站点配置_）、theme（主题文件夹）、source（博客内容文件）。</p><a id="more"></a>**次要文件**：scaffolds（文章的模板）、package.json（使用包的说明文件）和.gitignore（限定在提交的时候哪些文件可以忽略）三个次要文件为自动生成的，因此丢失也不影响博客内容，后续在hexo init时会生成这三个文件。**需要删除的文件**：.git文件、node_modules（进行npm install会重新生成）、public（执行hexo g时会重新生成）、.deploy_git文件夹（执行hexo d时会重新生成）、db.json文件。其实上面这些可删除的文件即为.gitignore文件里面记载的可以忽略的内容。<blockquote><p><strong>总结</strong>：_config.yml、theme、source、scaffolds、package.json、.gitignore应该进行拷贝，.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除</p></blockquote><h3 id="2-初始化环境"><a href="#2-初始化环境" class="headerlink" title="2.初始化环境"></a>2.初始化环境</h3><p>安装Node和Git环境。Windows环境下均有相关的exe可执行文件，两者的环境搭配均比较容易，特别的Node安装时自带有npm,可以方便执行后续的hexo安装。Hexo主要执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init &lt;your_blog_name&gt; <span class="comment"># your_blog_name 可以缺省,在博客文件夹内执行相关命令</span></span><br><span class="line">$ npm install</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="3-新建SSH-Key"><a href="#3-新建SSH-Key" class="headerlink" title="3.新建SSH Key"></a>3.新建SSH Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"GitHub邮箱名"</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>之后会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/jacky/.ssh/id_rsa):</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>直接回车就可以。<br>然后会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>要求你输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p><p>注意：输入密码的时候没有*字样的，直接输入就好。<br>然后会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/jacky/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/jacky/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">65:58:······02:4b emailname@email.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|       .   o .   |</span></span><br><span class="line"><span class="string">|    . o o = o    |</span></span><br><span class="line"><span class="string">|   . o * = o     |</span></span><br><span class="line"><span class="string">|  E  o + o .     |</span></span><br><span class="line"><span class="string">| . o.   . .      |</span></span><br><span class="line"><span class="string">|     ..          |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br><span class="line"><span class="string">1234567891011121314</span></span><br></pre></td></tr></table></figure><p>至此，密钥已在本地成功生成。</p><h3 id="4-添加SSH-Key"><a href="#4-添加SSH-Key" class="headerlink" title="4.添加SSH Key"></a>4.添加SSH Key</h3><ul><li>打开本地文件：id_rsa.pub（文件路径可以在上一步SSH生成成功后看到路径，具体在’Your public key has been saved in’后面），可以将这个文件在编辑器中打开，然后全选复制</li><li>登陆github，点击头像位置处 Settings ——&gt; SSH and GPG keys,点击新建SSH Key</li><li>将复制的内容全部粘贴在Key文本框内，title填不填均可</li></ul><h3 id="5-测试设置是否成功"><a href="#5-测试设置是否成功" class="headerlink" title="5.测试设置是否成功"></a>5.测试设置是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>有可能会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (192.156.***.19)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 36:27:ac:a5:76:28:2d:45:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (192.156.***.19)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is nThbg***********************8.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>这种情况下，直接 yes 回车。</p><p>然后会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>至此，设置成功。</p><h3 id="6-设置用户信息"><a href="#6-设置用户信息" class="headerlink" title="6.设置用户信息"></a>6.设置用户信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"用户名"</span></span><br><span class="line">$ git config --global user.email  <span class="string">"你希望的邮箱名"</span></span><br></pre></td></tr></table></figure><h3 id="7-正常Hexo命令操作"><a href="#7-正常Hexo命令操作" class="headerlink" title="7.正常Hexo命令操作"></a>7.正常Hexo命令操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s <span class="comment"># http://localhost:3000/预览</span></span><br><span class="line">$ hexo g <span class="comment"># 编译</span></span><br><span class="line">$ hexo d <span class="comment"># 发布</span></span><br></pre></td></tr></table></figure><h1 id="遇到错误解决方案："><a href="#遇到错误解决方案：" class="headerlink" title="遇到错误解决方案："></a>遇到错误解决方案：</h1><h3 id="ERROR-Deployer-not-found-git"><a href="#ERROR-Deployer-not-found-git" class="headerlink" title="ERROR Deployer not found: git"></a>ERROR Deployer not found: git</h3><p>执行 npm install hexo-deployer-git –save</p><h3 id="关于hexo-deploy部署HEXO博客到github时，提示typeError-ERR-INVALID-ARG-TYPE-The-“mode”-argument-must-be-integer-Recei…"><a href="#关于hexo-deploy部署HEXO博客到github时，提示typeError-ERR-INVALID-ARG-TYPE-The-“mode”-argument-must-be-integer-Recei…" class="headerlink" title="关于hexo deploy部署HEXO博客到github时，提示typeError [ERR_INVALID_ARG_TYPE]: The “mode” argument must be integer. Recei…"></a>关于hexo deploy部署HEXO博客到github时，提示typeError [ERR_INVALID_ARG_TYPE]: The “mode” argument must be integer. Recei…</h3><p> 应该是node版本过高导致的（我用的是v14.8.0），将node版本换为v12.16.2版本后，部署就成功了！</p><p>如果你的其他项目中有需要使用高版本的node，那么你可以使用nvm来进行node版本切换。</p><p>推荐使用nvm，可在<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">点此在github</a>上下载windows版本。打开网址我们可以看到有两个版本：</p><ul><li><p>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置。</p></li><li><p>nvm-setup.zip：安装版，推荐使用</p><p>安装后：</p><p>  1、查看本地安装的所有版本；有可选参数available，显示所有可下载的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list [available]</span><br></pre></td></tr></table></figure><p>  2、安装，命令中的版本号可自定义，具体参考命令1查询出来的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 11.13.0</span><br></pre></td></tr></table></figure><p>  3、使用特定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 11.13.0</span><br></pre></td></tr></table></figure><p>  4、卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 11.13.0</span><br></pre></td></tr></table></figure></li></ul><h3 id="nvm-install-11-13-0-时"><a href="#nvm-install-11-13-0-时" class="headerlink" title="nvm install 11.13.0 时"></a>nvm install 11.13.0 时</h3><h3 id="Error-Could-not-retrieve-https-nodejs-org-dist-latest-SHASUMS256-txt"><a href="#Error-Could-not-retrieve-https-nodejs-org-dist-latest-SHASUMS256-txt" class="headerlink" title="Error:Could not retrieve https://nodejs.org/dist/latest/SHASUMS256.txt."></a>Error:Could not retrieve <a href="https://nodejs.org/dist/latest/SHASUMS256.txt" target="_blank" rel="noopener">https://nodejs.org/dist/latest/SHASUMS256.txt</a>.</h3><h3 id="Get-https-nodejs-org-dist-latest-SHASUMS256-txt-net-http-TLS-handshake-timeout"><a href="#Get-https-nodejs-org-dist-latest-SHASUMS256-txt-net-http-TLS-handshake-timeout" class="headerlink" title="Get https://nodejs.org/dist/latest/SHASUMS256.txt: net/http: TLS handshake timeout"></a>Get <a href="https://nodejs.org/dist/latest/SHASUMS256.txt" target="_blank" rel="noopener">https://nodejs.org/dist/latest/SHASUMS256.txt</a>: net/http: TLS handshake timeout</h3><p>修改nvm下的<code>settings.txt</code>文件，在最后新增两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-拷贝原电脑相关文件&quot;&gt;&lt;a href=&quot;#1-拷贝原电脑相关文件&quot; class=&quot;headerlink&quot; title=&quot;1.拷贝原电脑相关文件&quot;&gt;&lt;/a&gt;1.拷贝原电脑相关文件&lt;/h3&gt;&lt;p&gt;建立hexo博客都会有一个独立的文件夹。电脑转移时安全的做法是将整个文件夹拷贝，这其中包括三个&lt;strong&gt;必备的文件&lt;/strong&gt;：config.yml（站点配置_）、theme（主题文件夹）、source（博客内容文件）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS介绍</title>
    <link href="http://yoursite.com/2021/01/08/nodeJS%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2021/01/08/nodeJS%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-08T08:20:10.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li><p>企业岗位需求</p><ul><li><p>具有服务端开发经验更改</p></li><li><p>front-end</p></li><li><p>back-end</p><a id="more"></a></li><li><p>全栈开发工程师</p></li><li><p>基本的网站开发能力</p><ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li></ul></li></ul><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么?"></a>Node.js是什么?</h2><ul><li>Node.js是JavaScript 运行时环境</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li><strong>没有Bom，Dom</strong></li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven    事件驱动</li><li>non-blocking I/O mode   非阻塞I/O模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>如：npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么?"></a>Node能做什么?</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm (node)</li><li>git (c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>npm</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Node介绍&quot;&gt;&lt;a href=&quot;#Node介绍&quot; class=&quot;headerlink&quot; title=&quot;Node介绍&quot;&gt;&lt;/a&gt;Node介绍&lt;/h1&gt;&lt;h2 id=&quot;为什么要学习Node-js&quot;&gt;&lt;a href=&quot;#为什么要学习Node-js&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习Node.js&quot;&gt;&lt;/a&gt;为什么要学习Node.js&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;企业岗位需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;具有服务端开发经验更改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;front-end&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;back-end&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS起步</title>
    <link href="http://yoursite.com/2021/01/08/nodeJs%E8%B5%B7%E6%AD%A5/"/>
    <id>http://yoursite.com/2021/01/08/nodeJs%E8%B5%B7%E6%AD%A5/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-08T17:01:48.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><ul><li><p>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p></li><li><p>安装：</p><ul><li><p>傻瓜式安装，一路<code>next</code></p></li><li><p>安装过再次安装会升级</p><a id="more"></a></li></ul></li><li><p>确认Node环境是否安装成功</p><ul><li>查看node的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li><p>配置环境变量</p></li></ul><h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ol><li>创建编写JavaScript脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node  文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浏览器中的JavaScript是没有文件操作能力的</span></span><br><span class="line"><span class="comment">//但是Node中的JavaScript具有文件操作能力</span></span><br><span class="line"><span class="comment">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class="line"><span class="comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span></span><br><span class="line"><span class="comment">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span></span><br><span class="line"><span class="comment">//例如 fs.readFile就是用来读取文件的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取文件</span></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件读取失败'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将数据写入文件</span></span><br><span class="line">fs.writeFile(<span class="string">'./data/a.txt'</span>,<span class="string">'我是文件写入的信息'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件写入失败'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.加载http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.服务器要做的事儿</span></span><br><span class="line"><span class="comment">// 提供服务：对数据服务</span></span><br><span class="line"><span class="comment">// 发请求</span></span><br><span class="line"><span class="comment">//接收请求</span></span><br><span class="line"><span class="comment">//处理请求</span></span><br><span class="line"><span class="comment">//反馈（发送响应）</span></span><br><span class="line"><span class="comment">//当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  request请求事件处理函数，需要接收俩个参数：</span></span><br><span class="line"><span class="comment">//request 请求对象</span></span><br><span class="line"><span class="comment">//请求对象可以获取客户端的一些请求消息，例如请求路径</span></span><br><span class="line"><span class="comment">//response 相应对象</span></span><br><span class="line"><span class="comment">//响应对象可以用来给客户端发送响应消息</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到客户的请求了'</span> + request.url)</span><br><span class="line">    <span class="comment">//response对象有一个write可以用来给客户端发送响应数据</span></span><br><span class="line">    <span class="comment">//write可以写多次，但是一定要使用 end 来结束响应，否则客户端会一直等待</span></span><br><span class="line">    <span class="comment">// response.write('hello')</span></span><br><span class="line">    <span class="comment">// response.write(' nodeJS')</span></span><br><span class="line">    <span class="comment">// response.end()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置响应头，告知浏览器使用的编码集和发送的数据是什么类型，否则可能会乱码</span></span><br><span class="line">    <span class="comment">//text/plain 普通文本</span></span><br><span class="line">    <span class="comment">//text/html </span></span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line">    <span class="comment">//上面方式比较麻烦，可以直接 end 同时发送数据</span></span><br><span class="line">    response.end(<span class="string">'hello nodeJS 中国'</span>)</span><br><span class="line">    <span class="comment">//response.end('&lt;p&gt; hello &lt;a href='#'&gt; &lt;p&gt;')</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h1&gt;&lt;h2 id=&quot;安装Node环境&quot;&gt;&lt;a href=&quot;#安装Node环境&quot; class=&quot;headerlink&quot; title=&quot;安装Node环境&quot;&gt;&lt;/a&gt;安装Node环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载：&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;傻瓜式安装，一路&lt;code&gt;next&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装过再次安装会升级&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note</title>
    <link href="http://yoursite.com/2020/09/27/Webpack-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/09/27/Webpack-%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-27T14:38:17.000Z</published>
    <updated>2021-01-08T05:15:06.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Webpack-简介"><a href="#一、Webpack-简介" class="headerlink" title="一、Webpack 简介"></a>一、Webpack 简介</h3><p>–1.1 webpack 是什么？<br>webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。<br>在webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。<br>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p><a id="more"></a><p>–1.2 webpack 五个核心概念<br>–1.2.1 Entry<br>入口(Entry)：指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。<br>–1.2.2 Output<br>输出(Output)：指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。<br>–1.2.3 Loader<br>选项    描述    特点<br>development    会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。    能让代码本地调试运行的环境<br>production    会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。    能让代码优化上线运行的环境<br> Loader：让 webpack 能够去处理那些非 JS 的文件，比如样式文件、图片文件(webpack 自身只理解<br>JS)<br>–1.2.4 Plugins<br>插件(Plugins)：可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。<br>–1.2.5 Mode<br>模式(Mode)：指示 webpack 使用相应模式的配置。</p><h3 id="二、Webpack-初体验"><a href="#二、Webpack-初体验" class="headerlink" title="二、Webpack 初体验"></a>二、Webpack 初体验</h3><p>2.1 初始化配置</p><ol><li>初始化 package.json：npm init</li><li>下载安装webpack：(webpack4以上的版本需要全局/本地都安装webpack-cli)<br>全局安装：cnpm i webpack webpack-cli -g<br>本地安装：cnpm i webpack webpack-cli -D</li><li>2 编译打包应用<br>创建 src 下的 js 等文件后，不需要配置 webpack.config.js 文件，在命令行就可以编译打包。<br>指令：<br>•    开发环境：webpack ./src/index.js -o ./build/built.js –mode=development<br>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是开发环境<br>•    生产环境：webpack ./src/index.js -o ./build/built.js –mode=production<br>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境，是生产环境<br>结论：</li><li>webpack 本身能处理 js/json 资源，不能处理 css/img 等其他资源</li><li>生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化，但是不能处理 ES6 的基本语法转化为 ES5（需要借助 loader）</li><li>生产环境比开发环境多一个压缩 js 代码</li></ol><h3 id="三、Webpack-开发环境的基本配置"><a href="#三、Webpack-开发环境的基本配置" class="headerlink" title="三、Webpack 开发环境的基本配置"></a>三、Webpack 开发环境的基本配置</h3><p>webpack.config.js 是 webpack 的配置文件。<br>作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）<br>所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。<br>开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：<br>•    打包样式资源<br>•    打包 html 资源<br>•    打包图片资源<br>•    打包其他资源<br>•    devServer<br>下面是一个简单的开发环境webpack.confg.js配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 引用plugin</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// webpack配置</span></span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>, <span class="comment">// 入口起点</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="comment">// 输出文件名</span></span><br><span class="line">        filename: <span class="string">'js/build.js'</span>,</span><br><span class="line">        <span class="comment">// __dirname是nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>), <span class="comment">// 输出路径，所有资源打包都会输出到这个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// loader配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// 详细的loader配置</span></span><br><span class="line">            <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配哪些文件</span></span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// use数组中loader执行顺序：从右到左，从下到上，依次执行(先执行css-loader)</span></span><br><span class="line">                    <span class="comment">// style-loader：创建style标签，将js中的样式资源插入进去，添加到head中生效</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="comment">// css-loader：将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                    <span class="comment">// less-loader：将less文件编译成css文件，需要下载less-loader和less</span></span><br><span class="line">                    <span class="string">'less-loader'</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// url-loader：处理图片资源，问题：默认处理不了html中的img图片</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                <span class="comment">// 需要下载 url-loader file-loader</span></span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 图片大小小于8kb，就会被base64处理，优点：减少请求数量（减轻服务器压力），缺点：图片体积会更大（文件请求速度更慢）</span></span><br><span class="line">                    <span class="comment">// base64在客户端本地解码所以会减少服务器压力，如果图片过大还采用base64编码会导致cpu调用率上升，网页加载时变卡</span></span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    <span class="comment">// 给图片重命名，[hash:10]：取图片的hash的前10位，[ext]：取文件原来扩展名</span></span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是conmonjs，解析时会出问题：[object Module]</span></span><br><span class="line">                    <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">                    esModule: <span class="literal">false</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 排除html|js|css|less|jpg|png|gif文件</span></span><br><span class="line">                exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">                <span class="comment">// file-loader：处理其他文件</span></span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugin的配置</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// html-webpack-plugin：默认会创建一个空的html文件，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">        <span class="comment">// 需要有结构的HTML文件可以加一个template</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 复制这个./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    mode: <span class="string">'development'</span>, <span class="comment">// 开发模式</span></span><br><span class="line">    <span class="comment">// 开发服务器 devServer：用来自动化，不用每次修改后都重新输入webpack打包一遍（自动编译，自动打开浏览器，自动刷新浏览器）</span></span><br><span class="line">    <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出（不会像之前那样在外面看到打包输出的build包，而是在内存中，关闭后会自动删除）</span></span><br><span class="line">    <span class="comment">// 启动devServer指令为：npx webpack-dev-server</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 项目构建后路径</span></span><br><span class="line">        contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        <span class="comment">// 启动gzip压缩</span></span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，大部分配置都在注释中给出解释。<br>•    运行项目的两个指令：<br>webpack 会将打包结果输出出去（build文件夹）<br>npx webpack-dev-server 只会在内存中编译打包，没有输出<br>•    loader 和 plugin 的不同：（plugin 一定要先引入才能使用）<br> loader：1. 下载 2. 使用（配置 loader）<br> plugins：1.下载 2. 引入 3. 使用</p><h3 id="四、Webpack-生产环境的基本配置"><a href="#四、Webpack-生产环境的基本配置" class="headerlink" title="四、Webpack 生产环境的基本配置"></a>四、Webpack 生产环境的基本配置</h3><p>而生产环境的配置需要考虑以下几个方面：<br>•    提取 css 成单独文件<br>•    css 兼容性处理<br>•    压缩 css<br>•    js 语法检查<br>•    js 兼容性处理<br>•    js 压缩<br>•    html 压缩<br>下面是一个基本的生产环境下的webpack.config.js配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractorPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> OptimiziCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimizi-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义node.js的环境变量，决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader的写法</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">    <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件然后通过link加载</span></span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="comment">// css-loader：将css文件整合到js文件中</span></span><br><span class="line">    <span class="comment">// 经过css-loader处理后，样式文件是在js文件中的</span></span><br><span class="line">    <span class="comment">// 问题：1.js文件体积会很大2.需要先加载js再动态创建style标签，样式渲染速度就慢，会出现闪屏现象</span></span><br><span class="line">    <span class="comment">// 解决：用MiniCssExtractPlugin.loader替代style-loader</span></span><br><span class="line">    <span class="string">'css-loader'</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      postcss-loader：css兼容性处理：postcss --&gt; 需要安装：postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment">      postcss需要通过package.json中browserslist里面的配置加载指定的css兼容性样式</span></span><br><span class="line"><span class="comment">      在package.json中定义browserslist：</span></span><br><span class="line"><span class="comment">      "browserslist": &#123;</span></span><br><span class="line"><span class="comment">        // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span></span><br><span class="line"><span class="comment">        "development": [ // 只需要可以运行即可</span></span><br><span class="line"><span class="comment">          "last 1 chrome version",</span></span><br><span class="line"><span class="comment">          "last 1 firefox version",</span></span><br><span class="line"><span class="comment">          "last 1 safari version"</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        // 生产环境。默认是生产环境</span></span><br><span class="line"><span class="comment">        "production": [ // 需要满足绝大多数浏览器的兼容</span></span><br><span class="line"><span class="comment">          "&gt;0.2%",</span></span><br><span class="line"><span class="comment">          "not dead",</span></span><br><span class="line"><span class="comment">          "not op_mini all"</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            ident: <span class="string">'postcss'</span>, <span class="comment">// 基本写法</span></span><br><span class="line">            plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                <span class="comment">// postcss的插件</span></span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)(),</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [...commonCssLoader],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [...commonCssLoader, <span class="string">'less-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              正常来讲，一个文件只能被一个loader处理</span></span><br><span class="line"><span class="comment">              当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序</span></span><br><span class="line"><span class="comment">              先执行eslint再执行babel（用enforce）</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  js的语法检查： 需要下载 eslint-loader eslint</span></span><br><span class="line"><span class="comment">                  注意：只检查自己写的源代码，第三方的库是不用检查的</span></span><br><span class="line"><span class="comment">                  airbnb(一个流行的js风格) --&gt; 需要下载 eslint-config-airbnb-base eslint-plugin-import</span></span><br><span class="line"><span class="comment">                  设置检查规则：</span></span><br><span class="line"><span class="comment">                    package.json中eslintConfig中设置</span></span><br><span class="line"><span class="comment">                      "eslintConfig": &#123;</span></span><br><span class="line"><span class="comment">                        "extends": "airbnb-base"， // 继承airbnb的风格规范</span></span><br><span class="line"><span class="comment">                        "env": &#123;</span></span><br><span class="line"><span class="comment">                          "browser": true // 可以使用浏览器中的全局变量(使用window不会报错)</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                      &#125;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, <span class="comment">// 忽略node_modules</span></span><br><span class="line">                enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">                loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 自动修复</span></span><br><span class="line">                    fix: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              js兼容性处理：需要下载 babel-loader @babel/core</span></span><br><span class="line"><span class="comment">                1. 基本js兼容性处理 --&gt; @babel/preset-env</span></span><br><span class="line"><span class="comment">                  问题：只能转换基本语法，如promise高级语法不能转换</span></span><br><span class="line"><span class="comment">                2. 全部js兼容性处理 --&gt; @babel/polyfill</span></span><br><span class="line"><span class="comment">                  问题：只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">                3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 第三种方式：按需加载</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 预设：指示babel做怎样的兼容性处理</span></span><br><span class="line">                    presets: [</span><br><span class="line">                        <span class="string">'@babel/preset-env'</span>, <span class="comment">// 基本预设</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            useBuiltIns: <span class="string">'usage'</span>, <span class="comment">//按需加载</span></span><br><span class="line">                            corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;, <span class="comment">// 指定core-js版本</span></span><br><span class="line">                            targets: &#123; <span class="comment">// 指定兼容到什么版本的浏览器</span></span><br><span class="line">                                chrome: <span class="string">'60'</span>,</span><br><span class="line">                                firefox: <span class="string">'50'</span>,</span><br><span class="line">                                ie: <span class="string">'9'</span>,</span><br><span class="line">                                safari: <span class="string">'10'</span>,</span><br><span class="line">                                edge: <span class="string">'17'</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 图片处理</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                    esModule: <span class="literal">false</span>, <span class="comment">// 关闭url-loader默认使用的es6模块化解析</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// html中的图片处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理其他文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">            filename: <span class="string">'css/built.css'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 压缩css</span></span><br><span class="line">        <span class="keyword">new</span> OptimiziCssAssetsWebpackPlugin(),</span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin：html文件的打包和压缩处理</span></span><br><span class="line">        <span class="comment">// 通过这个插件会自动将单独打包的样式文件通过link标签引入</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            <span class="comment">// 压缩html代码</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                <span class="comment">// 移除空格</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 移除注释</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h3 id="五、Webpack-优化配置"><a href="#五、Webpack-优化配置" class="headerlink" title="五、Webpack 优化配置"></a>五、Webpack 优化配置</h3><p>5.1 开发环境性能优化<br>5.1.1 HMR（模块热替换）<br>HMR: hot module replacement 热模块替换 / 模块热替换<br>作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度<br>代码：只需要在 devServer 中设置 hot 为 true，就会自动开启HMR功能（只能在开发模式下使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">  open: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  <span class="comment">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span></span><br><span class="line">  hot: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种文件实现热模块替换的情况：<br>•    样式文件：可以使用HMR功能，因为开发环境下使用的 style-loader 内部默认实现了热模块替换功能<br>•    js 文件：默认不能使用HMR功能（修改一个 js 模块所有 js 模块都会刷新）<br>–&gt; 实现 HMR 需要修改 js 代码（添加支持 HMR 功能的代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 方法会监听 print.js 文件的变化，一旦发生变化，只有这个模块会重新打包构建，其他模块不会。</span></span><br><span class="line">    <span class="comment">// 会执行后面的回调函数</span></span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。<br>•    html 文件: 默认不能使用 HMR 功能（html 不用做 HMR 功能，因为只有一个 html 文件，不需要再优化）<br>使用 HMR 会导致问题：html 文件不能热更新了（不会自动打包构建）<br>解决：修改 entry 入口，将 html 文件引入（这样 html 修改整体刷新）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>]</span><br></pre></td></tr></table></figure><p>5.1.2 source-map<br>source-map：一种提供源代码到构建后代码的映射的技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）<br>参数：[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map<br>在webpack.config.js中加入代码：<br>devtool: ‘eval-source-map’<br>可选方案：[生成source-map的位置|给出的错误代码信息]<br>•    source-map：外部，错误代码准确信息 和 源代码的错误位置<br>•    inline-source-map：内联，只生成一个内联 source-map，错误代码准确信息 和 源代码的错误位置<br>•    hidden-source-map：外部，错误代码错误原因，但是没有错误位置（为了隐藏源代码），不能追踪源代码错误，只能提示到构建后代码的错误位置<br>•    eval-source-map：内联，每一个文件都生成对应的 source-map，都在 eval 中，错误代码准确信息 和 源代码的错误位<br>•    nosources-source-map：外部，错误代码准确信息，但是没有任何源代码信息（为了隐藏源代码）<br>•    cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置，只能把错误精确到整行，忽略列<br>•    cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module 会加入 loader 的 source-map<br>内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快<br>开发/生产环境可做的选择：<br>开发环境：需要考虑速度快，调试更友好<br>•    速度快( eval &gt; inline &gt; cheap &gt;… )<br>i.    eval-cheap-souce-map<br>ii.    eval-source-map<br>•    调试更友好<br>i.    souce-map<br>ii.    cheap-module-souce-map<br>iii.    cheap-souce-map<br>最终得出最好的两种方案 –&gt; eval-source-map（完整度高，内联速度快） / eval-cheap-module-souce-map（错误提示忽略列但是包含其他信息，内联速度快）<br>生产环境：需要考虑源代码要不要隐藏，调试要不要更友好<br>•    内联会让代码体积变大，所以在生产环境不用内联<br>•    隐藏源代码<br>i.    nosources-source-map 全部隐藏<br>ii.    hidden-source-map 只隐藏源代码，会提示构建后代码错误信息<br>最终得出最好的两种方案 –&gt; source-map（最完整） / cheap-module-souce-map（错误提示一整行忽略列）</p><p>5.2 生产环境性能优化<br>5.2.1 优化打包构建速度<br>5.2.1.1 oneOf<br>oneOf：匹配到 loader 后就不再向后进行匹配，优化生产环境的打包构建速度<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// js 语法检查</span></span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// 优先执行</span></span><br><span class="line">      enforce: <span class="string">'pre'</span>,</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        fix: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// oneOf 优化生产环境的打包构建速度</span></span><br><span class="line">      <span class="comment">// 以下loader只会匹配一个（匹配到了后就不会再往下匹配了）</span></span><br><span class="line">      <span class="comment">// 注意：不能有两个配置处理同一种类型文件（所以把eslint-loader提取出去放外面）</span></span><br><span class="line">      oneOf: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: [...commonCssLoader]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// js 兼容性处理</span></span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [</span><br><span class="line">              [</span><br><span class="line">                <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                  corejs: &#123;<span class="attr">version</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                  targets: &#123;</span><br><span class="line">                    chrome: <span class="string">'60'</span>,</span><br><span class="line">                    firefox: <span class="string">'50'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">            name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">            outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">            esModule: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">          loader: <span class="string">'html-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            outputPath: <span class="string">'media'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.2 babel 缓存<br>babel 缓存：类似 HMR，将 babel 处理后的资源缓存起来（哪里的 js 改变就更新哪里，其他 js 还是用之前缓存的资源），让第二次打包构建速度更快。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">          corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">'60'</span>,</span><br><span class="line">            firefox: <span class="string">'50'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开启babel缓存</span></span><br><span class="line">    <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>文件资源缓存<br>文件名不变，就不会重新请求，而是再次用之前缓存的资源<br>1.hash: 每次 wepack 打包时会生成一个唯一的 hash 值。<br> 问题：重新打包，所有文件的 hsah 值都改变，会导致所有缓存失效。（可能只改动了一个文件）<br>2.chunkhash：根据 chunk 生成的 hash 值。来源于同一个 chunk的 hash 值一样<br> 问题：js 和 css 来自同一个chunk，hash 值是一样的（因为 css-loader 会将 css 文件加载到 js 中，所以同属于一个chunk）<br>3.contenthash: 根据文件的内容生成 hash 值。不同文件 hash 值一定不一样(文件内容修改，文件名里的 hash 才会改变)<br>修改 css 文件内容，打包后的 css 文件名 hash 值就改变，而 js 文件没有改变 hash 值就不变，这样 css 和 js 缓存就会分开判断要不要重新请求资源 –&gt; 让代码上线运行缓存更好使用<br>5.2.1.3 多进程打包<br>多进程打包：某个任务消耗时间较长会卡顿，多进程可以同一时间干多件事，效率更高。<br>优点是提升打包速度，缺点是每个进程的开启和交流都会有开销（babel-loader消耗时间最久，所以使用thread-loader针对其进行优化）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">      thread-loader会对其后面的loader（这里是babel-loader）开启多进程打包。 </span></span><br><span class="line"><span class="comment">      进程启动大概为600ms，进程通信也有开销。(启动的开销比较昂贵，不要滥用)</span></span><br><span class="line"><span class="comment">      只有工作消耗时间比较长，才需要多进程打包</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'thread-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        workers: <span class="number">2</span> <span class="comment">// 进程2个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        presets: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">              corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">              targets: &#123;</span><br><span class="line">                chrome: <span class="string">'60'</span>,</span><br><span class="line">                firefox: <span class="string">'50'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 开启babel缓存</span></span><br><span class="line">        <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">        cacheDirectory: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.4 externals<br>externals：让某些库不打包，通过 cdn 引入<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="comment">// 拒绝jQuery被打包进来(通过cdn引入，速度会快一些)</span></span><br><span class="line">  <span class="comment">// 忽略的库名 -- npm包名</span></span><br><span class="line">  jquery: <span class="string">'jQuery'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在 index.html 中通过 cdn 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.2.1.5 dll<br>dll：让某些库单独打包，后直接引入到 build 中。可以在 code split 分割出 node_modules 后再用 dll 更细的分割，优化代码运行的性能。<br>webpack.dll.js 配置如下：(将 jquery 单独打包)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  node_modules的库会打包到一起，但是很多库的时候打包输出的js文件就太大了</span></span><br><span class="line"><span class="comment">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span></span><br><span class="line"><span class="comment">  当运行webpack时，默认查找webpack.config.js配置文件</span></span><br><span class="line"><span class="comment">  需求：需要运行webpack.dll.js文件</span></span><br><span class="line"><span class="comment">    --&gt; webpack --config webpack.dll.js（配置后先运行这个指令表示以这个配置文件打包）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name] --&gt; jquery</span></span><br><span class="line">    <span class="comment">// ['jquery] --&gt; 要打包的库是jquery</span></span><br><span class="line">    jquery: [<span class="string">'jquery'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出出口指定</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// name就是jquery</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'dll'</span>), <span class="comment">// 打包到dll目录下</span></span><br><span class="line">    library: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个manifest.json --&gt; 提供jquery的映射关系（告诉webpack：jquery之后不需要再打包和暴露内容的名称）</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">'dll/manifest.json'</span>) <span class="comment">// 输出文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br><span class="line">webpack.config.js 配置：(告诉 webpack 不需要再打包 jquery，并将之前打包好的 jquery 跟其他打包好的资源一同输出到 build 目录下)</span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中配置：</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'./src/index.html'</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: resolve(__dirname, <span class="string">'dll/manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 将某个文件打包输出到build目录下，并在html中自动引入该资源</span></span><br><span class="line">  <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">    filepath: resolve(__dirname, <span class="string">'dll/jquery.js'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>5.2.2 优化代码运行的性能<br>5.2.2.1 缓存<br>5.2.2.2 tree shaking（树摇）<br>tree shaking：去除无用代码<br>前提：1. 必须使用 ES6 模块化 2. 开启 production 环境 （这样就自动会把无用代码去掉）<br>作用：减少代码体积<br>在 package.json 中配置：<br>“sideEffects”: false 表示所有代码都没有副作用（都可以进行 tree shaking）<br>这样会导致的问题：可能会把 css / @babel/polyfill 文件干掉（副作用）<br>所以可以配置：”sideEffects”: [“<em>.css”, “</em>.less”] 不会对css/less文件tree shaking处理<br>5.2.2.3 code split（代码分割）<br>代码分割。将打包输出的一个大的 bundle.js 文件拆分成多个小文件，这样可以并行加载多个文件，比加载一个文件更快。<br>1.多入口拆分（几个入口就拆分几个文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    <span class="comment">// 多入口：有一个入口，最终输出就有一个bundle</span></span><br><span class="line">    index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    test: <span class="string">'./src/js/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// [name]：取文件名</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">2.</span>optimization：（多入口，单入口都可搭配使用）</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>•    将 node_modules 中的代码单独打包（大小超过30kb）（如果有多个node_modules的库会打包到一起，可以用dll再细分）<br>•    自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk(比如两个模块中都引入了jquery会被打包成单独的文件)（大小超过30kb）<br>3.import 动态导入语法：<br>/*<br>  通过js代码，让某个文件被单独打包成一个chunk<br>  import动态导入语法：能将某个文件单独打包(test文件不会和index打包在同一个文件而是单独打包)<br>  webpackChunkName:指定test单独打包后文件的名字<br>在index.js中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test' */</span><span class="string">'./test'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; mul, count &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 文件加载成功~</span></span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件加载失败~'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>5.2.2.4 lazy loading（懒加载/预加载）<br>1.懒加载：当文件需要使用时才加载（需要代码分割）。但是如果资源较大，加载时间就会较长，有延迟。<br>2.正常加载：可以认为是并行加载（同一时间加载多个文件）没有先后顺序，先加载了不需要的资源就会浪费时间。<br>3.预加载 prefetch（兼容性很差）：会在使用之前，提前加载。等其他资源加载完毕，浏览器空闲了，再偷偷加载这个资源。这样在使用时已经加载好了，速度很快。所以在懒加载的基础上加上预加载会更好。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将import的内容放在异步回调函数中使用，点击按钮，test.js才会被加载(不会重复加载)</span></span><br><span class="line">  <span class="comment">// webpackPrefetch: true表示开启预加载</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test', webpackPrefetch: true */</span><span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.2.2.5 pwa（离线可访问技术）<br>pwa：离线可访问技术（渐进式网络开发应用程序），使用 serviceworker 和 workbox 技术。优点是离线也能访问，缺点是兼容性差。<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>); <span class="comment">// 引入插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中加入：</span></span><br><span class="line"><span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">    2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    生成一个 serviceworker 配置文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  clientsClaim: <span class="literal">true</span>,</span><br><span class="line">  skipWaiting: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">index.js 中还需要写一段代码来激活它的使用：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. eslint不认识 window、navigator全局变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    解决：需要修改package.json中eslintConfig配置</span></span><br><span class="line"><span class="comment">    "env": &#123;</span></span><br><span class="line"><span class="comment">      "browser": true // 支持浏览器端全局变量</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2. sw代码必须运行在服务器上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt; nodejs</span></span><br><span class="line"><span class="comment">    或--&gt;</span></span><br><span class="line"><span class="comment">      npm i serve -g</span></span><br><span class="line"><span class="comment">      serve -s build 启动服务器，将打包输出的build目录下所有资源作为静态资源暴露出去</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123; <span class="comment">// 处理兼容性问题</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/service-worker.js'</span>) <span class="comment">// 注册serviceWorker</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册成功了~'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册失败了~'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、Webpack-配置详情"><a href="#六、Webpack-配置详情" class="headerlink" title="六、Webpack 配置详情"></a>六、Webpack 配置详情</h3><p>6.1 entry<br>entry: 入口起点</p><ol><li><p>string –&gt; ‘./src/index.js’，单入口<br>打包形成一个 chunk。 输出一个 bundle 文件。此时 chunk 的名称默认是 main</p></li><li><p>array –&gt; [‘./src/index.js’, ‘./src/add.js’]，多入口<br>所有入口文件最终只会形成一个 chunk，输出出去只有一个 bundle 文件。<br>（一般只用在 HMR 功能中让 html 热更新生效）</p></li><li><p>object，多入口<br>有几个入口文件就形成几个 chunk，输出几个 bundle 文件，此时 chunk 的名称是 key 值</p></li></ol><p>–&gt; 特殊用法：</p><ol start="4"><li><p>entry</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"><span class="comment">// 最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line">index: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/count.js'</span>], </span><br><span class="line"><span class="comment">// 形成一个chunk，输出一个bundle文件。</span></span><br><span class="line">add: <span class="string">'./src/add.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   6.2 output</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">     filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">        <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">     path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">       <span class="comment">// 所有资源引入公共路径前缀 --&gt; 'imgs/a.jpg' --&gt; '/imgs/a.jpg'</span></span><br><span class="line">     publicPath: <span class="string">'/'</span>,</span><br><span class="line">     chunkFilename: <span class="string">'js/[name]_chunk.js'</span>, <span class="comment">// 指定非入口chunk的名称</span></span><br><span class="line">     library: <span class="string">'[name]'</span>, <span class="comment">// 打包整个库后向外暴露的变量名</span></span><br><span class="line">     libraryTarget: <span class="string">'window'</span> <span class="comment">// 变量名添加到哪个上 browser：window</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'global' // node：global</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'commonjs' // conmmonjs模块 exports</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.3 module</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        <span class="comment">// loader的配置</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// 多个loader用use</span></span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            <span class="comment">// 只检查src下的js文件</span></span><br><span class="line">            include: resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">            enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">            <span class="comment">// enforce: 'post', // 延后执行</span></span><br><span class="line">            <span class="comment">// 单个loader用loader</span></span><br><span class="line">            loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">            options: &#123;&#125; <span class="comment">// 指定配置选项</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">            oneOf: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.4 resolve</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析模块的规则</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">// 配置解析模块路径别名: 优点：当目录层级很复杂时，简写路径；缺点：路径不会提示</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">        $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名（引入时就可以不写文件后缀名了）</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">        <span class="comment">// 告诉 webpack 解析模块应该去找哪个目录</span></span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这样配置后，引入文件就可以这样简写：import ‘$css/index’;<br>   6.5 dev server</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="comment">// 运行代码所在的目录</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 监视contentBase目录下的所有文件，一旦文件变化就会reload</span></span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 忽略文件</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">5000</span>,</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启HMR功能</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    <span class="comment">// 除了一些基本信息外，其他内容都不要显示</span></span><br><span class="line">    quiet: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果出错了，不要全屏提示</span></span><br><span class="line">    overlay: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 服务器代理，--&gt; 解决开发环境跨域问题</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">    <span class="comment">// 一旦devServer(5000)服务器接收到/api/xxx的请求，就会把请求转发到另外一个服务器3000</span></span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">      <span class="comment">// 发送请求时，请求路径重写：将/api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>   其中，跨域问题：同源策略中不同的协议、端口号、域名就会产生跨域。<br>   正常的浏览器和服务器之间有跨域，但是服务器之间没有跨域。代码通过代理服务器运行，所以浏览器和代理服务器之间没有跨域，浏览器把请求发送到代理服务器上，代理服务器替你转发到另外一个服务器上，服务器之间没有跨域，所以请求成功。代理服务器再把接收到的响应响应给浏览器。这样就解决开发环境下的跨域问题。<br>   6.6 optimization<br>   contenthash 缓存会导致一个问题：修改 a 文件导致 b 文件 contenthash 变化。<br>   因为在 index.js 中引入 a.js，打包后 index.js 中记录了 a.js 的 hash 值，而 a.js 改变，其重新打包后的 hash 改变，导致 index.js 文件内容中记录的 a.js 的 hash 也改变，从而重新打包后 index.js 的 hash 值也会变，这样就会使缓存失效。（改变的是a.js文件但是 index.js 文件的 hash 值也改变了）<br>   解决办法：runtimeChunk –&gt; 将当前模块记录其他模块的 hash 单独打包为一个文件 runtime，这样 a.js 的 hash 改变只会影响 runtime 文件，不会影响到 index.js 文件</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">            chunkFilename: <span class="string">'js/[name].[contenthash:10]_chunk.js'</span> <span class="comment">// 指定非入口文件的其他chunk的名字加_chunk</span></span><br><span class="line">&#125;,</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">/* 以下都是splitChunks默认配置，可以不写</span></span><br><span class="line"><span class="comment">    miniSize: 30 * 1024, // 分割的chunk最小为30kb（大于30kb的才分割）</span></span><br><span class="line"><span class="comment">    maxSize: 0, // 最大没有限制</span></span><br><span class="line"><span class="comment">    minChunks: 1, // 要提取的chunk最少被引用1次</span></span><br><span class="line"><span class="comment">    maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量为5</span></span><br><span class="line"><span class="comment">    maxInitialRequests: 3, // 入口js文件最大并行请求数量</span></span><br><span class="line"><span class="comment">    automaticNameDelimiter: '~', // 名称连接符</span></span><br><span class="line"><span class="comment">    name: true, // 可以使用命名规则</span></span><br><span class="line"><span class="comment">    cacheGroups: &#123; // 分割chunk的组</span></span><br><span class="line"><span class="comment">      vendors: &#123;</span></span><br><span class="line"><span class="comment">        // node_modules中的文件会被打包到vendors组的chunk中，--&gt; vendors~xxx.js</span></span><br><span class="line"><span class="comment">        // 满足上面的公共规则，大小超过30kb、至少被引用一次</span></span><br><span class="line"><span class="comment">        test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -10</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      default: &#123;</span></span><br><span class="line"><span class="comment">        // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">        minChunks: 2,</span></span><br><span class="line"><span class="comment">        prority: -20,</span></span><br><span class="line"><span class="comment">        // 如果当前要打包的模块和之前已经被提取的模块是同一个，就会复用，而不是重新打包</span></span><br><span class="line"><span class="comment">        reuseExistingChunk: true</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将index.js记录的a.js的hash值单独打包到runtime文件中</span></span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [</span><br><span class="line">        <span class="comment">// 配置生产环境的压缩方案：js/css</span></span><br><span class="line">        <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 开启缓存</span></span><br><span class="line">            cache: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 开启多进程打包</span></span><br><span class="line">            parallel: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 启用sourceMap(否则会被压缩掉)</span></span><br><span class="line">            sourceMap: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、Webpack5-介绍和使用"><a href="#七、Webpack5-介绍和使用" class="headerlink" title="七、Webpack5 介绍和使用"></a>七、Webpack5 介绍和使用</h3><p>   此版本重点关注以下内容:<br>   •    通过持久缓存提高构建性能.<br>   •    使用更好的算法和默认值来改善长期缓存.<br>   •    通过更好的树摇和代码生成来改善捆绑包大小.<br>   •    清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.<br>   •    通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</p><p>   下载<br>   npm i webpack@next webpack-cli -D<br>   自动删除 Node.js Polyfills<br>   早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。<br>   尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。<br>   webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。<br>   迁移：<br>   •    尽可能尝试使用与前端兼容的模块。<br>   •    可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。<br>   Chunk 和模块 ID<br>   添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。<br>   chunkIds: “deterministic”, moduleIds: “deterministic”<br>   Chunk ID<br>   你可以不用使用 import(/* webpackChunkName: “name” */ “module”) 在开发环境来为 chunk 命名，生产环境还是有必要的<br>   webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了<br>   Tree Shaking</p><ol start="5"><li><p>webpack 现在能够处理对嵌套模块的 tree shaking</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">'./inner'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure></li></ol><p>   在生产环境中, inner 模块暴露的 b 会被删除</p><ol start="2"><li><p>webpack 现在能够多个模块之前的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'./something'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   当设置了”sideEffects”: false时，一旦发现test方法没有使用，不但删除test，还会删除”./something”</p><ol start="3"><li><p>webpack 现在能处理对 Commonjs 的 tree shaking<br>Output<br>webpack 4 默认只能输出 ES5 代码<br>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.<br>如：output.ecmaVersion: 2015<br>SplitChunk</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br><span class="line"><span class="comment">// webpack5</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">    javascript: <span class="number">30000</span>,</span><br><span class="line">    style: <span class="number">50000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    Caching</span><br><span class="line">    <span class="comment">// 配置缓存</span></span><br><span class="line">    cache: &#123;</span><br><span class="line">    <span class="comment">// 磁盘存储</span></span><br><span class="line">    type: <span class="string">"filesystem"</span>,</span><br><span class="line">    buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存将存储到 node_modules/.cache/webpack<br>监视输出文件<br>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。<br>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。<br>默认值<br>•    entry: “./src/index.js<br>•    output.path: path.resolve(__dirname, “dist”)<br>•    output.filename: “[name].js”</p></li></ol><h3 id="npm-install-S-D-g-有什么区别"><a href="#npm-install-S-D-g-有什么区别" class="headerlink" title="npm install -S -D -g 有什么区别"></a>npm install -S -D -g 有什么区别</h3><p>npm install module_name -S    即    npm install module_name –save    写入dependencies</p><p>npm install module_name -D    即    npm install module_name –save-dev 写入devDependencies</p><p>npm install module_name -g 全局安装(命令行使用)</p><p>npm install module_name 本地安装(将安装包放在 ./node_modules 下)</p><h3 id="dependencies与devDependencies有什么区别呢？"><a href="#dependencies与devDependencies有什么区别呢？" class="headerlink" title="dependencies与devDependencies有什么区别呢？"></a>dependencies与devDependencies有什么区别呢？</h3><ul><li><p>devDependencies 里面的插件只用于开发环境，不用于生产环境</p></li><li><p>dependencies 是需要发布到生产环境的</p></li></ul><p>举个例子：</p><ul><li><p>开发一个前端项目，在项目中你需要使用gulp构建你的开发和本地运行环境,这时你就要放到dependencies里。gulp是你用来压缩代码，打包等需要的工具，程序实际运行的时候并不需要，所以放到dev里就ok了。</p></li><li><p>写程序要用element-ui,生产环境运行项目时肯定要用到element-ui,这时element-ui就应该安装到dependencies中去。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、Webpack-简介&quot;&gt;&lt;a href=&quot;#一、Webpack-简介&quot; class=&quot;headerlink&quot; title=&quot;一、Webpack 简介&quot;&gt;&lt;/a&gt;一、Webpack 简介&lt;/h3&gt;&lt;p&gt;–1.1 webpack 是什么？&lt;br&gt;webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。&lt;br&gt;在webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。&lt;br&gt;它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-配置详情</title>
    <link href="http://yoursite.com/2020/09/22/Webpack_Note-%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/22/Webpack_Note-%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2021-01-08T04:22:09.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-配置详情"><a href="#Webpack-配置详情" class="headerlink" title="Webpack 配置详情"></a>Webpack 配置详情</h3><p>6.1 entry<br>entry: 入口起点</p><ol><li><p>string –&gt; ‘./src/index.js’，单入口<br>打包形成一个 chunk。 输出一个 bundle 文件。此时 chunk 的名称默认是 main</p><a id="more"></a></li><li><p>array –&gt; [‘./src/index.js’, ‘./src/add.js’]，多入口<br>所有入口文件最终只会形成一个 chunk，输出出去只有一个 bundle 文件。<br>（一般只用在 HMR 功能中让 html 热更新生效）</p></li><li><p>object，多入口<br>有几个入口文件就形成几个 chunk，输出几个 bundle 文件，此时 chunk 的名称是 key 值<br>–&gt; 特殊用法：</p></li><li><p>entry</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"><span class="comment">// 最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line">index: [<span class="string">'./src/index.js'</span>, <span class="string">'./src/count.js'</span>], </span><br><span class="line"><span class="comment">// 形成一个chunk，输出一个bundle文件。</span></span><br><span class="line">add: <span class="string">'./src/add.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   6.2 output</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">     filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">        <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">     path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">       <span class="comment">// 所有资源引入公共路径前缀 --&gt; 'imgs/a.jpg' --&gt; '/imgs/a.jpg'</span></span><br><span class="line">     publicPath: <span class="string">'/'</span>,</span><br><span class="line">     chunkFilename: <span class="string">'js/[name]_chunk.js'</span>, <span class="comment">// 指定非入口chunk的名称</span></span><br><span class="line">     library: <span class="string">'[name]'</span>, <span class="comment">// 打包整个库后向外暴露的变量名</span></span><br><span class="line">     libraryTarget: <span class="string">'window'</span> <span class="comment">// 变量名添加到哪个上 browser：window</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'global' // node：global</span></span><br><span class="line">    <span class="comment">// libraryTarget: 'commonjs' // conmmonjs模块 exports</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.3 module</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        <span class="comment">// loader的配置</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// 多个loader用use</span></span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            <span class="comment">// 只检查src下的js文件</span></span><br><span class="line">            include: resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">            enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">            <span class="comment">// enforce: 'post', // 延后执行</span></span><br><span class="line">            <span class="comment">// 单个loader用loader</span></span><br><span class="line">            loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">            options: &#123;&#125; <span class="comment">// 指定配置选项</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">            oneOf: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>   6.4 resolve</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析模块的规则</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">// 配置解析模块路径别名: 优点：当目录层级很复杂时，简写路径；缺点：路径不会提示</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">        $css: resolve(__dirname, <span class="string">'src/css'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名（引入时就可以不写文件后缀名了）</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>],</span><br><span class="line">        <span class="comment">// 告诉 webpack 解析模块应该去找哪个目录</span></span><br><span class="line">    modules: [resolve(__dirname, <span class="string">'../../node_modules'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这样配置后，引入文件就可以这样简写：import ‘$css/index’;<br>   6.5 dev server</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="comment">// 运行代码所在的目录</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    <span class="comment">// 监视contentBase目录下的所有文件，一旦文件变化就会reload</span></span><br><span class="line">    watchContentBase: <span class="literal">true</span>,</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 忽略文件</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">5000</span>,</span><br><span class="line">    <span class="comment">// 域名</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 开启HMR功能</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    <span class="comment">// 除了一些基本信息外，其他内容都不要显示</span></span><br><span class="line">    quiet: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果出错了，不要全屏提示</span></span><br><span class="line">    overlay: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 服务器代理，--&gt; 解决开发环境跨域问题</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">    <span class="comment">// 一旦devServer(5000)服务器接收到/api/xxx的请求，就会把请求转发到另外一个服务器3000</span></span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">      <span class="comment">// 发送请求时，请求路径重写：将/api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>   其中，跨域问题：同源策略中不同的协议、端口号、域名就会产生跨域。<br>   正常的浏览器和服务器之间有跨域，但是服务器之间没有跨域。代码通过代理服务器运行，所以浏览器和代理服务器之间没有跨域，浏览器把请求发送到代理服务器上，代理服务器替你转发到另外一个服务器上，服务器之间没有跨域，所以请求成功。代理服务器再把接收到的响应响应给浏览器。这样就解决开发环境下的跨域问题。<br>   6.6 optimization<br>   contenthash 缓存会导致一个问题：修改 a 文件导致 b 文件 contenthash 变化。<br>   因为在 index.js 中引入 a.js，打包后 index.js 中记录了 a.js 的 hash 值，而 a.js 改变，其重新打包后的 hash 改变，导致 index.js 文件内容中记录的 a.js 的 hash 也改变，从而重新打包后 index.js 的 hash 值也会变，这样就会使缓存失效。（改变的是a.js文件但是 index.js 文件的 hash 值也改变了）<br>   解决办法：runtimeChunk –&gt; 将当前模块记录其他模块的 hash 单独打包为一个文件 runtime，这样 a.js 的 hash 改变只会影响 runtime 文件，不会影响到 index.js 文件</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">            chunkFilename: <span class="string">'js/[name].[contenthash:10]_chunk.js'</span> <span class="comment">// 指定非入口文件的其他chunk的名字加_chunk</span></span><br><span class="line">&#125;,</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">/* 以下都是splitChunks默认配置，可以不写</span></span><br><span class="line"><span class="comment">    miniSize: 30 * 1024, // 分割的chunk最小为30kb（大于30kb的才分割）</span></span><br><span class="line"><span class="comment">    maxSize: 0, // 最大没有限制</span></span><br><span class="line"><span class="comment">    minChunks: 1, // 要提取的chunk最少被引用1次</span></span><br><span class="line"><span class="comment">    maxAsyncRequests: 5, // 按需加载时并行加载的文件的最大数量为5</span></span><br><span class="line"><span class="comment">    maxInitialRequests: 3, // 入口js文件最大并行请求数量</span></span><br><span class="line"><span class="comment">    automaticNameDelimiter: '~', // 名称连接符</span></span><br><span class="line"><span class="comment">    name: true, // 可以使用命名规则</span></span><br><span class="line"><span class="comment">    cacheGroups: &#123; // 分割chunk的组</span></span><br><span class="line"><span class="comment">      vendors: &#123;</span></span><br><span class="line"><span class="comment">        // node_modules中的文件会被打包到vendors组的chunk中，--&gt; vendors~xxx.js</span></span><br><span class="line"><span class="comment">        // 满足上面的公共规则，大小超过30kb、至少被引用一次</span></span><br><span class="line"><span class="comment">        test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -10</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      default: &#123;</span></span><br><span class="line"><span class="comment">        // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">        minChunks: 2,</span></span><br><span class="line"><span class="comment">        prority: -20,</span></span><br><span class="line"><span class="comment">        // 如果当前要打包的模块和之前已经被提取的模块是同一个，就会复用，而不是重新打包</span></span><br><span class="line"><span class="comment">        reuseExistingChunk: true</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将index.js记录的a.js的hash值单独打包到runtime文件中</span></span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">        name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [</span><br><span class="line">        <span class="comment">// 配置生产环境的压缩方案：js/css</span></span><br><span class="line">        <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 开启缓存</span></span><br><span class="line">            cache: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 开启多进程打包</span></span><br><span class="line">            parallel: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 启用sourceMap(否则会被压缩掉)</span></span><br><span class="line">            sourceMap: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Webpack5-介绍和使用"><a href="#Webpack5-介绍和使用" class="headerlink" title="Webpack5 介绍和使用"></a>Webpack5 介绍和使用</h3><p>   此版本重点关注以下内容:<br>   •    通过持久缓存提高构建性能.<br>   •    使用更好的算法和默认值来改善长期缓存.<br>   •    通过更好的树摇和代码生成来改善捆绑包大小.<br>   •    清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.<br>   •    通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</p><p>   下载<br>   npm i webpack@next webpack-cli -D<br>   自动删除 Node.js Polyfills<br>   早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。<br>   尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。<br>   webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。<br>   迁移：<br>   •    尽可能尝试使用与前端兼容的模块。<br>   •    可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。<br>   Chunk 和模块 ID<br>   添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。<br>   chunkIds: “deterministic”, moduleIds: “deterministic”<br>   Chunk ID<br>   你可以不用使用 import(/* webpackChunkName: “name” */ “module”) 在开发环境来为 chunk 命名，生产环境还是有必要的<br>   webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了<br>   Tree Shaking</p><ol start="5"><li><p>webpack 现在能够处理对嵌套模块的 tree shaking</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">'./inner'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure></li></ol><p>   在生产环境中, inner 模块暴露的 b 会被删除</p><ol start="2"><li><p>webpack 现在能够多个模块之前的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'./something'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   当设置了”sideEffects”: false时，一旦发现test方法没有使用，不但删除test，还会删除”./something”</p><ol start="3"><li><p>webpack 现在能处理对 Commonjs 的 tree shaking<br>Output<br>webpack 4 默认只能输出 ES5 代码<br>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.<br>如：output.ecmaVersion: 2015<br>SplitChunk</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br><span class="line"><span class="comment">// webpack5</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">    javascript: <span class="number">30000</span>,</span><br><span class="line">    style: <span class="number">50000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    Caching</span><br><span class="line">    <span class="comment">// 配置缓存</span></span><br><span class="line">    cache: &#123;</span><br><span class="line">    <span class="comment">// 磁盘存储</span></span><br><span class="line">    type: <span class="string">"filesystem"</span>,</span><br><span class="line">    buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存将存储到 node_modules/.cache/webpack<br>监视输出文件<br>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。<br>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。<br>默认值<br>•    entry: “./src/index.js<br>•    output.path: path.resolve(__dirname, “dist”)<br>•    output.filename: “[name].js”</p></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-配置详情&quot;&gt;&lt;a href=&quot;#Webpack-配置详情&quot; class=&quot;headerlink&quot; title=&quot;Webpack 配置详情&quot;&gt;&lt;/a&gt;Webpack 配置详情&lt;/h3&gt;&lt;p&gt;6.1 entry&lt;br&gt;entry: 入口起点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;string –&amp;gt; ‘./src/index.js’，单入口&lt;br&gt;打包形成一个 chunk。 输出一个 bundle 文件。此时 chunk 的名称默认是 main&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-优化配置</title>
    <link href="http://yoursite.com/2020/09/20/Webpack_Note-%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/20/Webpack_Note-%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2021-01-08T05:26:08.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-优化配置"><a href="#Webpack-优化配置" class="headerlink" title="Webpack 优化配置"></a>Webpack 优化配置</h3><p>5.1 开发环境性能优化<br>5.1.1 HMR（模块热替换）<br>HMR: hot module replacement 热模块替换 / 模块热替换<br>作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度</p><a id="more"></a><p>代码：只需要在 devServer 中设置 hot 为 true，就会自动开启HMR功能（只能在开发模式下使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  port: <span class="number">3000</span>,</span><br><span class="line">  open: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  <span class="comment">// 当修改了webpack配置，新配置要想生效，必须重启webpack服务</span></span><br><span class="line">  hot: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种文件实现热模块替换的情况：<br>•    样式文件：可以使用HMR功能，因为开发环境下使用的 style-loader 内部默认实现了热模块替换功能<br>•    js 文件：默认不能使用HMR功能（修改一个 js 模块所有 js 模块都会刷新）<br>–&gt; 实现 HMR 需要修改 js 代码（添加支持 HMR 功能的代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="comment">// 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span></span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 方法会监听 print.js 文件的变化，一旦发生变化，只有这个模块会重新打包构建，其他模块不会。</span></span><br><span class="line">    <span class="comment">// 会执行后面的回调函数</span></span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。<br>•    html 文件: 默认不能使用 HMR 功能（html 不用做 HMR 功能，因为只有一个 html 文件，不需要再优化）<br>使用 HMR 会导致问题：html 文件不能热更新了（不会自动打包构建）<br>解决：修改 entry 入口，将 html 文件引入（这样 html 修改整体刷新）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: [<span class="string">'./src/js/index.js'</span>, <span class="string">'./src/index.html'</span>]</span><br></pre></td></tr></table></figure><p>5.1.2 source-map<br>source-map：一种提供源代码到构建后代码的映射的技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）<br>参数：[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map<br>在webpack.config.js中加入代码：<br>devtool: ‘eval-source-map’<br>可选方案：[生成source-map的位置|给出的错误代码信息]<br>•    source-map：外部，错误代码准确信息 和 源代码的错误位置<br>•    inline-source-map：内联，只生成一个内联 source-map，错误代码准确信息 和 源代码的错误位置<br>•    hidden-source-map：外部，错误代码错误原因，但是没有错误位置（为了隐藏源代码），不能追踪源代码错误，只能提示到构建后代码的错误位置<br>•    eval-source-map：内联，每一个文件都生成对应的 source-map，都在 eval 中，错误代码准确信息 和 源代码的错误位<br>•    nosources-source-map：外部，错误代码准确信息，但是没有任何源代码信息（为了隐藏源代码）<br>•    cheap-source-map：外部，错误代码准确信息 和 源代码的错误位置，只能把错误精确到整行，忽略列<br>•    cheap-module-source-map：外部，错误代码准确信息 和 源代码的错误位置，module 会加入 loader 的 source-map<br>内联 和 外部的区别：1. 外部生成了文件，内联没有 2. 内联构建速度更快<br>开发/生产环境可做的选择：<br>开发环境：需要考虑速度快，调试更友好<br>•    速度快( eval &gt; inline &gt; cheap &gt;… )<br>i.    eval-cheap-souce-map<br>ii.    eval-source-map<br>•    调试更友好<br>i.    souce-map<br>ii.    cheap-module-souce-map<br>iii.    cheap-souce-map<br>最终得出最好的两种方案 –&gt; eval-source-map（完整度高，内联速度快） / eval-cheap-module-souce-map（错误提示忽略列但是包含其他信息，内联速度快）<br>生产环境：需要考虑源代码要不要隐藏，调试要不要更友好<br>•    内联会让代码体积变大，所以在生产环境不用内联<br>•    隐藏源代码<br>i.    nosources-source-map 全部隐藏<br>ii.    hidden-source-map 只隐藏源代码，会提示构建后代码错误信息<br>最终得出最好的两种方案 –&gt; source-map（最完整） / cheap-module-souce-map（错误提示一整行忽略列）</p><p>5.2 生产环境性能优化<br>5.2.1 优化打包构建速度<br>5.2.1.1 oneOf<br>oneOf：匹配到 loader 后就不再向后进行匹配，优化生产环境的打包构建速度<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// js 语法检查</span></span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// 优先执行</span></span><br><span class="line">      enforce: <span class="string">'pre'</span>,</span><br><span class="line">      loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        fix: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// oneOf 优化生产环境的打包构建速度</span></span><br><span class="line">      <span class="comment">// 以下loader只会匹配一个（匹配到了后就不会再往下匹配了）</span></span><br><span class="line">      <span class="comment">// 注意：不能有两个配置处理同一种类型文件（所以把eslint-loader提取出去放外面）</span></span><br><span class="line">      oneOf: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: [...commonCssLoader]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">          use: [...commonCssLoader, <span class="string">'less-loader'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// js 兼容性处理</span></span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [</span><br><span class="line">              [</span><br><span class="line">                <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">                  corejs: &#123;<span class="attr">version</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                  targets: &#123;</span><br><span class="line">                    chrome: <span class="string">'60'</span>,</span><br><span class="line">                    firefox: <span class="string">'50'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">            name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">            outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">            esModule: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">          loader: <span class="string">'html-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            outputPath: <span class="string">'media'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.2 babel 缓存<br>babel 缓存：类似 HMR，将 babel 处理后的资源缓存起来（哪里的 js 改变就更新哪里，其他 js 还是用之前缓存的资源），让第二次打包构建速度更快。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">          corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">'60'</span>,</span><br><span class="line">            firefox: <span class="string">'50'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开启babel缓存</span></span><br><span class="line">    <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>文件资源缓存<br>文件名不变，就不会重新请求，而是再次用之前缓存的资源<br>1.hash: 每次 wepack 打包时会生成一个唯一的 hash 值。<br> 问题：重新打包，所有文件的 hsah 值都改变，会导致所有缓存失效。（可能只改动了一个文件）<br>2.chunkhash：根据 chunk 生成的 hash 值。来源于同一个 chunk的 hash 值一样<br> 问题：js 和 css 来自同一个chunk，hash 值是一样的（因为 css-loader 会将 css 文件加载到 js 中，所以同属于一个chunk）<br>3.contenthash: 根据文件的内容生成 hash 值。不同文件 hash 值一定不一样(文件内容修改，文件名里的 hash 才会改变)<br>修改 css 文件内容，打包后的 css 文件名 hash 值就改变，而 js 文件没有改变 hash 值就不变，这样 css 和 js 缓存就会分开判断要不要重新请求资源 –&gt; 让代码上线运行缓存更好使用<br>5.2.1.3 多进程打包<br>多进程打包：某个任务消耗时间较长会卡顿，多进程可以同一时间干多件事，效率更高。<br>优点是提升打包速度，缺点是每个进程的开启和交流都会有开销（babel-loader消耗时间最久，所以使用thread-loader针对其进行优化）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">      thread-loader会对其后面的loader（这里是babel-loader）开启多进程打包。 </span></span><br><span class="line"><span class="comment">      进程启动大概为600ms，进程通信也有开销。(启动的开销比较昂贵，不要滥用)</span></span><br><span class="line"><span class="comment">      只有工作消耗时间比较长，才需要多进程打包</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'thread-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        workers: <span class="number">2</span> <span class="comment">// 进程2个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        presets: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              useBuiltIns: <span class="string">'usage'</span>,</span><br><span class="line">              corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">              targets: &#123;</span><br><span class="line">                chrome: <span class="string">'60'</span>,</span><br><span class="line">                firefox: <span class="string">'50'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 开启babel缓存</span></span><br><span class="line">        <span class="comment">// 第二次构建时，会读取之前的缓存</span></span><br><span class="line">        cacheDirectory: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.2.1.4 externals<br>externals：让某些库不打包，通过 cdn 引入<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="comment">// 拒绝jQuery被打包进来(通过cdn引入，速度会快一些)</span></span><br><span class="line">  <span class="comment">// 忽略的库名 -- npm包名</span></span><br><span class="line">  jquery: <span class="string">'jQuery'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在 index.html 中通过 cdn 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.2.1.5 dll<br>dll：让某些库单独打包，后直接引入到 build 中。可以在 code split 分割出 node_modules 后再用 dll 更细的分割，优化代码运行的性能。<br>webpack.dll.js 配置如下：(将 jquery 单独打包)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  node_modules的库会打包到一起，但是很多库的时候打包输出的js文件就太大了</span></span><br><span class="line"><span class="comment">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span></span><br><span class="line"><span class="comment">  当运行webpack时，默认查找webpack.config.js配置文件</span></span><br><span class="line"><span class="comment">  需求：需要运行webpack.dll.js文件</span></span><br><span class="line"><span class="comment">    --&gt; webpack --config webpack.dll.js（配置后先运行这个指令表示以这个配置文件打包）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name] --&gt; jquery</span></span><br><span class="line">    <span class="comment">// ['jquery] --&gt; 要打包的库是jquery</span></span><br><span class="line">    jquery: [<span class="string">'jquery'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出出口指定</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// name就是jquery</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">'dll'</span>), <span class="comment">// 打包到dll目录下</span></span><br><span class="line">    library: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个manifest.json --&gt; 提供jquery的映射关系（告诉webpack：jquery之后不需要再打包和暴露内容的名称）</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'[name]_[hash]'</span>, <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">'dll/manifest.json'</span>) <span class="comment">// 输出文件路径</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;;</span><br><span class="line">webpack.config.js 配置：(告诉 webpack 不需要再打包 jquery，并将之前打包好的 jquery 跟其他打包好的资源一同输出到 build 目录下)</span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中配置：</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'./src/index.html'</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: resolve(__dirname, <span class="string">'dll/manifest.json'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 将某个文件打包输出到build目录下，并在html中自动引入该资源</span></span><br><span class="line">  <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">    filepath: resolve(__dirname, <span class="string">'dll/jquery.js'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>5.2.2 优化代码运行的性能<br>5.2.2.1 缓存<br>5.2.2.2 tree shaking（树摇）<br>tree shaking：去除无用代码<br>前提：1. 必须使用 ES6 模块化 2. 开启 production 环境 （这样就自动会把无用代码去掉）<br>作用：减少代码体积<br>在 package.json 中配置：<br>“sideEffects”: false 表示所有代码都没有副作用（都可以进行 tree shaking）<br>这样会导致的问题：可能会把 css / @babel/polyfill 文件干掉（副作用）<br>所以可以配置：”sideEffects”: [“<em>.css”, “</em>.less”] 不会对css/less文件tree shaking处理<br>5.2.2.3 code split（代码分割）<br>代码分割。将打包输出的一个大的 bundle.js 文件拆分成多个小文件，这样可以并行加载多个文件，比加载一个文件更快。<br>1.多入口拆分（几个入口就拆分几个文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    <span class="comment">// 多入口：有一个入口，最终输出就有一个bundle</span></span><br><span class="line">    index: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    test: <span class="string">'./src/js/test.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// [name]：取文件名</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:10].js'</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">'build'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">2.</span>optimization：（多入口，单入口都可搭配使用）</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'all'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>•    将 node_modules 中的代码单独打包（大小超过30kb）（如果有多个node_modules的库会打包到一起，可以用dll再细分）<br>•    自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk(比如两个模块中都引入了jquery会被打包成单独的文件)（大小超过30kb）<br>3.import 动态导入语法：<br>/*<br>  通过js代码，让某个文件被单独打包成一个chunk<br>  import动态导入语法：能将某个文件单独打包(test文件不会和index打包在同一个文件而是单独打包)<br>  webpackChunkName:指定test单独打包后文件的名字<br>在index.js中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test' */</span><span class="string">'./test'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; mul, count &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 文件加载成功~</span></span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件加载失败~'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>5.2.2.4 lazy loading（懒加载/预加载）<br>1.懒加载：当文件需要使用时才加载（需要代码分割）。但是如果资源较大，加载时间就会较长，有延迟。<br>2.正常加载：可以认为是并行加载（同一时间加载多个文件）没有先后顺序，先加载了不需要的资源就会浪费时间。<br>3.预加载 prefetch（兼容性很差）：会在使用之前，提前加载。等其他资源加载完毕，浏览器空闲了，再偷偷加载这个资源。这样在使用时已经加载好了，速度很快。所以在懒加载的基础上加上预加载会更好。<br>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将import的内容放在异步回调函数中使用，点击按钮，test.js才会被加载(不会重复加载)</span></span><br><span class="line">  <span class="comment">// webpackPrefetch: true表示开启预加载</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'test', webpackPrefetch: true */</span><span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./test'</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.2.2.5 pwa（离线可访问技术）<br>pwa：离线可访问技术（渐进式网络开发应用程序），使用 serviceworker 和 workbox 技术。优点是离线也能访问，缺点是兼容性差。<br>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'workbox-webpack-plugin'</span>); <span class="comment">// 引入插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins中加入：</span></span><br><span class="line"><span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">    2. 删除旧的 serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    生成一个 serviceworker 配置文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  clientsClaim: <span class="literal">true</span>,</span><br><span class="line">  skipWaiting: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">index.js 中还需要写一段代码来激活它的使用：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. eslint不认识 window、navigator全局变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    解决：需要修改package.json中eslintConfig配置</span></span><br><span class="line"><span class="comment">    "env": &#123;</span></span><br><span class="line"><span class="comment">      "browser": true // 支持浏览器端全局变量</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2. sw代码必须运行在服务器上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt; nodejs</span></span><br><span class="line"><span class="comment">    或--&gt;</span></span><br><span class="line"><span class="comment">      npm i serve -g</span></span><br><span class="line"><span class="comment">      serve -s build 启动服务器，将打包输出的build目录下所有资源作为静态资源暴露出去</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123; <span class="comment">// 处理兼容性问题</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/service-worker.js'</span>) <span class="comment">// 注册serviceWorker</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册成功了~'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sw注册失败了~'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-优化配置&quot;&gt;&lt;a href=&quot;#Webpack-优化配置&quot; class=&quot;headerlink&quot; title=&quot;Webpack 优化配置&quot;&gt;&lt;/a&gt;Webpack 优化配置&lt;/h3&gt;&lt;p&gt;5.1 开发环境性能优化&lt;br&gt;5.1.1 HMR（模块热替换）&lt;br&gt;HMR: hot module replacement 热模块替换 / 模块热替换&lt;br&gt;作用：一个模块发生变化，只会重新打包构建这一个模块（而不是打包所有模块） ，极大提升构建速度&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-生产环境基本配置</title>
    <link href="http://yoursite.com/2020/09/17/Webpack_Note-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/17/Webpack_Note-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-16T16:00:00.000Z</published>
    <updated>2021-01-08T03:37:11.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-生产环境的基本配置"><a href="#Webpack-生产环境的基本配置" class="headerlink" title="Webpack 生产环境的基本配置"></a>Webpack 生产环境的基本配置</h3><p>而生产环境的配置需要考虑以下几个方面：<br>•    提取 css 成单独文件<br>•    css 兼容性处理<br>•    压缩 css</p><a id="more"></a><p>•    js 语法检查<br>•    js 兼容性处理<br>•    js 压缩<br>•    html 压缩</p><p>下面是一个基本的生产环境下的webpack.config.js配置</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractorPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> OptimiziCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimizi-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义node.js的环境变量，决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复用loader的写法</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">    <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件然后通过link加载</span></span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="comment">// css-loader：将css文件整合到js文件中</span></span><br><span class="line">    <span class="comment">// 经过css-loader处理后，样式文件是在js文件中的</span></span><br><span class="line">    <span class="comment">// 问题：1.js文件体积会很大2.需要先加载js再动态创建style标签，样式渲染速度就慢，会出现闪屏现象</span></span><br><span class="line">    <span class="comment">// 解决：用MiniCssExtractPlugin.loader替代style-loader</span></span><br><span class="line">    <span class="string">'css-loader'</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      postcss-loader：css兼容性处理：postcss --&gt; 需要安装：postcss-loader postcss-preset-env</span></span><br><span class="line"><span class="comment">      postcss需要通过package.json中browserslist里面的配置加载指定的css兼容性样式</span></span><br><span class="line"><span class="comment">      在package.json中定义browserslist：</span></span><br><span class="line"><span class="comment">      "browserslist": &#123;</span></span><br><span class="line"><span class="comment">        // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span></span><br><span class="line"><span class="comment">        "development": [ // 只需要可以运行即可</span></span><br><span class="line"><span class="comment">          "last 1 chrome version",</span></span><br><span class="line"><span class="comment">          "last 1 firefox version",</span></span><br><span class="line"><span class="comment">          "last 1 safari version"</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        // 生产环境。默认是生产环境</span></span><br><span class="line"><span class="comment">        "production": [ // 需要满足绝大多数浏览器的兼容</span></span><br><span class="line"><span class="comment">          "&gt;0.2%",</span></span><br><span class="line"><span class="comment">          "not dead",</span></span><br><span class="line"><span class="comment">          "not op_mini all"</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            ident: <span class="string">'postcss'</span>, <span class="comment">// 基本写法</span></span><br><span class="line">            plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                <span class="comment">// postcss的插件</span></span><br><span class="line">                <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)(),</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'js/built.js'</span>,</span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [...commonCssLoader],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [...commonCssLoader, <span class="string">'less-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              正常来讲，一个文件只能被一个loader处理</span></span><br><span class="line"><span class="comment">              当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序</span></span><br><span class="line"><span class="comment">              先执行eslint再执行babel（用enforce）</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  js的语法检查： 需要下载 eslint-loader eslint</span></span><br><span class="line"><span class="comment">                  注意：只检查自己写的源代码，第三方的库是不用检查的</span></span><br><span class="line"><span class="comment">                  airbnb(一个流行的js风格) --&gt; 需要下载 eslint-config-airbnb-base eslint-plugin-import</span></span><br><span class="line"><span class="comment">                  设置检查规则：</span></span><br><span class="line"><span class="comment">                    package.json中eslintConfig中设置</span></span><br><span class="line"><span class="comment">                      "eslintConfig": &#123;</span></span><br><span class="line"><span class="comment">                        "extends": "airbnb-base"， // 继承airbnb的风格规范</span></span><br><span class="line"><span class="comment">                        "env": &#123;</span></span><br><span class="line"><span class="comment">                          "browser": true // 可以使用浏览器中的全局变量(使用window不会报错)</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                      &#125;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, <span class="comment">// 忽略node_modules</span></span><br><span class="line">                enforce: <span class="string">'pre'</span>, <span class="comment">// 优先执行</span></span><br><span class="line">                loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 自动修复</span></span><br><span class="line">                    fix: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              js兼容性处理：需要下载 babel-loader @babel/core</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">                   1. 基本js兼容性处理 --&gt; @babel/preset-env</span></span><br><span class="line"><span class="comment">                           问题：只能转换基本语法，如promise高级语法不能转换</span></span><br><span class="line"><span class="comment">                            2. 全部js兼容性处理 --&gt; @babel/polyfill</span></span><br><span class="line"><span class="comment">                                   问题：只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了</span></span><br><span class="line"><span class="comment">                                    3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span></span><br><span class="line"><span class="comment">                                    */</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 第三种方式：按需加载</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 预设：指示babel做怎样的兼容性处理</span></span><br><span class="line">                    presets: [</span><br><span class="line">                        <span class="string">'@babel/preset-env'</span>, <span class="comment">// 基本预设</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            useBuiltIns: <span class="string">'usage'</span>, <span class="comment">//按需加载</span></span><br><span class="line">                            corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;, <span class="comment">// 指定core-js版本</span></span><br><span class="line">                            targets: &#123; <span class="comment">// 指定兼容到什么版本的浏览器</span></span><br><span class="line">                                chrome: <span class="string">'60'</span>,</span><br><span class="line">                                firefox: <span class="string">'50'</span>,</span><br><span class="line">                                ie: <span class="string">'9'</span>,</span><br><span class="line">                                safari: <span class="string">'10'</span>,</span><br><span class="line">                                edge: <span class="string">'17'</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 图片处理</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                    esModule: <span class="literal">false</span>, <span class="comment">// 关闭url-loader默认使用的es6模块化解析</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// html中的图片处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理其他文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                exclude: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">            filename: <span class="string">'css/built.css'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 压缩css</span></span><br><span class="line">        <span class="keyword">new</span> OptimiziCssAssetsWebpackPlugin(),</span><br><span class="line">        <span class="comment">// HtmlWebpackPlugin：html文件的打包和压缩处理</span></span><br><span class="line">        <span class="comment">// 通过这个插件会自动将单独打包的样式文件通过link标签引入</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            <span class="comment">// 压缩html代码</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                <span class="comment">// 移除空格</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 移除注释</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 生产环境下会自动压缩js代码</span></span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-生产环境的基本配置&quot;&gt;&lt;a href=&quot;#Webpack-生产环境的基本配置&quot; class=&quot;headerlink&quot; title=&quot;Webpack 生产环境的基本配置&quot;&gt;&lt;/a&gt;Webpack 生产环境的基本配置&lt;/h3&gt;&lt;p&gt;而生产环境的配置需要考虑以下几个方面：&lt;br&gt;•    提取 css 成单独文件&lt;br&gt;•    css 兼容性处理&lt;br&gt;•    压缩 css&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack_Note-开发环境基本配置</title>
    <link href="http://yoursite.com/2020/09/15/Webpack_Note-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/09/15/Webpack_Note-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-14T16:00:00.000Z</published>
    <updated>2021-01-08T03:38:45.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Webpack-开发环境的基本配置"><a href="#Webpack-开发环境的基本配置" class="headerlink" title="Webpack 开发环境的基本配置"></a>Webpack 开发环境的基本配置</h3><p>webpack.config.js 是 webpack 的配置文件。<br>作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）<br>所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。<br>开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：</p><a id="more"></a><p>•    打包样式资源<br>•    打包 html 资源<br>•    打包图片资源<br>•    打包其他资源<br>•    devServer</p><p>下面是一个简单的开发环境webpack.confg.js配置文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 引用plugin</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// webpack配置</span></span><br><span class="line">    entry: <span class="string">'./src/js/index.js'</span>, <span class="comment">// 入口起点</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="comment">// 输出文件名</span></span><br><span class="line">        filename: <span class="string">'js/build.js'</span>,</span><br><span class="line">        <span class="comment">// __dirname是nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        path: resolve(__dirname, <span class="string">'build'</span>), <span class="comment">// 输出路径，所有资源打包都会输出到这个文件夹下</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// loader配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// 详细的loader配置</span></span><br><span class="line">            <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配哪些文件</span></span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">                use: [</span><br><span class="line">                    <span class="comment">// use数组中loader执行顺序：从右到左，从下到上，依次执行(先执行css-loader)</span></span><br><span class="line">                    <span class="comment">// style-loader：创建style标签，将js中的样式资源插入进去，添加到head中生效</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="comment">// css-loader：将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                    <span class="comment">// less-loader：将less文件编译成css文件，需要下载less-loader和less</span></span><br><span class="line">                    <span class="string">'less-loader'</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// url-loader：处理图片资源，问题：默认处理不了html中的img图片</span></span><br><span class="line">                test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                <span class="comment">// 需要下载 url-loader file-loader</span></span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 图片大小小于8kb，就会被base64处理，优点：减少请求数量（减轻服务器压力），缺点：图片体积会更大（文件请求速度更慢）</span></span><br><span class="line">                    <span class="comment">// base64在客户端本地解码所以会减少服务器压力，如果图片过大还采用base64编码会导致cpu调用率上升，网页加载时变卡</span></span><br><span class="line">                    limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                    <span class="comment">// 给图片重命名，[hash:10]：取图片的hash的前10位，[ext]：取文件原来扩展名</span></span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是conmonjs，解析时会出问题：[object Module]</span></span><br><span class="line">                    <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">                    esModule: <span class="literal">false</span>,</span><br><span class="line">                    outputPath: <span class="string">'imgs'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">                loader: <span class="string">'html-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 打包其他资源(除了html/js/css资源以外的资源)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 排除html|js|css|less|jpg|png|gif文件</span></span><br><span class="line">                exclude: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,</span><br><span class="line">                <span class="comment">// file-loader：处理其他文件</span></span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[hash:10].[ext]'</span>,</span><br><span class="line">                    outputPath: <span class="string">'media'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugin的配置</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// html-webpack-plugin：默认会创建一个空的html文件，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">        <span class="comment">// 需要有结构的HTML文件可以加一个template</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 复制这个./src/index.html文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    mode: <span class="string">'development'</span>, <span class="comment">// 开发模式</span></span><br><span class="line">    <span class="comment">// 开发服务器 devServer：用来自动化，不用每次修改后都重新输入webpack打包一遍（自动编译，自动打开浏览器，自动刷新浏览器）</span></span><br><span class="line">    <span class="comment">// 特点：只会在内存中编译打包，不会有任何输出（不会像之前那样在外面看到打包输出的build包，而是在内存中，关闭后会自动删除）</span></span><br><span class="line">    <span class="comment">// 启动devServer指令为：npx webpack-dev-server</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 项目构建后路径</span></span><br><span class="line">        contentBase: resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        <span class="comment">// 启动gzip压缩</span></span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，大部分配置都在注释中给出解释。<br>•    运行项目的两个指令：<br>webpack 会将打包结果输出出去（build文件夹）<br>npx webpack-dev-server 只会在内存中编译打包，没有输出<br>•    loader 和 plugin 的不同：（plugin 一定要先引入才能使用）<br> loader：1. 下载 2. 使用（配置 loader）<br> plugins：1.下载 2. 引入 3. 使用</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Webpack-开发环境的基本配置&quot;&gt;&lt;a href=&quot;#Webpack-开发环境的基本配置&quot; class=&quot;headerlink&quot; title=&quot;Webpack 开发环境的基本配置&quot;&gt;&lt;/a&gt;Webpack 开发环境的基本配置&lt;/h3&gt;&lt;p&gt;webpack.config.js 是 webpack 的配置文件。&lt;br&gt;作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）&lt;br&gt;所有构建工具都是基于 nodejs 平台运行的，模块化默认采用 commonjs。&lt;br&gt;开发环境配置主要是为了能让代码运行。主要考虑以下几个方面：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>视口的理解</title>
    <link href="http://yoursite.com/2020/05/20/%E8%A7%86%E5%8F%A3/"/>
    <id>http://yoursite.com/2020/05/20/%E8%A7%86%E5%8F%A3/</id>
    <published>2020-05-20T01:24:33.000Z</published>
    <updated>2021-01-08T05:22:02.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="像素："><a href="#像素：" class="headerlink" title="像素："></a>像素：</h3><pre><code>- 屏幕是由一个一个发光的小点构成，这一个个的小点就是像素- 分辨率：1920 x 1080 说的就是屏幕中小点的数量- 在前端开发中像素要分成两种情况讨论：CSS像素 和 物理像素- 物理像素，上述所说的小点点就属于物理像素- CSS像素，编写网页时，我们所用像素都是CSS像素        - 浏览器在显示网页时，需要将CSS像素转换为物理像素然后再呈现        - 一个css像素最终由几个物理像素显示，由浏览器决定：        默认情况下在pc端，一个css像素 = 一个物理像素</code></pre><a id="more"></a><h3 id="视口（viewport）"><a href="#视口（viewport）" class="headerlink" title="视口（viewport）"></a>视口（viewport）</h3><pre><code>- 视口就是屏幕中用来显示网页的区域- 可以通过查看视口的大小，来观察CSS像素和物理像素的比值- 默认情况下：        视口宽度 1920px（CSS像素）                1920px（物理像素）                - 此时，css像素和物理像素的比是 1:1    - 放大两倍的情况：        视口宽度 960px（CSS像素）                1920px（物理像素）                - 此时，css像素和物理像素的比是1:2（一个css像素，用俩个物理像素显示，那就有放大效果了）                        结论：可以通过改变视口的大小，来改变CSS像素和物理像素的比值。    在不通的屏幕，单位像素的大小是不同的，像素越小屏幕会越清晰    24寸 1920x1080    iphone8 4.7寸 750 x 1334    智能手机的像素点 远远小于 计算机的像素点,所以更清晰。    问题：一个宽度为900px的网页在iphone6中要如何显示呢？    默认情况下，移动端的网页都会将视口设置为980像素（css像素）        以确保pc端网页可以在移动端正常访问，但是如果网页的宽度超过了980，            移动端的浏览器会自动对网页缩放以完整显示网页。                    所以基本大部分的pc端网站都可以在移动端中正常浏览，但是往往都不会有一个好的体验，（因为一个物理像素要显示几个css像素，那么会显示的很小，    本来手机上的物理像素就很小了，再让一个物理像素显示多个css像素只会更小。）        为了解决这个问题，大部分网站都会专门为移动端设计网页             移动端默认的视口大小是980px(css像素)，        默认情况下，移动端的像素比就是  980/移动端物理宽度  （980/750）        如果我们直接在网页中编写移动端代码，这样在980的视口下，像素比是非常不好，            导致网页中的内容非常非常的小        编写移动页面时，必须要确保有一个比较合理的像素比：            1css像素 对应 2个物理像素            1css像素 对应 3个物理像素            这样在手机中用2个物理像素显示1个css像素，这样就能放大一倍。                        而上边的结论是：可以通过改变视口的大小，来改变CSS像素和物理像素的比值。        所以我们要设置视口，一般视口设置为手机宽度（物理像素）的一半。（css像素和物理像素的比是1:2）        如：iPhone8 宽度物理像素750px，那么设视口为375px                - 可以通过meta标签来设置视口大小                        - 每一款移动设备设计时，都会有一个最佳的像素比，        一般我们只需要将像素比设置为该值即可得到一个最佳效果        将像素比设置为最佳像素比的视口大小我们称其为完美视口        将网页的视口设置为完美视口        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;              不同的设备完美视口的大小是不一样的        iphone8 -- 375        iphone8plus -- 414              由于不同设备视口和像素比不同，所以同样的375个像素在不同的设备下意义是不一样，    比如在iphone6中 375就是全屏，而到了plus中375就不是全屏所以在开发移动端时，就不能再使用px来进行布局了vw 表示的是视口的宽度（viewport width）    - 100vw = 一个视口的宽度    - 1vw = 1%视口宽度    vw这个单位永远相当于视口宽度进行计算    一般开发移动端设计图的宽度为：        750px     那么在设计图中设置width：750px，在网页中就为一个视口（100vw）的大小      750px = 100vw    1px = 0.1333333333333333vw    使用vw作为单位        100vw    创建一个 在设计图上为40px x 30px 大小的元素    40px = 0.1333333333333333vw x 40 = 5.33vw    30px = 0.1333333333333333vw x 30 = 3.99vw    使用vw单位，就可以在不同手机上显示各自的最佳效果。    比如：    在iPhone8 视口为375px     100vw = 375px    1vw = 3.75px    在设计图上为40px的元素    40px = 0.1333333333333333vw x 40 = 5.33vw        5.33vw = 19.98px（3.75*5.33）        在iPhone8视口中显示19.98px    在iPhone8 plus 视口为 414px     100vw = 414px    1vw = 4.14px    在设计图上为40px的元素在视口中    40px = 0.1333333333333333vw x 40 = 5.33vw        5.33vw = 22.06px（4.14*5.33）        在iPhone8 plus视口中显示22.06px        </code></pre><p>​                </p><hr>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;像素：&quot;&gt;&lt;a href=&quot;#像素：&quot; class=&quot;headerlink&quot; title=&quot;像素：&quot;&gt;&lt;/a&gt;像素：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- 屏幕是由一个一个发光的小点构成，这一个个的小点就是像素
- 分辨率：1920 x 1080 说的就是屏幕中小点的数量
- 在前端开发中像素要分成两种情况讨论：CSS像素 和 物理像素
- 物理像素，上述所说的小点点就属于物理像素
- CSS像素，编写网页时，我们所用像素都是CSS像素
        - 浏览器在显示网页时，需要将CSS像素转换为物理像素然后再呈现
        - 一个css像素最终由几个物理像素显示，由浏览器决定：
        默认情况下在pc端，一个css像素 = 一个物理像素&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="viewport" scheme="http://yoursite.com/tags/viewport/"/>
    
  </entry>
  
  <entry>
    <title>负数在计算机的存储</title>
    <link href="http://yoursite.com/2020/04/29/%E8%B4%9F%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2020/04/29/%E8%B4%9F%E6%95%B0%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%AD%98%E5%82%A8/</id>
    <published>2020-04-29T04:54:44.000Z</published>
    <updated>2021-01-08T05:23:21.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二进制在计算机中存储负数时为何要用补码？"><a href="#二进制在计算机中存储负数时为何要用补码？" class="headerlink" title="二进制在计算机中存储负数时为何要用补码？"></a>二进制在计算机中存储负数时为何要用补码？</h2><p>  首先我们知道最高位的二进制位是用来表示正负 1为负，0为正<br>（在计算机中为32位或者64位二进制存储，我这边用8位二进制作为演示）<br>例如：</p><ul><li>8 二进制为 0000 1000</li><li>8 二进制为 1000 1000<br>如果是直接相加的话 1001 0000 转化为十进制等于-16 显然不对，这说明直接用原码做计算会出错；<a id="more"></a>①那么为什么要用补码表示负数呢？<br>粗俗的来说就是为了溢出最高位；<br>②什么情况下会溢出最高位？<br>就是在全1的情况下，再加上一个1，就会发生溢出；<br>例如：<br>1111 1111</li></ul><p>+0000 0001<br>=1 0000 0000<br>③为什么要发生溢出？<br>例如：<br>-1 二进制为 1000 0001<br>1 二进制为 0000 0001<br>它正确的结果应该为：<br> 1000 0001<br>+0000 0001<br>=0000 0000</p><p>要想成立这个式子 那么1000 0001 要变化为 1111 1111；<br> 1111 1111<br>+0000 0001<br>=1 0000 0000 最高位溢出了 所以就等于 0000 0000 那么计算就成立了；<br>④ 1000 0001 如何变化为 1111 1111 呢？<br>首先最高位符号位1不变，按位取反变成 1111 1110 ，再加上1，就会得到 1111 1111；<br>等等，你不觉得这是很熟悉的操作吗？<br>没错，这就是求了一下原码的补码！<br>所以，在计算机中负数用补码来存储计算；<br>可以进一步解释一下；<br>如：<br>-8 二进制原码为 1000 1000 为什么要转化为补码 1111 1000 存储计算；<br>这时你可以发现前五位都是1，这时候你加上任何数只要大于0000 1000（十进制为8） 就会发生溢出，变成一个正数了！<br>如果小于0000 1000（十进制为8）这个数就不会溢出，那么最高位还是1，就还是负数！<br>完整计算过程：<br>如：-8+5<br>-8 二进制原码为 1000 1000 转化为补码 1111 1000<br> 1111 1000<br>+0000 0101<br>=1111 1101<br>首先我们可以看到最高位是1显然是个负数，我们转化为原码；<br> 1111 1101<br>-0000 0001<br>=1111 1100 再符号位不变按位取反1000 0011 就是 -3 答案正确！<br>再如：-8+9<br> 1111 1000<br>+0000 1001</p><p>=1 0000 0001 最高位溢出了 所以就等于 0000 0001 就是 1 答案正确！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二进制在计算机中存储负数时为何要用补码？&quot;&gt;&lt;a href=&quot;#二进制在计算机中存储负数时为何要用补码？&quot; class=&quot;headerlink&quot; title=&quot;二进制在计算机中存储负数时为何要用补码？&quot;&gt;&lt;/a&gt;二进制在计算机中存储负数时为何要用补码？&lt;/h2&gt;&lt;p&gt;  首先我们知道最高位的二进制位是用来表示正负 1为负，0为正&lt;br&gt;（在计算机中为32位或者64位二进制存储，我这边用8位二进制作为演示）&lt;br&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8 二进制为 0000 1000&lt;/li&gt;
&lt;li&gt;8 二进制为 1000 1000&lt;br&gt;如果是直接相加的话 1001 0000 转化为十进制等于-16 显然不对，这说明直接用原码做计算会出错；</summary>
    
    
    
    
    <category term="binary" scheme="http://yoursite.com/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>My First Blog Post</title>
    <link href="http://yoursite.com/2020/04/20/My-First-Blog-Post/"/>
    <id>http://yoursite.com/2020/04/20/My-First-Blog-Post/</id>
    <published>2020-04-20T07:58:38.000Z</published>
    <updated>2021-01-08T08:54:51.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LY"><a href="#LY" class="headerlink" title="LY"></a>LY</h2><p>she is my beautiful girl!</p><hr><h2 id="LSW"><a href="#LSW" class="headerlink" title="LSW"></a>LSW</h2><p>I am what I am.</p><hr><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>2020.4.20</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LY&quot;&gt;&lt;a href=&quot;#LY&quot; class=&quot;headerlink&quot; title=&quot;LY&quot;&gt;&lt;/a&gt;LY&lt;/h2&gt;&lt;p&gt;she is my beautiful girl!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;LSW&quot;&gt;&lt;a href=&quot;#LSW&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="love letter" scheme="http://yoursite.com/tags/love-letter/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 教程</title>
    <link href="http://yoursite.com/2020/01/08/MarkDown-Note/"/>
    <id>http://yoursite.com/2020/01/08/MarkDown-Note/</id>
    <published>2020-01-08T08:58:38.000Z</published>
    <updated>2021-01-08T09:39:26.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-教程"><a href="#Markdown-教程" class="headerlink" title="Markdown 教程"></a>Markdown 教程</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><ul><li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</li></ul><h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>Markdown 标题有两种格式。</p><h3 id="1、使用-和-标记一级和二级标题"><a href="#1、使用-和-标记一级和二级标题" class="headerlink" title="1、使用 = 和 - 标记一级和二级标题"></a>1、使用 = 和 - 标记一级和二级标题</h3><p>= 和 - 标记语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><p>显示效果如下图：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h3><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>显示效果如下图：</p><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><hr><hr><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。   </p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GOOGLE.COM</span><br><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><p>显示效果如下所示：<br>GOOGLE.COM<br><del>BAIDU.COM</del></p><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <strong><u></strong> 标签来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线的文本&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><u>带下划线的文本</u></p><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line"></span><br><span class="line">[^RUNOOB]: 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>创建脚注格式类似这样 <a href="学的不仅是技术，更是梦想！！！">^RUNOOB</a>。</p><hr><hr><hr><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<strong>***)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">- 第二项</span><br><span class="line">+ 第三项</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ul><li>第一项</li></ul><ul><li>第二项</li></ul><ul><li>第三项</li></ul><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><hr><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li></ol><hr><hr><hr><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; 学的不仅是技术更是梦想</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><blockquote><p>区块引用<br>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><hr><hr><hr><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;printf()&#96; 函数</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><code>printf()</code> 函数</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#39;hello world&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">显示结果如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#39;hello world&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><hr><hr><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><p>链接使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [百度](https:&#x2F;&#x2F;www.Baidu.com)</span><br><span class="line">&lt;https:&#x2F;&#x2F;www.Baidu.com&gt;</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p>这是一个链接 <a href="https://www.Baidu.com" target="_blank" rel="noopener">百度</a></p><p><a href="https://www.Baidu.com" target="_blank" rel="noopener">https://www.Baidu.com</a></p><hr><hr><hr><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>使用实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![luffy picture](https:&#x2F;&#x2F;bkimg.cdn.bcebos.com&#x2F;pic&#x2F;a8014c086e061d95f662155f76f40ad162d9cab5?x-bce-process&#x3D;image&#x2F;watermark,image_d2F0ZXIvYmFpa2U5Mg&#x3D;&#x3D;,g_7,xp_5,yp_5)</span><br><span class="line"></span><br><span class="line">![luffy avatar](https:&#x2F;&#x2F;bkimg.cdn.bcebos.com&#x2F;pic&#x2F;e7cd7b899e510fb396c90661d033c895d0430c77?x-bce-process&#x3D;image&#x2F;watermark,image_d2F0ZXIvYmFpa2U4MA&#x3D;&#x3D;,g_7,xp_5,yp_5 &quot;luffy&quot;)</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://bkimg.cdn.bcebos.com/pic/a8014c086e061d95f662155f76f40ad162d9cab5?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5" alt="RUNOOB 图标"></p><p><img src="https://bkimg.cdn.bcebos.com/pic/e7cd7b899e510fb396c90661d033c895d0430c77?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5" alt="luffy avatar" title="luffy"></p><hr><hr><hr><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>以上代码显示结果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>对齐方式</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>以上代码显示结果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><hr><hr><hr><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 </p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Markdown-教程&quot;&gt;&lt;a href=&quot;#Markdown-教程&quot; class=&quot;headerlink&quot; title=&quot;Markdown 教程&quot;&gt;&lt;/a&gt;Markdown 教程&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
